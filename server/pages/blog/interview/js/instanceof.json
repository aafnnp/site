{"pageProps":{"data":{"date":"May 19, 2020","title":"面试题-手写instanceof","tags":["javascript"],"fromNow":"2 years ago"},"content":{"compiledSource":"var i=Object.defineProperty,s=Object.defineProperties;var b=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var l=(t,e,o)=>e in t?i(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o,n=(t,e)=>{for(var o in e||(e={}))a.call(e,o)&&l(t,o,e[o]);if(p)for(var o of p(e))c.call(e,o)&&l(t,o,e[o]);return t},u=(t,e)=>s(t,b(e));var f=(t,e)=>{var o={};for(var r in t)a.call(t,r)&&e.indexOf(r)<0&&(o[r]=t[r]);if(t!=null&&p)for(var r of p(t))e.indexOf(r)<0&&c.call(t,r)&&(o[r]=t[r]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var r=o,{components:t}=r,e=f(r,[\"components\"]);return mdx(MDXLayout,u(n(n({},layoutProps),e),{components:t,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u5B9E\\u73B0 instanceof\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u6838\\u5FC3\\u8003\\u5BDF\\u70B9 \",mdx(\"a\",n({parentName:\"p\"},{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf\"}),\"getPrototypeOf\"))),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-javascript\"}),`function _instanceof(left, right) {\n  if (left !== 'object' || left === null) return false;\n  const proto = Object.getPrototypeOf(left);\n  while (true) {\n    if (proto === null) return false;\n    if (proto === right.prototype) return true;\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n_instanceof(111, Number); //true\n_instanceof(new String('11'), String); //true\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 19, 2020","title":"面试题-手写instanceof","tags":["javascript"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"November 19, 2019","title":"安装nvm和nodejs","tags":["server"],"fromNow":"2 years ago"},"content":"\n## 通过 nvm 安装 nodejs\n\n## 安装 nvm\n\n```bash\ncurl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n```\n\n或者\n\n```bash\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n```\n\n然后：\n\n```bash\nsource ~/.bashrc\n```\n\n## 安装 nodejs\n\n```bash\nnvm install stable\n```\n","slug":"server/安装nvm和nodejs"},{"data":{"date":"January 14, 2021","title":"21个用于日常开发的有用JavaScript片段","tags":["i18n","javascript"],"fromNow":"a year ago"},"content":"\n## 输入值数字化\n\n```javascript\nconst checkMyValueType = (event) => {\n  console.log(typeof event.target.value); // string\n  console.log(typeof event.target.valueAsNumber); // number\n};\n<input type=\"number\" onkeyup=\"checkMyValueType(event)\" />;\n```\n\n## 复制输入框值到粘贴板\n\n```javascript\nfunction copyToClipboard(inputID) {\n  navigator.clipboard.writeText(document.querySelector(inputID).value);\n}\n```\n\n## 检查窗口是否可见\n\n```javascript\nconst isBrowserTabInView = () => document.hidden;\nisBrowserTabInView(); // returns true or false depending if tab is in view / focus\n```\n\n## 布尔值取反\n\n```javascript\nlet myBool = false;\nmyBool = !myBool;\nconsole.log(myBool); // true\nmyBool = !myBool;\nconsole.log(myBool); // false\n```\n\n## 检查值是否是偶数\n\n```javascript\nconst isEven = (num) => num % 2 === 0;\nconsole.log(isEven(2)); // true\nconsole.log(isEven(3)); // false\n```\n\n## 检查日期是否是工作日\n\n```javascript\nconst isWeekday = (d) => d.getDay() % 6 !== 0;\nconsole.log(isWeekday(new Date(2021, 0, 11))); // true (Monday)\nconsole.log(isWeekday(new Date(2021, 0, 10))); // false (Sunday)\n```\n\n## 日期加减\n\n```javascript\nconst addDaysToDate = (date, n) => {\n  date.setDate(date.getDate() + n);\n  return date.toISOString().split('T')[0];\n};\naddDaysToDate('2021-0-10', 10); // \"2021-01-20\"\naddDaysToDate('2021-0-10', -10); // '2020-12-31'\n```\n\n## 获取时分秒\n\n```javascript\nconst timeFromDate = (date) => date.toTimeString().slice(0, 8);\nconsole.log(timeFromDate(new Date(2021, 0, 10, 17, 30, 0)));\n// \"17:30:00\"\nconsole.log(timeFromDate(new Date(2021, 0, 10, 5, 56, 44)));\n// \"05:56:44\"\n```\n\n## 计算两个日期之间的工作日数\n\n````javascript\nconst countWeekDaysBetween = (startDate, endDate) =>\n  Array\n    .from({ length: (endDate - startDate) / (1000 * 3600 * 24) })\n    .reduce(count => {\n      if (startDate.getDay() % 6 !== 0) {\n        count++;\n      }\n     startDate = new Date(startDate.setDate(startDate.getDate() + 1));\n      return count;\n    }, 0);\ncountWeekDaysBetween(new Date(2021, 0, 10), new Date(2021, 0, 20)); // 7\ncountWeekDaysBetween(new Date(2021, 1, 10), new Date(2021, 2, 18)); // 26\n`## 检查localstorage是否可用\n``` javascript\nconst isLocalStorageEnabled = () => {\n  try {\n    const key = `__storage__test`;\n    window.localStorage.setItem(key, null);\n    window.localStorage.removeItem(key);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nisLocalStorageEnabled(); // true, if localStorage is accessible\n````\n\n## 计算函数等花费时间\n\n```javascript\nstartTime = performance.now();\nanyMethodOrCode();\nconst endTime = performance.now();\nconsole.log(endTime - startTime + ' milliseconds.'); // (Time in milliseconds)\n```\n\n## 捕获右键点击\n\n```javascript\nwindow.oncontextmenu = () => {\n  console.log('right click');\n};\n```\n\n## 只触发一次事件\n\n```javascript\nconst myButton = document.getElementById('myBtn');\nconst myClickFunction = () => {\n  console.log('this click will only get called once');\n};\nmyButton.addEventListener('click', myClickHandler, {\n  once: true,\n});\n```\n\n## 滚动到顶部\n\n```javascript\nconst scrollToTopOfDocument = () => {\n  const c = document.documentElement.scrollTop || document.body.scrollTop;\n  if (c > 0) {\n    window.requestAnimationFrame(scrollToTop);\n    window.scrollTo(0, c - c / 8);\n  }\n};\nscrollToTopOfDocument();\n```\n\n## 检查字符串是否大写\n\n```javascript\nconst isUpperCase = (str) => str === str.toUpperCase();\nconsole.log(isUpperCase('string')); // false\nconsole.log(isUpperCase('STRING')); // true\nconsole.log(isUpperCase('5TR1NG')); // true\n```\n\n## 检查元素是否处于 focus 状态\n\n```javascript\nconst elementIsInFocus = (el) => el === document.activeElement;\nelementIsInFocus(anyElement); // returns true if in focus, false if not in focus\n```\n\n## 查找数组间不同元素\n\n```javascript\nconst differenceInArrays = (array1, array2) => {\n  const set = new Set(array2);\n  return array1.filter((x) => !set.has(x));\n};\ndifferenceInArrays(['apple', 'orange', 'banana'], ['apple', 'orange', 'mango']); // [\"banana\"]\ndifferenceInArrays([10, 12, 5], [66, 10, 6]); // [12, 5]\n```\n\n## 移除事件监听\n\n```javascript\nconst removeEventOffElement = (el, evt, fn, opts = false) =>\n  el.removeEventListener(evt, fn, opts);\nconst testFunction = () => console.log('My function has been called');\ndocument.body.addEventListener('click', testFunction);\n// Call remove method\nremoveEventOffElement(document.body, 'click', fn);\n```\n\n## 随机生成 HEX 值\n\n```javascript\nconst generateRandomColour = () =>\n  '#' + Math.floor(Math.random() * 16777215).toString(16);\n//EXAMPLE\ndocument.getElementsByTagName('body')[0].style.color = generateRandomColour();\n```\n\n## 查找第一个定义的非空参数\n\n```javascript\nconst getFirstValidValue = (...values) => values.find(v => ![undefined, null].includes(v));\nconsole.log(getFirstValidValue(null, undefined, 'Hey', null); // 'Hey'\n```\n\n## 元素外部监听事件\n\n```javascript\nconst onClickOutsideElement = (element, callback) => {\n  document.addEventListener('click', (e) => {\n    if (!element.contains(e.target)) callback();\n  });\n};\nonClickOutside('#some-element', () => console.log('Hey you missed'));\n// Will log \"Hey you missed\" everytime a click that was not \"some-element\" was clicked\n```\n\n## 总结\n\n有时开发人员会发现自己在一次又一次地创建相同的东西，希望上面的一些代码片段可以在在开发中重用。最新的 JavaScript 特性和浏览器 api 是很重要的。\n","slug":"translate/21个用于日常开发的有用JavaScript片段"},{"data":{"date":"December 3, 2021","title":"Data Types and Data Structures","tags":["python"],"description":"以元组和字典的形式介绍数据结构。","fromNow":"12 days ago"},"content":"\n## 原始数据类型\n\n- 整形：`int`\n- 浮点型：`float`\n- 字符串：`str`\n\n## 无类型\n\n```python\nemail_address = None\n```\n\n`None` 是一个特殊的值，表示空值。\n\n```python\nif email_address:\n    print('email address provided.')\n```\n\n## 元组\n\n元组是一种有序的数据集合，元组中的元素可以是不同的数据类型。\n\n```python\ns = ('a', 'b', 'c')\n```\n\n有时候`()`可以省略，但是不建议这样做。\n\n```python\ns = 'a', 'b', 'c'\n```\n\n通过索引访问元组中的元素，索引从 0 开始。\n\n```python\ns = ('GOOG', 100, 490.10, 'Google Inc.')\nname = s[0] # GOOG\nprice = s[2] # 490.10\nshares = s[1] # 100\n```\n\n无法修改元组中的元素。\n\n```python\ns[1] = 200\n# TypeError: 'tuple' object does not support item assignment\n```\n\n元组可以被重新赋值，但是不能改变元组的长度。\n\n```python\ns = ('GOO', 200, 490.10, 'Google Inc.')\n```\n\n## 元组的包装和拆包\n\n```python\ns = ('GOOG', 100, 490.10, 'Google Inc.')\nname, shares, price, company = s\n```\n\n## 元组和列表\n\n元组通常由不同的数据，而列表是相同类型的数据队列。元组表示的是结构，而列表表示的是顺序\n\n- 都是序列\n- 都可以存储任何数据类型\n- 可以通过索引访问\n\n```python\nrecord = ('GOOG', 100, 490.1)       # 一些不同的数据\n\nsymbols = [ 'GOOG', 'AAPL', 'IBM' ]  # 一些相同类型的数据\n```\n\n## 字典\n\n字典是一种可变的数据结构，它是一种映射，也就是一种键值对的集合。\n\n```python\ns = {\n    'name': 'GOOG',\n    'shares': 100,\n    'price': 490.1\n}\n\ns['name'] # GOOG\ns['shares'] # 100\ns['price'] # 490.1\n```\n","slug":"python/2.1-data"},{"data":{"date":"December 1, 2021","title":"File Management","tags":["python"],"description":"大多数程序需要操作文件，比如读写文件，创建文件夹，删除文件等等。","fromNow":"13 days ago"},"content":"\n## 文件读写\n\n打开文件\n\n```python\nf=open('test.txt','rt')\ng=open('test.txt','wt')\n```\n\n读取所有内容\n\n```python\ndata=f.read()\ndata=f.read([maxbytes])\n```\n\n写入内容\n\n```python\ng.write('hello world')\n```\n\n关闭文件\n\n```python\nf.close()\ng.close()\n```\n\n文件应当在使用完毕后关闭，否则会导致内存泄漏。使用 with 语句可以自动关闭文件。\n\n离开 with 语句后，文件会自动关闭。\n\n```python\nwith open(filename, 'rt') as file:\n    # Use the file `file`\n    ...\n    # No need to close explicitly\n...statements\n```\n\n使用`with`语句读取挣个文件\n\n```python\nwith open('foo.txt', 'rt') as file:\n    data = file.read()\n```\n\n使用`with`语句按行读取文件\n\n```python\nwith open('foo.txt', 'rt') as file:\n    for line in file:\n```\n\n使用`with`语句写入文件\n\n```python\nwith open('outfile', 'wt') as out:\n    out.write('Hello World\\n')\n```\n\n重定向`print`函数\n\n```python\nwith open('foo.txt', 'wt') as file:\n    print('hello world', file=file)\n```\n","slug":"python/1.5-file"},{"data":{"date":"October 13, 2020","title":"Linux命令cd","tags":["linux"],"description":"cd命令用于切换当前工作目录","fromNow":"a year ago"},"content":"\n**cd**命令用于切换当前工作目录。\n\n> ~ 也表示为 home 目录 的意思， . 则是表示目前所在的目录， .. 则表示目前目录位置的上一层目录\n\n## 使用方法\n\n```shell\n#切换到某个目录\ncd foldername\n\n#当前所在目录\ncd .\n\n#切换到上一层目录\ncd ..\n\n#切换到home目录\ncd ~\n\n#切换到根目录\ncd /\n```\n","slug":"linux/Linux命令-cd"},{"data":{"date":"May 19, 2020","title":"作用域","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n作⽤域链的作⽤是保证执⾏环境⾥有权访问的变量和函数是有序的，作⽤域链的变量只能向上访问，变量访问到 window 对象即被终⽌，作⽤域链向下访问变量是不被允许的简单的说，作⽤域就是变量与函数的可访问范围，即作⽤域控制着变量与函数的可⻅性和⽣命周期\n","slug":"javascript/advance/作用域"}]},"__N_SSG":true}