{"pageProps":{"data":{"date":"November 2, 2020","title":"Linux命令export","tags":["linux"],"description":"export用于设置或显示环境变量。","fromNow":"a year ago"},"content":{"compiledSource":"var T=Object.defineProperty,i=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var s=(e,t,n)=>t in e?T(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,a=(e,t)=>{for(var n in t||(t={}))r.call(t,n)&&s(e,n,t[n]);if(o)for(var n of o(t))l.call(t,n)&&s(e,n,t[n]);return e},u=(e,t)=>i(e,c(t));var m=(e,t)=>{var n={};for(var p in e)r.call(e,p)&&t.indexOf(p)<0&&(n[p]=e[p]);if(e!=null&&o)for(var p of o(e))t.indexOf(p)<0&&l.call(e,p)&&(n[p]=e[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:e}=p,t=m(p,[\"components\"]);return mdx(MDXLayout,u(a(a({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"export\"),\"\\u7528\\u4E8E\\u8BBE\\u7F6E\\u6216\\u663E\\u793A\\u73AF\\u5883\\u53D8\\u91CF\\u3002\"),mdx(\"h2\",null,\"\\u4F7F\\u7528\\u65B9\\u6CD5\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-shell\"}),`export TEST=\"test\"\n# TEST\\u4EE3\\u8868\\u53D8\\u91CF\\u540D\\uFF0Ctest\\u4EE3\\u8868\\u53D8\\u91CF\\u503C\n\nexport -n TEST\n#-n\\u53C2\\u6570\\u4EE3\\u8868\\u4E00\\u51FATEST\\u53D8\\u91CF\n`)),mdx(\"h2\",null,\"\\u53C2\\u6570\\uFF1A\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"-f \\u3000\\u4EE3\\u8868\",\"[\\u53D8\\u91CF\\u540D\\u79F0]\",\"\\u4E2D\\u4E3A\\u51FD\\u6570\\u540D\\u79F0\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-n \\u3000\\u5220\\u9664\\u6307\\u5B9A\\u7684\\u53D8\\u91CF\\u3002\\u53D8\\u91CF\\u5B9E\\u9645\\u4E0A\\u5E76\\u672A\\u5220\\u9664\\uFF0C\\u53EA\\u662F\\u4E0D\\u4F1A\\u8F93\\u51FA\\u5230\\u540E\\u7EED\\u6307\\u4EE4\\u7684\\u6267\\u884C\\u73AF\\u5883\\u4E2D\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-p \\u3000\\u5217\\u51FA\\u6240\\u6709\\u7684 shell \\u8D4B\\u4E88\\u7A0B\\u5E8F\\u7684\\u73AF\\u5883\\u53D8\\u91CF\\u3002\")))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"November 2, 2020","title":"Linux命令export","tags":["linux"],"description":"export用于设置或显示环境变量。","fromNow":"a year ago"}},"randomPost":[{"data":{"date":"November 20, 2021","title":"如何在 vue 中使用 Debounce、Throttle","tags":["vue","javascript"],"description":"如input、resize、scroll、intersection observer 等事件可能发生得非常频繁，例如每秒发生几次，因此调用一个动作，比如对每个事件发出读取请求，并不是一个明智的方法。","fromNow":"25 days ago"},"content":"\n## 为什么要使用 debounce 和 throttle\n\n防抖和节流就是针对响应跟不上触发频率这类问题的两种解决方案。在给 DOM 绑定事件时，有些事件我们是无法控制触发频率的。 如鼠标移动事件 onmousemove, 滚动滚动条事件 onscroll，窗口大小改变事件 onresize，瞬间的操作都会导致这些事件会被高频触发。 如果事件的回调函数较为复杂，就会导致响应跟不上触发，出现页面卡顿，假死现象。 在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发。\n\n## 在 watcher 中使用 debounce\n\n1. 在`created`生命周期将`this.debounce`绑定到`this`上，这样`this.debounce`就可以在`created`生命周期中使用。\n2. 在`watch`函数中，使用`this.debounce`调用`debounce`函数，并传入`this.debounce`的回调函数。\n3. 在事件销毁前，使用`this.debounce`调用`clear`函数，清除定时器。\n\n```html\n<template>\n  <input v-model=\"value\" type=\"text\" />\n  <p>{{ value }}</p>\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    data() {\n      return {\n        value: '',\n      };\n    },\n    watch: {\n      value(...args) {\n        this.debouncedWatch(...args);\n      },\n    },\n    created() {\n      this.debouncedWatch = debounce((newValue, oldValue) => {\n        console.log('New value:', newValue);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedWatch.cancel();\n    },\n  };\n</script>\n```\n\n## 使用 debounce 处理事件\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    created() {\n      this.debouncedHandler = debounce((event) => {\n        console.log('New value:', event.target.value);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedHandler.cancel();\n    },\n  };\n</script>\n```\n\n为什么不适用`debounce`或`throttle`直接绑定函数呢？比如：\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    methods: {\n      // Don't do this!\n      debouncedHandler: debounce(function (event) {\n        console.log('New value:', event.target.value);\n      }, 500),\n    },\n  };\n</script>\n```\n\n**使用`export default { ... }`从组件导出的 options 对象，包括方法，将被组件的所有实例重用。如果网页中有 2 个或更多的组件实例，那么所有的组件都将使用相同的`debounce`或`throttle`的函数方法。**\n\n## 总结\n\n在 `vue` 中使用 `debounce` 和 `throttle` 函数，应该在 `created` 和 `beforeUnmount` 生命周期中使用，而不是在 `watch` 中使用。\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  export default {\n    created() {\n      this.debouncedCallback = debounce((...args) => {\n        // The debounced\n        callback;\n      }, 500);\n    },\n    watch: {\n      value(...args) {\n        this.debouncedCallback(...args);\n      },\n    },\n  };\n</script>\n```\n","slug":"vue/debounce-throttle"},{"data":{"date":"May 9, 2018","title":"String","tags":["javascript"],"fromNow":"4 years ago"},"content":"\n## String\n\n### 方法\n\n- String.fromCharCode() //通过一串 Unicode 创建字符串。\n- String.fromCodePoint() //通过一串 码点 创建字符串。\n- String.raw() //通过模板字符串创建字符串。\n\n### 实例方法\n\n- charAt(i)\n- charCodeAt(i)\n- codePointAt(i)\n- concat(str)\n- endsWith(str)\n- includes(str)\n- indexOf(str)\n- lastIndexOf(str)\n- localeCompare()\n- match(regex)\n- normalize()\n- padEnd()\n- padStart()\n- repeat()\n- replace(str1, str2)\n- search(str)\n- slice(begin, end)\n- split(separator)\n- startsWith(str)\n- substring()\n- toLocaleLowerCase()\n- toLocaleUpperCase()\n- toLowerCase()\n- toString()\n- toUpperCase()\n- trim()\n- trimEnd()\n- trimStart()\n- valueOf()\n\n### charAt\n\n> 返回指定位置的字符,且返回的字符长度为 1，**_js 没有一种有别于字符串类型的字符数据类型_**\n\n```javascript\nstring.charAt(index);\n\n'porhub'.charAt(0); //'p'\n'porhub'.charAt(1); //'o'\n'porhub'.charAt(2); //'r'\n```\n\n### charCodeAt\n\n> 返回在指定的位置的字符的 Unicode 编码\n\n**字符串中第一个字符的下标是 0。如果 index 是负数，或大于等于字符串的长度，则 charCodeAt() 返回 NaN。**\n\n```javascript\nstring.charCodeAt(index);\n\n'porhub'.charCodeAt(0); //112\n'porhub'.charCodeAt(1); //111\n'porhub'.charCodeAt(2); //114\n```\n\n### codePointAt\n\n> ES2015 引入的，用于处理 2 UTF-16 字符的，比如中文，在 ES2015 之前 charCodeAt 只能处理单个字符，处理双字符必须一个个处理然后拼接。\n\n```javascript\nstring.codePointAt(index);\n\n//ES2015之前\n'𠮷'.charCodeAt(0).toString(16); //d842\n'𠮷'.charCodeAt(1).toString(16); //dfb7\n('\\ud842\\udfb7'); //𠮷\n\n//ES2015\n'𠮷'.codePointAt(0); //20bb7\n('\\u{20bb7}'); //𠮷\n```\n\n### concat\n\n> 类似 Array 的 concat\n\n```javascript\nstringObject.concat(stringX,stringX,...,stringX)\n\n\"browser\".concat(\"porhub\");\n```\n\n通常使用 + 拼接来得更方便，或者使用 ES2015 的``字符扩展。\n\n### endWith\n\n> 用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false。\n\n```javascript\nstr.endsWith(searchString, position);\n\n'JavaScript'.endsWith('Script'); //true\n'JavaScript'.endsWith('script'); //false\n'JavaScript'.endsWith('Script', 5); //false\n'JavaScript'.endsWith('as', 5); //true\n```\n\n### includes\n\n> 用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false\n\n```javascript\nstr.includes(searchString, position);\n\n'JavaScript'.includes('Script'); //true\n'JavaScript'.includes('script'); //false\n'JavaScript'.includes('nice'); //true\n'JavaScript'.includes('nice', 3); //false\n```\n\n### indexOf\n\n> 用于返回字符串中出现某个字符的初始位置，如果没有找到，返回-1.\n\n```javascript\nstr.indexOf(searchString, startPosition);\n\n'JavaScript'.indexOf('a'); //1\n'JavaScript'.indexOf('a', 2); //3\n```\n\n### lastIndexOf\n\n> 用于返回某个字符最后出现的位置，如果没有，返回-1\n\n```javascript\nstr.lastIndexOf(searchString, startPosition);\n\n'JavaScript'.lastIndexOf('a'); //3\n'JavaScript'.lastIndexOf('a', 1); //1\n```\n\n### padEnd\n\n> 用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。\n\n```javascript\nstr.padEnd(targetLength, string);\n\n'abc'.padEnd(10); // \"abc       \"\n'abc'.padEnd(10, 'foo'); // \"abcfoofoof\"\n'abc'.padEnd(6, '123456'); // \"abc123\"\n'abc'.padEnd(1); // \"abc\"\n```\n\n### padStart\n\n> 用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的\n\n```javascript\nstr.padStart(targetLength, string);\n\n'abc'.padStart(10); // \"       abc\"\n'abc'.padStart(10, 'foo'); // \"foofoofabc\"\n'abc'.padStart(6, '123465'); // \"123abc\"\n'abc'.padStart(8, '0'); // \"00000abc\"\n'abc'.padStart(1); // \"abc\"\n```\n\n### repeat\n\n> 构造并返回一个包含被连接在一起的指定数量的新字符串。\n\n```javascript\nstr.repeat(count);\n\n'abc'.repeat(-1); // RangeError: repeat count must be positive and less than inifinity\n'abc'.repeat(0); // \"\"\n'abc'.repeat(1); // \"abc\"\n'abc'.repeat(2); // \"abcabc\"\n'abc'.repeat(3.5); // \"abcabcabc\" 参数count将会被自动转换成整数.\n'abc'.repeat(1 / 0); // RangeError: repeat count must be positive and less than inifinity\n```\n\n### slice\n\n> 截取字符串的一部分，并返回一个新的字符串\n\n```javascript\nstr.slice(startPosition, endPosition);\n\n'abc'.slice(0, 1); //a\n'abc'.slice(0, -1); //ab\n```\n\n### split\n\n> 将字符串切割成数组\n\n```javascript\nstr.split(separator, limit);\n\n'abc'.split(); //\"[a,b,c]\";\n'a,b,c'.split(',', 1); //[a]\n```\n\n### startWith\n\n> 判断字符串是否以给定的字符串开始，返回 true/false\n\n```javascript\nstr.startsWith(searchString, poistion);\n\n'abc'.startsWith('a'); //true\n'abc'.startsWith('a', 1); //false\n```\n\n### substring\n\n> 根据开始索引到结束索引截取字符串\n\n```javascript\nstr.substring(startPosition, endPosition);\n\n'abc'.substring(0, 1); //a\n'abc'.substring(-1); //abc\n```\n\n1. 如果 startPosition 等于 indexEnd，substring 返回一个空字符串。\n2. 如果省略 indexEnd，substring 提取字符一直到字符串末尾。\n3. 如果任一参数小于 0 或为 NaN，则被当作 0。\n4. 如果任一参数大于 stringName.length，则被当作 stringName.length。\n5. 如果 startPosition 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。见下面的例子。\n\n### toLocaleLowerCase/toLocaleUpperCase/toUpperCase/toLowerCase\n\n> 将字符串转换成小写/大写\n\n```javascript\nstr.toLocaleLowerCase() /\n  str.toLocaleUpperCase() /\n  str.toUpperCase() /\n  str.toLowerCase();\n\n'ABC'.toLocaleLowerCase(); //abc\n'abc'.toLocaleUpperCase(); //ABC\n```\n\n### toString\n\n> 将\\*转换成字符串\n\n```javascript\nvar x = new String('Hello world');\n\nalert(x.toString()); // 输出 \"Hello world\"\n```\n\n### trim/trimStart/trimEnd\n\n> 移除空白字符/起始位置空白字符/结尾位置空白字符\n\n```javascript\nstr.trim() / str.trimStart() / str.trimEnd();\n\n'Testing'.trim(); //'Testing'\n' Testing'.trim(); //'Testing'\n' Testing '.trim(); //'Testing'\n'Testing '.trim(); //'Testing'\n```\n\n### valueOf\n\n> 返回 str 的原始值，等同于 String.prototype.toString\n\n```javascript\nstr.valueOf();\n\nx = new String('Hello world');\nalert(x.valueOf()); // Displays \"Hello world\"\n```\n\n### 扩展学习\n\n```javascript\n1 +\n  '5'[(1, 3, 5)] + //\"15\"\n  1; //\"1,3,51\"\n10 + true; // 11\n15 + {}; // \"15[object Object]\"\n8 + null; // 8\n'queen' + null; // \"queennull\"\n12 + undefined; // NaN\n```\n\n[See examples in jsbin](http://jsbin.com/fiwemir/2/edit?js,console)\n","slug":"javascript/base/String"},{"data":{"date":"December 6, 2021","title":"Collections of python","tags":["python"],"description":"集合包括列表、字典、集合。","fromNow":"9 days ago"},"content":"\n## 总览\n\n程序员经常会用到的集合，列表、字典、集合。比如：\n\n- 股票池\n- 股票价格\n\n有多种选择来处理这一系列数据：\n\n- 列表。表示一组有序的数据\n- 字典。表示一组键值对的数据\n- 集合。表示一组无序的数据\n\n## 列表\n\n当数据的顺序很重要时，使用列表。记住列表可以容纳任何类型的对象。例如，元组列表。\n\n```python\nportfolio = [\n    ('GOOG', 100, 490.1),\n    ('IBM', 50, 91.3),\n    ('CAT', 150, 83.44)\n]\n\nportfolio[0]            # ('GOOG', 100, 490.1)\nportfolio[2]            # ('CAT', 150, 83.44)\n\n# 列表构造\nrecords=[] #初始化一个空列表\n\nrecords.append(('foo', 1, 2)) #添加元素\nrecords.append(('bar', 'hello')) #添加元素\n\n#从文件读取数据并写入列表\nwith open('data.csv', 'w') as f:\n    next(f) #跳过第一行\n    for line in f:\n        row = line.strip().split(',')\n        records.append((row[0], row[1], row[2]))\n```\n\n## 字典\n\n如果你想要快速随机查找(按键名) ，字典是很有用的。例如，股票价格字典:\n\n```python\nprices = {\n   'GOOG': 513.25,\n   'CAT': 87.22,\n   'IBM': 93.37,\n   'MSFT': 44.12\n}\n\nprices['IBM']           # 93.37\nprices['MSFT']          # 44.12\n\n# 字典构造\nprices = {} #初始化一个空字典\n\nprices['GOOG'] = 513.25 #添加元素\nprices['CAT'] = 87.22 #添加元素\n\n#从文件读取数据并写入字典\nwith open('data.csv', 'w') as f:\n    next(f) #跳过第一行\n    for line in f:\n        row = line.strip().split(',')\n        prices[row[0]] = row[1]\n\n# 字典查找\nif 'GOOG' in prices:\n    print('GOOG is in prices')\n\nname = prices.get('GOOG', 'N/A') #N/A表示默认值\n\nprices.get('GOOG', 0) # 513.25\nprices.get('SCOX', 0) # 0\n\n# 复合键 - 任何类型的数据都可以作为字典的键。例如，元组:\n\nholidays = {\n    (1, 1): 'New Year\\'s Day',\n    (7, 4): 'Independence Day',\n    (12, 25): 'Christmas'\n}\nholidays[(1, 1)] # 'New Year\\'s Day'\n```\n\n## 集合\n\n集合是一种特殊的字典，表示一组无序的数据，数据不重复。\n\n```python\ntech_stocks = {'GOOG', 'IBM', 'CAT'}\ntech_stocks = set(['GOOG', 'IBM', 'CAT'])\n\nnames = ['IBM', 'AAPL', 'GOOG', 'IBM', 'GOOG', 'YHOO']\n\nunique = set(names)\n# unique = set(['IBM', 'AAPL','GOOG','YHOO'])\n\nunique.add('CAT')        # Add an item\nunique.remove('YHOO')    # Remove an item\n\ns1 = { 'a', 'b', 'c'}\ns2 = { 'c', 'd' }\ns1 | s2                 # Set union { 'a', 'b', 'c', 'd' }\ns1 & s2                 # Set intersection { 'c' }\ns1 - s2                 # Set difference { 'a', 'b' }\n\n```\n","slug":"python/2.2-containers"},{"data":{"date":"November 24, 2021","title":"Strings","tags":["python"],"description":"","fromNow":"21 days ago"},"content":"\n## 字符串文本\n\n> 字符串文本通常是由单引号或者双引号括起来的。通常单行单引号，多行三引号。\n\n```python\n# Single quote\na = 'Yeah but no but yeah but...'\n\n# Double quote\nb = \"computer says no\"\n\n# Triple quotes\nc = '''\nLook into my eyes, look into my eyes, the eyes, the eyes, the eyes,\nnot around the eyes,\ndon't look around the eyes,\nlook into my eyes, you're under.\n'''\n```\n\n## 字符串转义\n\n```python\n'\\n'      # 换行\n'\\r'      # 回车\n'\\t'      # 水平制表符\n'\\''      # 单引号\n'\\\"'      # 双引号\n'\\\\'      # 反斜杠\n```\n\n## 字符串运算\n\n```python\n+  # 字符串连接\n*  # 重复\n[] # 取子串\n[:] # 截取字符串的一部分\nin # 判断字符串是否包含某个字符串\nnot in # 判断字符串是否不包含某个字符串\nr/re # 匹配字符串\n% # 格式化字符串\n\n\na = \"Hello\"\nb = \"Python\"\n\nprint \"a + b 输出结果：\", a + b\nprint \"a * 2 输出结果：\", a * 2\nprint \"a[1] 输出结果：\", a[1]\nprint \"a[1:4] 输出结果：\", a[1:4]\n\nif( \"H\" in a) :\n    print \"H 在变量 a 中\"\nelse :\n    print \"H 不在变量 a 中\"\n\nif( \"M\" not in a) :\n    print \"M 不在变量 a 中\"\nelse :\n    print \"M 在变量 a 中\"\n\nprint r'\\n'\nprint R'\\n'\n```\n\n## 字符串方法\n\n```python\ns = ' Hello'\nt = s.strip() #'Hello'去除空格\nl = s.lower() #' hello' 全部转换为小写\nu = s.upper() #' HELLO' 全部转换为大写\nc = s.capitalize() #'Hello' 字符串首字母大写\nt = s.replace('H', 'J') #'Jello' 将所有的H替换为J\n\ns.endswith(suffix)     # 判断字符串是否以指定后缀结尾\ns.find(t)              # 查找字符串中指定字符或字符串的索引位置\ns.index(t)             # 查找字符串中指定字符或字符串的索引位置\ns.isalpha()            # 判断字符串是否只有字母\ns.isdigit()            # 判断字符串是否只有数字\ns.islower()            # 判断字符串是否只有小写\ns.isupper()            # 判断字符串是否只有大写\ns.join(slist)          # 将字符串s与字符串列表slist中的字符串连接\ns.lower()              # 转换字符串中所有大写字符为小写\ns.replace(old,new)     # 替换字符串中的指定字符串\ns.rfind(t)             # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.rindex(t)            # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.split([delim])       # 将字符串分割成一个列表\ns.startswith(prefix)   # 判断字符串是否以指定前缀开头\ns.strip()              # 去掉字符串左右两边的空格\ns.upper()              # 转换字符串中的小写字母为大写\n```\n\n## 字符串类型转换\n\n> 使用`str()`将任何值转换成字符串\n\n```python\nx=42\nstr(x) #'42'\n```\n\n## 其他字符类型\n\n```python\n# 字节类型\ndata = b'Hello World\\r\\n'\nlen(data)                         # 13\ndata[0:5]                         # b'Hello'\ndata.replace(b'Hello', b'Cruel')  # b'Cruel World\\r\\n'\n\n# Raw字节类型\n>>> rs = r'c:\\newdata\\test' # Raw (uninterpreted backslash)\n>>> rs\n'c:\\\\newdata\\\\test'\n\n# f-string\n>>> name = 'IBM'\n>>> shares = 100\n>>> price = 91.1\n>>> a = f'{name:>10s} {shares:10d} {price:10.2f}'\n>>> a\n'       IBM        100      91.10'\n>>> b = f'Cost = ${shares*price:0.2f}'\n>>> b\n'Cost = $9110.00'\n>>>\n```\n","slug":"python/1.3-strings"},{"data":{"date":"December 1, 2021","title":"File Management","tags":["python"],"description":"大多数程序需要操作文件，比如读写文件，创建文件夹，删除文件等等。","fromNow":"13 days ago"},"content":"\n## 文件读写\n\n打开文件\n\n```python\nf=open('test.txt','rt')\ng=open('test.txt','wt')\n```\n\n读取所有内容\n\n```python\ndata=f.read()\ndata=f.read([maxbytes])\n```\n\n写入内容\n\n```python\ng.write('hello world')\n```\n\n关闭文件\n\n```python\nf.close()\ng.close()\n```\n\n文件应当在使用完毕后关闭，否则会导致内存泄漏。使用 with 语句可以自动关闭文件。\n\n离开 with 语句后，文件会自动关闭。\n\n```python\nwith open(filename, 'rt') as file:\n    # Use the file `file`\n    ...\n    # No need to close explicitly\n...statements\n```\n\n使用`with`语句读取挣个文件\n\n```python\nwith open('foo.txt', 'rt') as file:\n    data = file.read()\n```\n\n使用`with`语句按行读取文件\n\n```python\nwith open('foo.txt', 'rt') as file:\n    for line in file:\n```\n\n使用`with`语句写入文件\n\n```python\nwith open('outfile', 'wt') as out:\n    out.write('Hello World\\n')\n```\n\n重定向`print`函数\n\n```python\nwith open('foo.txt', 'wt') as file:\n    print('hello world', file=file)\n```\n","slug":"python/1.5-file"},{"data":{"date":"April 12, 2018","title":"Flexbox指南","tags":["css"],"description":"Flexible Box 模型，通常被称为 flexbox，是一种一维的布局模型。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。","fromNow":"4 years ago"},"content":"\n![Flexbox](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181016105026.png)\n\nFlexible Box 模型，通常被称为 flexbox，是一种一维的布局模型。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。\n\n- 基本介绍\n- 浏览器兼容性\n- 启用 Flexbox\n- 容器属性\n  - 行||列 对齐 ==row and columns==\n  - 水平||垂直 对齐 ==Vertical and horizontal==\n  - 更改水平对齐 ==change horizontal alignment==\n  - 更改垂直对齐 ==change vertical alignment==\n    - 关于基准线 ==about baseline==\n  - 换行 ==wrap==\n- flex 元素上的属性\n  - order\n  - align-self\n  - flex-grow\n  - flex-shrink\n  - flex-basis\n  - flex\n\n### 介绍\n\nFlexbox，也称为灵活盒模块，是两个现代布局系统之一，还有 CSS Grid。与 CSS Grid（二维）相比，flexbox 是一维布局模型。它将基于行或列控制布局，但不能同时控制布局。flexbox 的主要目标是允许项目填充其容器提供的整个空间，具体取决于您设置的一些规则。Flexbox 不兼容 IE10 以下，IE10 以下可以使用如下方式：\n\n- Table layouts\n- Floats\n- clearfix hacks\n- display: table hacks\n\n### 兼容性\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181020205051.png)\n\nIE10 以下不兼容，一些浏览器需要使用-webkit 或者 display:-webkit-box 兼容处理。\n\n### 使用 flexbox\n\n```css\ndisplay: flexbox;\n```\n\n或者\n\n```css\ndisplay: inline-flexbox;\n```\n\n### 容器属性\n\n- flex-direction\n- justify-content\n- align-items\n- flex-wrap\n- flex-flow\n\n### 行对齐或者列对齐\n\nflex-direction 决定容器以行对齐还是列对齐。\n\n- flex-direction:row，行对齐，从左到右\n- flex-direction:row-reverse，行对齐，从右到左\n- flex-direction:column，列对齐，从上到下\n- flex-direction:column-reverse，列对齐，从下到上\n\n如下图所示：\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181020205713.png)\n\n### 水平对齐或者垂直对齐\n\nflex-direction 默认是 row，从左向右，当其属性值为 column 时，是从上到下，可以使用 justify-content 和 align-items 改变水平和垂直对齐。\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181022100130.png)\n\n### 改变水平对齐方式\n\njustify-content 有 5 个属性值：\n\n1. flex-start 左对齐\n2. flex-end 右对齐\n3. center 居中对齐\n4. space-between 首尾对齐容器左右侧，中间间距相等\n5. space-around 每个元素的间距相等\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181022100921.png)\n\n### 改变垂直对齐方式\n\nalign-items 有 5 个属性值：\n\n1. flex-start 顶部对齐\n2. flex-end 底部对齐\n3. center 居中对齐\n4. baseline 基线对齐\n5. stretch 拉伸以适应容器\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20181022141409.png)\n\n关于 align-items:baseline，可以看看 codepen：[https://codepen.io/flaviocopes/pen/oExoJR](https://codepen.io/flaviocopes/pen/oExoJR)\n\n### 换行\n\n默认情况下，flexbox 容器中的项目保留在一行中，缩小它们以适合容器。\n\n可以使用 flex-wrap:wrap 或者 flex-wrap:wrap-reverse 对容器中的元素进行换行处理。\n\n一种简写方式：flex-flow:row wrap;即 flex-direction:row && flex-wrap:wrap\n\n### 适用于 flexbox 容器内每个元素的属性\n\n1. order\n2. align-self\n3. flex-grow\n4. flex-shrink\n5. flex-basis\n6. flex\n\n#### order-改变元素的顺序，如下图所示，可以指定某个元素的 order 值，以改变其位置，默认值为 0\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20181022142507.png)\n\n#### align-self-元素使用 align-self 覆盖容器的 align-items 对当前元素的对齐方式\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20181022142842.png)\n\n#### flex-grow || flex-shrink 如有必要，可以增加或缩小某个元素\n\nflex-grow：默认值为 0，当某个元素 flex-grow 为 1，另一个为 2，则为 flex-grow：2 的元素占用 flex-grow:1 的空间的 2 倍。\n\nflex-shrink：默认值为 1，如果没有显示定义该属性，将会自动按照默认值 1 在所有因子相加之后计算比率来进行空间收缩。\n\n比如：有这么一个容器，div>.box1*3+.box2*2 父容器定义宽度为 500px，子元素定义宽度为 120px，box1 的 flex-shrink 为 1，.box2 的 flex-shrink 为 2，那么子项相加之后即为 600 px，超出父容器 100px。那么超出的 100px 需要被 A、B、C、D、E 消化 通过收缩因子，所以加权综合可得 100*1+100*1+100*1+100*2+100\\*2=700px。\n\n```\n于是我们可以计算 A、B、C、D、E 将被移除的溢出量是多少：\nA 被移除溢出量：(100*1/700)*100，即约等于14px\nB 被移除溢出量：(100*1/700)*100，即约等于14px\nC 被移除溢出量：(100*1/700)*100，即约等于14px\nD 被移除溢出量：(100*2/700)*100，即约等于28px\nE 被移除溢出量：(100*2/700)*100，即约等于28px\n\n最后A、B、C、D、E的实际宽度分别为：120-14=106px, 120-14=106px, 120-14=106px, 120-28=92px,120-28=92px\n```\n\n#### flex-basis-用于设置或检索弹性盒伸缩基准值，默认值为 auto，其与 width 的区别可以参考这篇文章：https://www.jianshu.com/p/17b1b445ecd4\n\n#### flex：有三个属性值\n\n1. flex-grow\n2. flex-shrink\n3. flex-basis\n\n```css\nflex: 0 1 auto 分别对应flex-grow、flex-shrink、flex-basis;\n```\n\n## 结尾\n\n友情献上小游戏，通过游戏学习 flexbox\n\nhttp://flexboxfroggy.com/#zh-cn\n","slug":"css/Flexbox指南"}]},"__N_SSG":true}