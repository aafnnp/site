{"pageProps":{"data":{"date":"October 11, 2020","title":"Linux命令df","tags":["linux"],"description":"用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计","fromNow":"a year ago"},"content":{"compiledSource":"var u=Object.defineProperty,c=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(e,l,a)=>l in e?u(e,l,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[l]=a,i=(e,l)=>{for(var a in l||(l={}))p.call(l,a)&&s(e,a,l[a]);if(t)for(var a of t(l))r.call(l,a)&&s(e,a,l[a]);return e},m=(e,l)=>c(e,N(l));var o=(e,l)=>{var a={};for(var n in e)p.call(e,n)&&l.indexOf(n)<0&&(a[n]=e[n]);if(e!=null&&t)for(var n of t(e))l.indexOf(n)<0&&r.call(e,n)&&(a[n]=e[n]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var n=a,{components:e}=n,l=o(n,[\"components\"]);return mdx(MDXLayout,m(i(i({},layoutProps),l),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"df\"),\"\\u547D\\u4EE4\\u7528\\u4E8E\\u663E\\u793A\\u76EE\\u524D\\u5728 Linux \\u7CFB\\u7EDF\\u4E0A\\u7684\\u6587\\u4EF6\\u7CFB\\u7EDF\\u78C1\\u76D8\\u4F7F\\u7528\\u60C5\\u51B5\\u7EDF\\u8BA1\\u3002\"),mdx(\"h2\",null,\"\\u4F7F\\u7528\\u65B9\\u6CD5\"),mdx(\"p\",null,mdx(\"img\",i({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/UBFMHD.png\",alt:\"UBFMHD\"}))),mdx(\"p\",null,\"\\u540C\\u6837\\u53EF\\u4EE5\\u4F7F\\u7528\",mdx(\"strong\",{parentName:\"p\"},\"df folder\"),\"\\u663E\\u793A\\u6587\\u4EF6\\u5939\\u7684\\u4F7F\\u7528\\u60C5\\u51B5\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-shell\"}),`df folder\n`)),mdx(\"p\",null,mdx(\"img\",i({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/3BJe5E.png\",alt:\"3BJe5E\"}))),mdx(\"h2\",null,\"\\u53C2\\u6570\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"-a, --all \\u5305\\u542B\\u6240\\u6709\\u7684\\u5177\\u6709 0 Blocks \\u7684\\u6587\\u4EF6\\u7CFB\\u7EDF\"),mdx(\"li\",{parentName:\"ul\"},\"--block-size={SIZE} \\u4F7F\\u7528 {SIZE} \\u5927\\u5C0F\\u7684 Blocks\"),mdx(\"li\",{parentName:\"ul\"},\"-h, --human-readable \\u4F7F\\u7528\\u4EBA\\u7C7B\\u53EF\\u8BFB\\u7684\\u683C\\u5F0F(\\u9884\\u8BBE\\u503C\\u662F\\u4E0D\\u52A0\\u8FD9\\u4E2A\\u9009\\u9879\\u7684...)\"),mdx(\"li\",{parentName:\"ul\"},\"-H, --si \\u5F88\\u50CF -h, \\u4F46\\u662F\\u7528 1000 \\u4E3A\\u5355\\u4F4D\\u800C\\u4E0D\\u662F\\u7528 1024\"),mdx(\"li\",{parentName:\"ul\"},\"-i, --inodes \\u5217\\u51FA inode \\u8D44\\u8BAF\\uFF0C\\u4E0D\\u5217\\u51FA\\u5DF2\\u4F7F\\u7528 block\"),mdx(\"li\",{parentName:\"ul\"},\"-k, --kilobytes \\u5C31\\u50CF\\u662F --block-size=1024\"),mdx(\"li\",{parentName:\"ul\"},\"-l, --local \\u9650\\u5236\\u5217\\u51FA\\u7684\\u6587\\u4EF6\\u7ED3\\u6784\"),mdx(\"li\",{parentName:\"ul\"},\"-m, --megabytes \\u5C31\\u50CF --block-size=1048576\"),mdx(\"li\",{parentName:\"ul\"},\"--no-sync \\u53D6\\u5F97\\u8D44\\u8BAF\\u524D\\u4E0D sync (\\u9884\\u8BBE\\u503C)\"),mdx(\"li\",{parentName:\"ul\"},\"-P, --portability \\u4F7F\\u7528 POSIX \\u8F93\\u51FA\\u683C\\u5F0F\"),mdx(\"li\",{parentName:\"ul\"},\"--sync \\u5728\\u53D6\\u5F97\\u8D44\\u8BAF\\u524D sync\"),mdx(\"li\",{parentName:\"ul\"},\"-t, --type=TYPE \\u9650\\u5236\\u5217\\u51FA\\u6587\\u4EF6\\u7CFB\\u7EDF\\u7684 TYPE\"),mdx(\"li\",{parentName:\"ul\"},\"-T, --print-type \\u663E\\u793A\\u6587\\u4EF6\\u7CFB\\u7EDF\\u7684\\u5F62\\u5F0F\"),mdx(\"li\",{parentName:\"ul\"},\"-x, --exclude-type=TYPE \\u9650\\u5236\\u5217\\u51FA\\u6587\\u4EF6\\u7CFB\\u7EDF\\u4E0D\\u8981\\u663E\\u793A TYPE\"),mdx(\"li\",{parentName:\"ul\"},\"-v (\\u5FFD\\u7565)\"),mdx(\"li\",{parentName:\"ul\"},\"--help \\u663E\\u793A\\u8FD9\\u4E2A\\u5E2E\\u624B\\u5E76\\u4E14\\u79BB\\u5F00\"),mdx(\"li\",{parentName:\"ul\"},\"--version \\u8F93\\u51FA\\u7248\\u672C\\u8D44\\u8BAF\\u5E76\\u4E14\\u79BB\\u5F00\")))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"October 11, 2020","title":"Linux命令df","tags":["linux"],"description":"用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计","fromNow":"a year ago"}},"randomPost":[{"data":{"date":"November 20, 2021","title":"如何在 vue 中使用 Debounce、Throttle","tags":["vue","javascript"],"description":"如input、resize、scroll、intersection observer 等事件可能发生得非常频繁，例如每秒发生几次，因此调用一个动作，比如对每个事件发出读取请求，并不是一个明智的方法。","fromNow":"25 days ago"},"content":"\n## 为什么要使用 debounce 和 throttle\n\n防抖和节流就是针对响应跟不上触发频率这类问题的两种解决方案。在给 DOM 绑定事件时，有些事件我们是无法控制触发频率的。 如鼠标移动事件 onmousemove, 滚动滚动条事件 onscroll，窗口大小改变事件 onresize，瞬间的操作都会导致这些事件会被高频触发。 如果事件的回调函数较为复杂，就会导致响应跟不上触发，出现页面卡顿，假死现象。 在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发。\n\n## 在 watcher 中使用 debounce\n\n1. 在`created`生命周期将`this.debounce`绑定到`this`上，这样`this.debounce`就可以在`created`生命周期中使用。\n2. 在`watch`函数中，使用`this.debounce`调用`debounce`函数，并传入`this.debounce`的回调函数。\n3. 在事件销毁前，使用`this.debounce`调用`clear`函数，清除定时器。\n\n```html\n<template>\n  <input v-model=\"value\" type=\"text\" />\n  <p>{{ value }}</p>\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    data() {\n      return {\n        value: '',\n      };\n    },\n    watch: {\n      value(...args) {\n        this.debouncedWatch(...args);\n      },\n    },\n    created() {\n      this.debouncedWatch = debounce((newValue, oldValue) => {\n        console.log('New value:', newValue);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedWatch.cancel();\n    },\n  };\n</script>\n```\n\n## 使用 debounce 处理事件\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    created() {\n      this.debouncedHandler = debounce((event) => {\n        console.log('New value:', event.target.value);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedHandler.cancel();\n    },\n  };\n</script>\n```\n\n为什么不适用`debounce`或`throttle`直接绑定函数呢？比如：\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    methods: {\n      // Don't do this!\n      debouncedHandler: debounce(function (event) {\n        console.log('New value:', event.target.value);\n      }, 500),\n    },\n  };\n</script>\n```\n\n**使用`export default { ... }`从组件导出的 options 对象，包括方法，将被组件的所有实例重用。如果网页中有 2 个或更多的组件实例，那么所有的组件都将使用相同的`debounce`或`throttle`的函数方法。**\n\n## 总结\n\n在 `vue` 中使用 `debounce` 和 `throttle` 函数，应该在 `created` 和 `beforeUnmount` 生命周期中使用，而不是在 `watch` 中使用。\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  export default {\n    created() {\n      this.debouncedCallback = debounce((...args) => {\n        // The debounced\n        callback;\n      }, 500);\n    },\n    watch: {\n      value(...args) {\n        this.debouncedCallback(...args);\n      },\n    },\n  };\n</script>\n```\n","slug":"vue/debounce-throttle"},{"data":{"date":"October 11, 2020","title":"Linux命令nohup","tags":["linux"],"description":"用于忽略 SIGHUP (挂断信号) 在系统后台不挂断地运行命令，退出终端不会影响程序的运行","fromNow":"a year ago"},"content":"\n**nohup**用于忽略 SIGHUP (\"signal hang up\" 译：挂断信号) 在系统后台不挂断地运行命令，退出终端不会影响程序的运行。\n\nnohup 命令在默认情况下（非重定向时），会输出一个名叫 nohup.out 的文件到当前目录下，如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。\n\n## 使用方法\n\n```shell\nnohup <command>\n```\n\n停止运行\n\n```shell\n#使用如下命令找到进程pid，然后使用kill杀掉进程\nps -aux | grep <command>\n```\n\n## 参数\n\n- Command：要执行的命令。\n- Arg：一些参数，可以指定输出文件。\n- &：让命令在后台执行，终端退出后命令仍旧执行。\n\nnohup 命令可以在 Linux、macOS、WSL 和任何有 UNIX 环境的地方使用\n","slug":"linux/Linux命令-nohup"},{"data":{"date":"November 20, 2021","title":"Numbers","tags":["python"],"description":"关于数学运算","fromNow":"25 days ago"},"content":"\n## Numbers 类型\n\n> python 有 4 种数字类型\n\n- Boolean\n- Integer\n- Float\n- Complex\n\n### Boolean\n\n布尔值，只有 True 和 False 两个值，可以用来表示真假。\n\n```python\na=True\nb=False\n```\n\n在数学运算种，布尔值的值只有 0 和 1，0 表示 False，1 表示 True。\n\n```python\nc=4+True #5\nd=False\nif d==0:\n    print('d is zero')\nelse:\n    print('d is not zero')\n```\n\n### Integer\n\n```python\na = 37\nb = -299392993727716627377128481812241231\nc = 0x7fa8      # Hexadecimal\nd = 0o253       # Octal\ne = 0b10001111  # Binary\n```\n\n### Float\n\n```python\n>>> a = 2.1 + 4.2\n>>> a == 6.3\nFalse\n>>> a\n6.300000000000001\n>>>\n```\n\n### 比较 Comparisons\n\npython 有如下比较运算符：\n\n```python\nx < y      Less than\nx <= y     Less than or equal\nx > y      Greater than\nx >= y     Greater than or equal\nx == y     Equal to\nx != y     Not equal to\n\n#布尔值操作\nif b >= a and b <= c:\n    print('b is between a and c')\n\nif not (b < a or b > c):\n    print('b is still between a and c')\n```\n\n### 数字转换\n\n使用类型名转换数字，如下：\n\n```python\na = int(3.14)\nb = float(3)\n```\n","slug":"python/1.2-numbers"},{"data":{"date":"May 20, 2020","title":"Cypress入门","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":"\n![XBcHdy](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/XBcHdy.jpg)\n\nCypress 包含测试网站所必须的所有组件，可以快速编写测试用例。\n\n## 下载源码\n\n```shell\ngit clone github.com/ahfarmer/emoji-search\n#安装依赖\ncd emoji-search && npm install\n#启动项目\nnpm run start\n#访问http://localhost:3000\n```\n\n![65rXws](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/65rXws.jpg)\n\n## 安装 Cypress\n\n```shell\n#安装\nnpm install cypress —save-dev\n\n#启动\nnpx cypress open\n#或者\n./node_modules/.bin/cypress open\n#或者\n$(npm bin)/cypress open\n```\n\n以上命令将会在项目根目录创建`cypress`文件夹，如下： ![09GuGd](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/09GuGd.jpg)\n\n## 创建测试用例\n\n默认情况下，所有测试都存储在`cypress/integration`文件夹中，该文件夹在第一次`Cypress`启动时自动创建。在此示例中，我们将编写一个测试，该测试将：\n\n检查输入单词`lollipop`后是否在页面上仅显示一个结果\n\n检查标题类的标签是否包含正确的文本\n\n首先在`cypress/integration`目录中创建一个`sample_spec.js`文件：\n\n该文件应包含以下代码：\n\n```javascript\ndescribe('Sample test', () => {\n  it('Search lollipop emoji', () => {\n    cy.visit('http://localhost:3000/'); // launch project website\n    cy.get('input').type('lollipop'); // enter 'lollipop' in search\n    cy.get('.component-emoji-result-row').should('have.length', 1); // check if only 1 result is returned\n    cy.contains('Lollipop').should('have.class', 'title'); // check if returned element contains 'title' class\n  });\n});\n```\n\n你将会看到这样的窗口：\n\n![ZabqgO](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/ZabqgO.jpg)\n\n单击`sample_spec.js`后，将打开一个带有搜索引擎实例的窗口，您可以在其中实时预览执行的测试。结果应如下所示（请记住，带有示例性网站的项目应该正在运行）：\n\n![3NotH3](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/3NotH3.jpg)\n","slug":"translate/cypress测试入门"},{"data":{"date":"October 28, 2020","title":"Linux命令traceroute","tags":["linux"],"description":"traceroute命令用于显示数据包到主机之间的路径","fromNow":"a year ago"},"content":"\n**traceroute**命令用于显示数据包到主机之间的路径。\n\n> raceroute 命令 用于追踪数据包在网络上的传输时的全部路径，它默认发送的数据包大小是 40 字节。\n>\n> 通过 traceroute 我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。\n>\n> traceroute 通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备 traceroute 要测 3 次。输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其 ip 地址。\n\n## 使用方法\n\n```shell\ntraceroute <host>\n```\n\n## 案例\n\n![1EOlsJ](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/1EOlsJ.png)\n\n## 参数\n\n- -d 使用 Socket 层级的排错功能。\n- -f<存活数值> 设置第一个检测数据包的存活数值 TTL 的大小。\n- -F 设置勿离断位。\n- -g<网关> 设置来源路由网关，最多可设置 8 个。\n- -i<网络界面> 使用指定的网络界面送出数据包。\n- -I 使用 ICMP 回应取代 UDP 资料信息。\n- -m<存活数值> 设置检测数据包的最大存活数值 TTL 的大小。\n- -n 直接使用 IP 地址而非主机名称。\n- -p<通信端口> 设置 UDP 传输协议的通信端口。\n- -r 忽略普通的 Routing Table，直接将数据包送到远端主机上。\n- -s<来源地址> 设置本地主机送出数据包的 IP 地址。\n- -t<服务类型> 设置检测数据包的 TOS 数值。\n- -v 详细显示指令的执行过程。\n- -w<超时秒数> 设置等待远端主机回报的时间。\n- -x 开启或关闭数据包的正确性检验。\n\n**traceroute**命令可在 Linux、macOS、WSL 和任何 UNIX 环境下运行\n","slug":"linux/Linux命令-traceroute"},{"data":{"date":"April 12, 2018","title":"Flexbox指南","tags":["css"],"description":"Flexible Box 模型，通常被称为 flexbox，是一种一维的布局模型。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。","fromNow":"4 years ago"},"content":"\n![Flexbox](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181016105026.png)\n\nFlexible Box 模型，通常被称为 flexbox，是一种一维的布局模型。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。\n\n- 基本介绍\n- 浏览器兼容性\n- 启用 Flexbox\n- 容器属性\n  - 行||列 对齐 ==row and columns==\n  - 水平||垂直 对齐 ==Vertical and horizontal==\n  - 更改水平对齐 ==change horizontal alignment==\n  - 更改垂直对齐 ==change vertical alignment==\n    - 关于基准线 ==about baseline==\n  - 换行 ==wrap==\n- flex 元素上的属性\n  - order\n  - align-self\n  - flex-grow\n  - flex-shrink\n  - flex-basis\n  - flex\n\n### 介绍\n\nFlexbox，也称为灵活盒模块，是两个现代布局系统之一，还有 CSS Grid。与 CSS Grid（二维）相比，flexbox 是一维布局模型。它将基于行或列控制布局，但不能同时控制布局。flexbox 的主要目标是允许项目填充其容器提供的整个空间，具体取决于您设置的一些规则。Flexbox 不兼容 IE10 以下，IE10 以下可以使用如下方式：\n\n- Table layouts\n- Floats\n- clearfix hacks\n- display: table hacks\n\n### 兼容性\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181020205051.png)\n\nIE10 以下不兼容，一些浏览器需要使用-webkit 或者 display:-webkit-box 兼容处理。\n\n### 使用 flexbox\n\n```css\ndisplay: flexbox;\n```\n\n或者\n\n```css\ndisplay: inline-flexbox;\n```\n\n### 容器属性\n\n- flex-direction\n- justify-content\n- align-items\n- flex-wrap\n- flex-flow\n\n### 行对齐或者列对齐\n\nflex-direction 决定容器以行对齐还是列对齐。\n\n- flex-direction:row，行对齐，从左到右\n- flex-direction:row-reverse，行对齐，从右到左\n- flex-direction:column，列对齐，从上到下\n- flex-direction:column-reverse，列对齐，从下到上\n\n如下图所示：\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181020205713.png)\n\n### 水平对齐或者垂直对齐\n\nflex-direction 默认是 row，从左向右，当其属性值为 column 时，是从上到下，可以使用 justify-content 和 align-items 改变水平和垂直对齐。\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181022100130.png)\n\n### 改变水平对齐方式\n\njustify-content 有 5 个属性值：\n\n1. flex-start 左对齐\n2. flex-end 右对齐\n3. center 居中对齐\n4. space-between 首尾对齐容器左右侧，中间间距相等\n5. space-around 每个元素的间距相等\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/20181022100921.png)\n\n### 改变垂直对齐方式\n\nalign-items 有 5 个属性值：\n\n1. flex-start 顶部对齐\n2. flex-end 底部对齐\n3. center 居中对齐\n4. baseline 基线对齐\n5. stretch 拉伸以适应容器\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20181022141409.png)\n\n关于 align-items:baseline，可以看看 codepen：[https://codepen.io/flaviocopes/pen/oExoJR](https://codepen.io/flaviocopes/pen/oExoJR)\n\n### 换行\n\n默认情况下，flexbox 容器中的项目保留在一行中，缩小它们以适合容器。\n\n可以使用 flex-wrap:wrap 或者 flex-wrap:wrap-reverse 对容器中的元素进行换行处理。\n\n一种简写方式：flex-flow:row wrap;即 flex-direction:row && flex-wrap:wrap\n\n### 适用于 flexbox 容器内每个元素的属性\n\n1. order\n2. align-self\n3. flex-grow\n4. flex-shrink\n5. flex-basis\n6. flex\n\n#### order-改变元素的顺序，如下图所示，可以指定某个元素的 order 值，以改变其位置，默认值为 0\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20181022142507.png)\n\n#### align-self-元素使用 align-self 覆盖容器的 align-items 对当前元素的对齐方式\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20181022142842.png)\n\n#### flex-grow || flex-shrink 如有必要，可以增加或缩小某个元素\n\nflex-grow：默认值为 0，当某个元素 flex-grow 为 1，另一个为 2，则为 flex-grow：2 的元素占用 flex-grow:1 的空间的 2 倍。\n\nflex-shrink：默认值为 1，如果没有显示定义该属性，将会自动按照默认值 1 在所有因子相加之后计算比率来进行空间收缩。\n\n比如：有这么一个容器，div>.box1*3+.box2*2 父容器定义宽度为 500px，子元素定义宽度为 120px，box1 的 flex-shrink 为 1，.box2 的 flex-shrink 为 2，那么子项相加之后即为 600 px，超出父容器 100px。那么超出的 100px 需要被 A、B、C、D、E 消化 通过收缩因子，所以加权综合可得 100*1+100*1+100*1+100*2+100\\*2=700px。\n\n```\n于是我们可以计算 A、B、C、D、E 将被移除的溢出量是多少：\nA 被移除溢出量：(100*1/700)*100，即约等于14px\nB 被移除溢出量：(100*1/700)*100，即约等于14px\nC 被移除溢出量：(100*1/700)*100，即约等于14px\nD 被移除溢出量：(100*2/700)*100，即约等于28px\nE 被移除溢出量：(100*2/700)*100，即约等于28px\n\n最后A、B、C、D、E的实际宽度分别为：120-14=106px, 120-14=106px, 120-14=106px, 120-28=92px,120-28=92px\n```\n\n#### flex-basis-用于设置或检索弹性盒伸缩基准值，默认值为 auto，其与 width 的区别可以参考这篇文章：https://www.jianshu.com/p/17b1b445ecd4\n\n#### flex：有三个属性值\n\n1. flex-grow\n2. flex-shrink\n3. flex-basis\n\n```css\nflex: 0 1 auto 分别对应flex-grow、flex-shrink、flex-basis;\n```\n\n## 结尾\n\n友情献上小游戏，通过游戏学习 flexbox\n\nhttp://flexboxfroggy.com/#zh-cn\n","slug":"css/Flexbox指南"}]},"__N_SSG":true}