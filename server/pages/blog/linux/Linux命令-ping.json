{"pageProps":{"data":{"date":"October 12, 2020","title":"Linux命令ping","tags":["linux"],"description":"ping命令用于检测主机","fromNow":"a year ago"},"content":{"compiledSource":"var s=Object.defineProperty,g=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var t=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var m=(e,p,a)=>p in e?s(e,p,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[p]=a,l=(e,p)=>{for(var a in p||(p={}))t.call(p,a)&&m(e,a,p[a]);if(i)for(var a of i(p))r.call(p,a)&&m(e,a,p[a]);return e},u=(e,p)=>g(e,N(p));var o=(e,p)=>{var a={};for(var n in e)t.call(e,n)&&p.indexOf(n)<0&&(a[n]=e[n]);if(e!=null&&i)for(var n of i(e))p.indexOf(n)<0&&r.call(e,n)&&(a[n]=e[n]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var n=a,{components:e}=n,p=o(n,[\"components\"]);return mdx(MDXLayout,u(l(l({},layoutProps),p),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Linux ping \\u547D\\u4EE4\\u7528\\u4E8E\\u68C0\\u6D4B\\u4E3B\\u673A\\u3002\"),mdx(\"p\",null,\"\\u6267\\u884C ping \\u6307\\u4EE4\\u4F1A\\u4F7F\\u7528 ICMP \\u4F20\\u8F93\\u534F\\u8BAE\\uFF0C\\u53D1\\u51FA\\u8981\\u6C42\\u56DE\\u5E94\\u7684\\u4FE1\\u606F\\uFF0C\\u82E5\\u8FDC\\u7AEF\\u4E3B\\u673A\\u7684\\u7F51\\u7EDC\\u529F\\u80FD\\u6CA1\\u6709\\u95EE\\u9898\\uFF0C\\u5C31\\u4F1A\\u56DE\\u5E94\\u8BE5\\u4FE1\\u606F\\uFF0C\\u56E0\\u800C\\u5F97\\u77E5\\u8BE5\\u4E3B\\u673A\\u8FD0\\u4F5C\\u6B63\\u5E38\\u3002\"),mdx(\"p\",null,\"\\u5982\\u4E0B\\u662F ping baidu.com\\uFF1A\"),mdx(\"p\",null,mdx(\"img\",l({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/XimNX7.png\",alt:\"XimNX7\"}))),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"ping\"),\"\\u53D1\\u51FA\\u8BF7\\u6C42\\u5230\\u5BF9\\u5E94\\u7684\\u4E3B\\u673A\\uFF0C\\u4E3B\\u673A\\u8FD4\\u56DE\\u7ED3\\u679C\\u3002\"),mdx(\"p\",null,\"\\u9ED8\\u8BA4\\u60C5\\u51B5\",mdx(\"strong\",{parentName:\"p\"},\"ping\"),\"\\u4F1A\\u6BCF\\u79D2\\u53D1\\u51FA\\u8BF7\\u6C42\\uFF0C\\u76F4\\u5230\\u4F7F\\u7528\",mdx(\"strong\",{parentName:\"p\"},\"ctrl+c\"),\"\\u4E2D\\u65AD\\uFF0C\\u4E5F\\u53EF\\u4EE5\\u4F7F\\u7528-c times \\u6307\\u5B9A\\u63A5\\u6536\\u5305\\u7684\\u6B21\\u6570\\uFF0C\\u5982\\uFF1A\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-shell\"}),`ping -c 2 baidu.com\n`)),mdx(\"p\",null,\"\\u5F53\\u7ED3\\u675F\",mdx(\"strong\",{parentName:\"p\"},\"ping\"),\"\\u547D\\u4EE4\\u65F6\\uFF0C\\u5C4F\\u5E55\\u4E0A\\u4F1A\\u6253\\u5370\\u51FA\\u7EDF\\u8BA1\\u7ED3\\u679C\\uFF0C\\u5176\\u4E2D\\u5305\\u62EC\\u4E22\\u5305\\u7387\\u4EE5\\u53CA\\u901F\\u7387\"),mdx(\"pre\",null,mdx(\"code\",l({parentName:\"pre\"},{className:\"language-shell\"}),`ping -i 3 -s 1024 -t 255 baidu.com\n\n# -i 3 \\u53D1\\u9001\\u5468\\u671F\\u4E3A 3\\u79D2 -s \\u8BBE\\u7F6E\\u53D1\\u9001\\u5305\\u7684\\u5927\\u5C0F -t \\u8BBE\\u7F6ETTL\\u503C\\u4E3A 255\n`)),mdx(\"h2\",null,\"\\u53C2\\u6570\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"-d \\u4F7F\\u7528 Socket \\u7684 SO_DEBUG \\u529F\\u80FD\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-c<\\u5B8C\\u6210\\u6B21\\u6570> \\u8BBE\\u7F6E\\u5B8C\\u6210\\u8981\\u6C42\\u56DE\\u5E94\\u7684\\u6B21\\u6570\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-f \\u6781\\u9650\\u68C0\\u6D4B\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-i<\\u95F4\\u9694\\u79D2\\u6570> \\u6307\\u5B9A\\u6536\\u53D1\\u4FE1\\u606F\\u7684\\u95F4\\u9694\\u65F6\\u95F4\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-I<\\u7F51\\u7EDC\\u754C\\u9762> \\u4F7F\\u7528\\u6307\\u5B9A\\u7684\\u7F51\\u7EDC\\u63A5\\u53E3\\u9001\\u51FA\\u6570\\u636E\\u5305\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-l<\\u524D\\u7F6E\\u8F7D\\u5165> \\u8BBE\\u7F6E\\u5728\\u9001\\u51FA\\u8981\\u6C42\\u4FE1\\u606F\\u4E4B\\u524D\\uFF0C\\u5148\\u884C\\u53D1\\u51FA\\u7684\\u6570\\u636E\\u5305\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-n \\u53EA\\u8F93\\u51FA\\u6570\\u503C\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-p<\\u8303\\u672C\\u6837\\u5F0F> \\u8BBE\\u7F6E\\u586B\\u6EE1\\u6570\\u636E\\u5305\\u7684\\u8303\\u672C\\u6837\\u5F0F\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-q \\u4E0D\\u663E\\u793A\\u6307\\u4EE4\\u6267\\u884C\\u8FC7\\u7A0B\\uFF0C\\u5F00\\u5934\\u548C\\u7ED3\\u5C3E\\u7684\\u76F8\\u5173\\u4FE1\\u606F\\u9664\\u5916\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-r \\u5FFD\\u7565\\u666E\\u901A\\u7684 Routing Table\\uFF0C\\u76F4\\u63A5\\u5C06\\u6570\\u636E\\u5305\\u9001\\u5230\\u8FDC\\u7AEF\\u4E3B\\u673A\\u4E0A\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-R \\u8BB0\\u5F55\\u8DEF\\u7531\\u8FC7\\u7A0B\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-s<\\u6570\\u636E\\u5305\\u5927\\u5C0F> \\u8BBE\\u7F6E\\u6570\\u636E\\u5305\\u7684\\u5927\\u5C0F\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-t<\\u5B58\\u6D3B\\u6570\\u503C> \\u8BBE\\u7F6E\\u5B58\\u6D3B\\u6570\\u503C TTL \\u7684\\u5927\\u5C0F\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-v \\u8BE6\\u7EC6\\u663E\\u793A\\u6307\\u4EE4\\u7684\\u6267\\u884C\\u8FC7\\u7A0B\\u3002\")))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"October 12, 2020","title":"Linux命令ping","tags":["linux"],"description":"ping命令用于检测主机","fromNow":"a year ago"}},"randomPost":[{"data":{"date":"May 15, 2018","title":"Array","tags":["javascript"],"fromNow":"4 years ago"},"content":"\n## 属性\n\n1. Array.length - 静态属性，值为 1\n2. Array.prototype - 数组的原型对象\n\n## 方法\n\n1. Array.from - 从类数组对象或者可迭代对象中创建一个新的数组实例\n2. Array.of - 根据一组参数来创建新的数组实例，支持任意的参数数量和类型\n3. Array.isArray - 判断是否为数组\n\n### 实例\n\n#### 属性\n\n1. Array.prototype.length - 空数组，值为 0\n2. Array.prototype.constructor - 所有的数组实例都继承了这个属性，值为 Array\n\n#### 实例方法\n\n##### 修改器方法 - 改变调用它们的对象自身的值\n\n- Array.prototype.copyWithin //将数组 copy 到另一个数组，并覆盖原值\n- Array.prototype.fill //填充数组\n- Array.prototype.pop //删除数组最后一个值，并返回该值\n- Array.prototype.push //向数组最后添加一个新的元素或多个元素，并返回数组的长度\n- Array.prototype.reverse //颠倒数组\n- Array.prototype.shift //删除数组第一个元素并返回该元素\n- Array.prototype.sort //排序\n- Array.prototype.splice //在数组任意位置添加或删除元素\n- Array.prototype.unshift //在数组开头添加一个或多个元素并返回数组长度\n\n##### 访问方法 - 不会改变调用它们的对象自身的值，只会返回新数组或期望值\n\n- Array.prototype.concat //返回当前数组和其他数组的组合\n- Array.prototype.includes //数组是否包含某个值，返回 true/false\n- Array.prototype.join //返回数组所有元素组成的字符串\n- Array.prototype.slice //截取数组的某一段\n- Array.prototype.toString //转换成字符串\n- Array.prototype.toLocalString //转换成本地字符串\n- Array.prototype.indexOf //返回数组中第一个与指定值相等的索引\n- Array.prototype.lastIndexOf //返回数组中最后一个与指定值相等的索引\n\n##### 迭代方法\n\n- Array.prototype.forEach //为数组中每个元素执行一次回调函数\n- Array.prototype.entries //返回数组元素的键值对\n- Array.prototype.every //如果每个元素都满足回调函数就返回 true，否则返回 false\n- Array.prototype.some //如果数组中元素至少有一个满足回调函数就返回 true，否则返回 false\n- Array.prototype.filter //过滤数组中满足回调函数的元素\n- Array.prototype.find //查找数组中满足回调函数的元素，如果没有则返回 undefined\n- Array.prototype.findIndex //返回数组中满足回调函数的索引，没有则返回-1\n- Array.prototype.keys //返回数组中的键\n- Array.prototype.map //返回一个由回调函数组成的新数组\n- Array.prototype.reduce //从右向左为每个元素执行一次回调函数，并将上次回调函数的返回值暂存，然后传递给下一个回调函数\n- Array.prototype.reduceRight //与 reduce 相反方向\n- Array.prototype.values //返回数组中的值\n\n## 扩展学习\n\n### 四种合并数组的方法\n\n1. 循环\n\n```javascript\nfunction push(fromArray, toArray) {\n  for (let i = 0, len = fromArray.length; i < len; i++) {\n    toArray.push(fromArray[i]);\n  }\n  return toArray;\n}\n\nvar array1 = [1, 2, 3, 4, 5];\nvar array2 = [6, 7, 8, 9, 10];\nvar array3 = [];\npush(array1, array3);\npush(array2, array3);\n```\n\n2. 解构\n\n```javascript\nvar array1 = [1, 2, 3, 4, 5];\nvar array2 = [6, 7, 8, 9, 10];\nvar array3 = [...array1, ...array2];\nvar array3 = Array.of(...array2, ...array1);\narray3; // [1,2,3,4,5,6,7,8,9,10];\n```\n\n3. concat\n\n```javascript\nvar array1 = [1, 2, 3, 4, 5];\nvar array2 = [6, 7, 8, 9, 10];\n\nvar array3 = array1.concat(array2);\n// or\nvar array3 = [].concat(array1, array2);\n```\n\n4. reduce\n\n```javascript\nvar array1 = [1,2,3,4,5];\nvar array2 = [6,7,8,9,10];\nvar array3 = array2.reduce((newArray, item) => {\n          newArray.push(item);\n          return newArray;\n ), array1);\n```\n","slug":"javascript/base/Array"},{"data":{"date":"April 2, 2021","title":"变量、基本数据类型、字符串插值","tags":["swift"],"description":"swift 提供的数据类型包括：整形 Int、浮点数 Double 和 Float、布尔类型 Bool 以及字符串类型 String、Optional、Array、Dictionary、Struct、Class 等。","fromNow":"8 months ago"},"content":"\n## 变量\n\n变量是一种使用方便的占位符，用于引用计算机内存地址。\n\nswift 每个变量指定了特定的类型，类型决定变量占用内存的大小，也决定可存储值的范围。\n\n变量名可以由字母、数字和下划线组成，以字母或下划线开始，且区分大小写。\n\n变量名也可以使用简单的 Unicode 字符\n\n变量和常量可以使用 print 函数输出，在字符串中可以使用括号与反斜线插入变量\n\n```swift\n// 变量声明\nvar variableName = <initial value>\n\n//实例\nimport Cocoa\n\nvar a = 42\nprint(a) //输出42\n\nvar b:float\nb = 3.1415926\nprint(b) //输出3.1415926\n\nvar _var = \"hello swift\"\nvar 你好 = \"世界\"\nprint(_var) // hello swift\nprint(你好) //世界\n\nvar name = \"manon\"\n\nprint(\"\\(name)\") //manon\n```\n\n标准 Swift 字符串使用双引号，但不能包含换行符，如果您想要多行字符串，使用三个双引号开始和结束，如下所示：\n\n```swift\nvar str1 = \"\"\"\nThis goes\nover multiple\nlines\n\"\"\"\nprint(str1) // \"This goes\\nover multiple\\nlines\"\n```\n\n如果不希望显示`\\`，应该如下写：\n\n```swift\nvar str2 = \"\"\"\nThis goes \\\nover multiple \\\nlines\n\"\"\"\nprint(str2) //\"This goes nover multiple nlines\"\n```\n\n## 浮点和布尔值\n\nSwift 中的另外两种基本数据类型是双精度和布尔值。\n\n```swift\nvar pi = 3.141\nvar awesome = true\n```\n\n## 字符串插值\n\n> 将变量放置在字符串中\n\n```swift\nvar score = 85\nvar str = \"Your score was \\(score)\"\n\nvar results = \"The test results are here: \\(str)\"\n```\n\n## 常量\n\n> 常量一旦赋值，不能再次赋值，否则会报错。\n\n```swift\n//声明\nlet _const = <initial value>\nlet _const:Float = 3.1415926\n\n// 命名\n和变量命名相同\n// 输出\n和变量命名相同\n```\n\n## 类型声明\n\n在创建变量或常量的时候可以声明数据类型，如果没有，swift 将推导其数据类型，如下：\n\n```swift\nlet str = \"Hello, playground\" //swift推导str为String\n\n// 主动声明类型\nlet album: String = \"Reputation\"\nlet year: Int = 1989\nlet height: Double = 1.78\nlet taylorRocks: Bool = true\n```\n\n## 扩展\n\n字符串是一系列字符的集合，比如`hello world`，它的数据类型为 String\n\n```swift\nimport Cocoa\n//创建字符串\nvar str1 = \"hello world\"\nprint(str1)\n\n//空字符串\nvar str2 = \"\"\nvar str3 = \" manon\"\nif str2.isEmpty() {\n\tprint(\"str2 是空字符串\")\n}else{\n\tprint(\"str2 不是空字符串\")\n}\n\n// 连接字符串\n\nvar str4 = str1 + str3\nprint(str4) //\"hello world manon\"\nprint('str1和str3连接：\\(str4)')\n\n// 字符串长度\nprint(str4.count)\n\n// 字符串比较\nif str1==str2{\n\tprint(\"\\(str1) 与 \\(str2)是相等的\")\n}else{\n\tprint(\"\\(str1) 与 \\(str2)是不相等的\")\n}\n```\n\n字符串函数及运算符\n\n- isEmpty `判断字符串是否为空，返回布尔值`\n- hasPrefix `检查字符串是否有特定的前缀`\n- hasSuffix `检查字符串是否有特定的后缀`\n- Int `转换字符串数字为整型`\n- count `计算字符串的长度`\n- utf8、utf16 `遍历String的utf8属性访问utf8、utf16编码`\n- unicodeScalars `遍历String的unicodeScalars属性访问Unicode标量编码`\n- +、+=、==、<、！= `字符串操作符`\n","slug":"swift/100days/day01"},{"data":{"date":"December 8, 2021","title":"如何判断是否是日期对象？","tags":["javascript"],"description":"一些常见的日期对象判断方法","fromNow":"6 days ago"},"content":"\n## typeof\n\n使用`typeof`可以判断一个变量的类型，返回值为`string`，可以使用`instanceof`来判断一个对象是否是某个类的实例。\n\n我们使用运算符 typeof 检查 getMonth 方法是否是一个函数，看看它是否返回`function`\n\n```javascript\nconst date = new Date(2021, 1, 1);\nconsole.log(typeof date.getMonth === 'function');\n```\n\n如果返回`true`，说明 getMonth 是一个函数，`date`可能是`Date`实例，如果返回`false`，说明 getMonth 是一个字符串。\n\n## instanceof\n\ninstanceof 可以用来判断一个对象是否是某个类的实例，返回值为`boolean`。\n\n```javascript\nconst date = new Date(2021, 1, 1);\nconsole.log(date instanceof Date);\n```\n\n如果返回`true`，说明 date 是一个`Date`实例，如果返回`false`，说明 date 不是一个`Date`实例。\n\n## Object.prototype.toString\n\nObject.prototype.toString 方法可以返回一个对象的字符串表示，返回值为`string`。\n\n```javascript\nconst date = new Date(2021, 1, 1);\nconsole.log(date instanceof Date);\n```\n\n## isValid Date\n\n判断一个对象是否是一个有效的日期对象，返回值为`boolean`。\n\n```javascript\nObject.prototype.toString;\n```\n","slug":"javascript/how-to-check-is-valid-date-object"},{"data":{"date":"November 20, 2021","title":"如何在 vue 中使用 Debounce、Throttle","tags":["vue","javascript"],"description":"如input、resize、scroll、intersection observer 等事件可能发生得非常频繁，例如每秒发生几次，因此调用一个动作，比如对每个事件发出读取请求，并不是一个明智的方法。","fromNow":"25 days ago"},"content":"\n## 为什么要使用 debounce 和 throttle\n\n防抖和节流就是针对响应跟不上触发频率这类问题的两种解决方案。在给 DOM 绑定事件时，有些事件我们是无法控制触发频率的。 如鼠标移动事件 onmousemove, 滚动滚动条事件 onscroll，窗口大小改变事件 onresize，瞬间的操作都会导致这些事件会被高频触发。 如果事件的回调函数较为复杂，就会导致响应跟不上触发，出现页面卡顿，假死现象。 在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发。\n\n## 在 watcher 中使用 debounce\n\n1. 在`created`生命周期将`this.debounce`绑定到`this`上，这样`this.debounce`就可以在`created`生命周期中使用。\n2. 在`watch`函数中，使用`this.debounce`调用`debounce`函数，并传入`this.debounce`的回调函数。\n3. 在事件销毁前，使用`this.debounce`调用`clear`函数，清除定时器。\n\n```html\n<template>\n  <input v-model=\"value\" type=\"text\" />\n  <p>{{ value }}</p>\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    data() {\n      return {\n        value: '',\n      };\n    },\n    watch: {\n      value(...args) {\n        this.debouncedWatch(...args);\n      },\n    },\n    created() {\n      this.debouncedWatch = debounce((newValue, oldValue) => {\n        console.log('New value:', newValue);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedWatch.cancel();\n    },\n  };\n</script>\n```\n\n## 使用 debounce 处理事件\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    created() {\n      this.debouncedHandler = debounce((event) => {\n        console.log('New value:', event.target.value);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedHandler.cancel();\n    },\n  };\n</script>\n```\n\n为什么不适用`debounce`或`throttle`直接绑定函数呢？比如：\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    methods: {\n      // Don't do this!\n      debouncedHandler: debounce(function (event) {\n        console.log('New value:', event.target.value);\n      }, 500),\n    },\n  };\n</script>\n```\n\n**使用`export default { ... }`从组件导出的 options 对象，包括方法，将被组件的所有实例重用。如果网页中有 2 个或更多的组件实例，那么所有的组件都将使用相同的`debounce`或`throttle`的函数方法。**\n\n## 总结\n\n在 `vue` 中使用 `debounce` 和 `throttle` 函数，应该在 `created` 和 `beforeUnmount` 生命周期中使用，而不是在 `watch` 中使用。\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  export default {\n    created() {\n      this.debouncedCallback = debounce((...args) => {\n        // The debounced\n        callback;\n      }, 500);\n    },\n    watch: {\n      value(...args) {\n        this.debouncedCallback(...args);\n      },\n    },\n  };\n</script>\n```\n","slug":"vue/debounce-throttle"},{"data":{"date":"January 19, 2020","title":"使用js获取位置","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":"\n![quick-tip-detecting-your-location-with-javascript](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190121163457.png)\n\n首先，我们使用 caniuse-cmd 查看下 geolocation 的兼容性,几乎所有的现代浏览器都支持 geolocation\n\nGeolocation 通过使用 GPS、WIFI、IP 地址检测自己的位置信息，开发人员可使用这些信息给用户提供更好的搜索建议，比如附近的便利店，并实现互动。\n\n本地资源（location sources） JavaScript 提供了一个简单，但功能强大的工具来定位设备的地理定位 API 的形式。它包括一个小的一组易于使用的方法，可以获得设备的位置：\n\nGPS-主要在移动设备，精确到 10 米 WIFI-几乎所有的联网设备 IP-仅限于区域，备选方案采用哪种方案取决于浏览器支持，一般情况下 WIFI 快于 GPS 快于 IP\n\n使用 geolocation api 通过使用 caniuse-cmd，我们知道大部分浏览器支持 geolocation，但我们需要做好判断，请确保可以正常使用 geolocation\n\n```javascript\nif (navigator.geolocation) {\n  // 支持geolocation\n} else {\n  // 不支持geolocation\n}\n```\n\nnavigator.geolocation 有如下几个方法：\n\n- Geolocation.getCurrentPosition() //获取当前位置\n- Geolocation.watchPosition() //监测定位\n- Geolocation.clearWatch() //清除监测\n\ngetCurrentPosition() and watchPosition() methods 的工作方式是基本相同的。这两方法目的基本相同，都是用来去获取 device 的位置信息吧， 都是以一个异步的工作形式来获取位置信息的， 他们也都依赖于一个 attempt call 的结果\n\n```javascript\nnavigator.geolocation.getCurrentPosition(\n\n    // 位置获取成功\n    function(position) {\n\n        position = {\n            coords: {\n                latitude - //纬度.\n                longitude - //经度.\n                altitude - //高度.\n                accuracy - //精确度.\n                altitudeAccuracy - //高度的准确性.\n                heading - //.\n                speed - //.\n            }\n            timestamp - //时间戳.\n        }\n\n    },\n\n    // 位置获取失败\n    function(error){\n\n    }\n);\n```\n\n如上，使用 geolocation api 很简单，只需要正确调用方法，等待返回坐标即可。\n\n用户权限由于 geolocation api 会暴露用户信息，所以当应用程序访问的时候，将以弹窗请求用户操作，如下\n\n主机安全另一个保护措施是使用 HTTPS 连接。由于一个新的网络安全策略，谷歌浏览器（桌面版和手机版）不再允许非安全的主机上运行的 geolocation api。使用 https 可以最大限度的减少数据信息的盗用或被滥用的风险。\n\n这里查看更多关于这个问题。\n\n```javascript\n一个简单的Demo;\nfindMeButton.on('click', function () {\n  navigator.geolocation.getCurrentPosition(function (position) {\n    // Get the coordinates of the current position.\n    var lat = position.coords.latitude;\n    var lng = position.coords.longitude;\n\n    // Create a new map and place a marker at the device location.\n    var map = new GMaps({\n      el: '#map',\n      lat: lat,\n      lng: lng,\n    });\n\n    map.addMarker({\n      lat: lat,\n      lng: lng,\n    });\n  });\n});\n```\n\n[在线 demo](https://jsfiddle.net/dannymarkov/ubrvm4ao/ 'https://jsfiddle.net/dannymarkov/ubrvm4ao/')\n\n翻译自[Detecting Your Location With JavaScript](http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/ 'http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/')\n","slug":"translate/使用js获取位置"},{"data":{"date":"May 7, 2018","title":"Undefined","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nUndefined 类型只有一个值-undefined，即声明变量但未赋值，这个变量的值就是 undefined。\n\n```javascript\nvar a;\nconsole.log(a == undefined); //true\nconsole.log(typeof a); //\"undefined\"\n```\n\n> 对未初始化的变量和未声明的变量执行 typeof 都会返回 undefined\n","slug":"javascript/base/Undefined"}]},"__N_SSG":true}