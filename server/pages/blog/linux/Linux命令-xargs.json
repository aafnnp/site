{"pageProps":{"data":{"date":"October 10, 2020","title":"Linux命令xargs","tags":["linux"],"description":"xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具","fromNow":"a year ago"},"content":{"compiledSource":"var o=Object.defineProperty,g=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable;var i=(e,a,l)=>a in e?o(e,a,{enumerable:!0,configurable:!0,writable:!0,value:l}):e[a]=l,n=(e,a)=>{for(var l in a||(a={}))p.call(a,l)&&i(e,l,a[l]);if(r)for(var l of r(a))m.call(a,l)&&i(e,l,a[l]);return e},s=(e,a)=>g(e,c(a));var u=(e,a)=>{var l={};for(var t in e)p.call(e,t)&&a.indexOf(t)<0&&(l[t]=e[t]);if(e!=null&&r)for(var t of r(e))a.indexOf(t)<0&&m.call(e,t)&&(l[t]=e[t]);return l};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(l){var t=l,{components:e}=t,a=u(t,[\"components\"]);return mdx(MDXLayout,s(n(n({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"xargs\\uFF08\\u82F1\\u6587\\u5168\\u62FC\\uFF1A eXtended ARGuments\\uFF09\\u662F\\u7ED9\\u547D\\u4EE4\\u4F20\\u9012\\u53C2\\u6570\\u7684\\u4E00\\u4E2A\\u8FC7\\u6EE4\\u5668\\uFF0C\\u4E5F\\u662F\\u7EC4\\u5408\\u591A\\u4E2A\\u547D\\u4EE4\\u7684\\u4E00\\u4E2A\\u5DE5\\u5177\\u3002\"),mdx(\"h2\",null,\"\\u4F7F\\u7528\\u65B9\\u6CD5\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-shell\"}),`command1 | xargs command2\n`)),mdx(\"p\",null,\"\\u6211\\u4EEC\\u4F7F\\u7528\",mdx(\"strong\",{parentName:\"p\"},\"|\"),\"\\u5C06\\u8F93\\u51FA\\u4F20\\u9012\\u7ED9 xargs\\u3002\\u8FD9\\u5C06\\u8D1F\\u8D23\\u8FD0\\u884C command2 \\u547D\\u4EE4\\uFF0C\\u4F7F\\u7528 command1 \\u7684\\u8F93\\u51FA\\u4F5C\\u4E3A\\u5176\\u53C2\\u6570\\u3002\"),mdx(\"h2\",null,\"\\u4F8B\\u5B50\"),mdx(\"p\",null,\"\\u8BA9\\u6211\\u4EEC\\u4E3E\\u4E00\\u4E2A\\u7B80\\u5355\\u7684\\u4F8B\\u5B50\\u3002\\u60A8\\u8981\\u4ECE\\u76EE\\u5F55\\u4E2D\\u5220\\u9664\\u67D0\\u4E9B\\u7279\\u5B9A\\u6587\\u4EF6\\u3002\\u8FD9\\u4E9B\\u6587\\u4EF6\\u5217\\u5728\\u6587\\u672C\\u6587\\u4EF6\\u4E2D\\u3002\\u6211\\u4EEC\\u6709 3 \\u4E2A\\u6587\\u4EF6\\uFF1Afile1\\uFF0Cfile2\\uFF0Cfile3\\u3002\\u5728\",mdx(\"strong\",{parentName:\"p\"},\"todelete.txt\"),\"\\u6211\\u4EEC\\u6709\\u4E00\\u4E2A\\u8981\\u5220\\u9664\\u7684\\u6587\\u4EF6\\u5217\\u8868\\uFF0C\\u5728\\u672C\\u4F8B\\u4E2D\\u4E3A file1 \\u548C file3\\uFF1A\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-shell\"}),`cat todelete.txt\n\nfile1\nfile2\n`)),mdx(\"p\",null,mdx(\"img\",n({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/nXyQfk.png\",alt:\"nXyQfk\"}))),mdx(\"p\",null,\"\\u901A\\u8FC7 cat \\u547D\\u4EE4\\u5C06 todelete \\u5185\\u5BB9\\u8F93\\u51FA\\u5E76\\u6267\\u884C rm \\u547D\\u4EE4\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-shell\"}),`cat todelete.txt | xargs rm\n`)),mdx(\"h2\",null,\"\\u53C2\\u6570\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"-a file \\u4ECE\\u6587\\u4EF6\\u4E2D\\u8BFB\\u5165\\u4F5C\\u4E3A sdtin\"),mdx(\"li\",{parentName:\"ul\"},\"-e flag \\uFF0C\\u6CE8\\u610F\\u6709\\u7684\\u65F6\\u5019\\u53EF\\u80FD\\u4F1A\\u662F-E\\uFF0Cflag \\u5FC5\\u987B\\u662F\\u4E00\\u4E2A\\u4EE5\\u7A7A\\u683C\\u5206\\u9694\\u7684\\u6807\\u5FD7\\uFF0C\\u5F53 xargs \\u5206\\u6790\\u5230\\u542B\\u6709 flag \\u8FD9\\u4E2A\\u6807\\u5FD7\\u7684\\u65F6\\u5019\\u5C31\\u505C\\u6B62\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-p \\u5F53\\u6BCF\\u6B21\\u6267\\u884C\\u4E00\\u4E2A argument \\u7684\\u65F6\\u5019\\u8BE2\\u95EE\\u4E00\\u6B21\\u7528\\u6237\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-n num \\u540E\\u9762\\u52A0\\u6B21\\u6570\\uFF0C\\u8868\\u793A\\u547D\\u4EE4\\u5728\\u6267\\u884C\\u7684\\u65F6\\u5019\\u4E00\\u6B21\\u7528\\u7684 argument \\u7684\\u4E2A\\u6570\\uFF0C\\u9ED8\\u8BA4\\u662F\\u7528\\u6240\\u6709\\u7684\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-t \\u8868\\u793A\\u5148\\u6253\\u5370\\u547D\\u4EE4\\uFF0C\\u7136\\u540E\\u518D\\u6267\\u884C\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-i \\u6216\\u8005\\u662F-I\\uFF0C\\u8FD9\\u5F97\\u770B linux \\u652F\\u6301\\u4E86\\uFF0C\\u5C06 xargs \\u7684\\u6BCF\\u9879\\u540D\\u79F0\\uFF0C\\u4E00\\u822C\\u662F\\u4E00\\u884C\\u4E00\\u884C\\u8D4B\\u503C\\u7ED9 {}\\uFF0C\\u53EF\\u4EE5\\u7528 {} \\u4EE3\\u66FF\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-r no-run-if-empty \\u5F53 xargs \\u7684\\u8F93\\u5165\\u4E3A\\u7A7A\\u7684\\u65F6\\u5019\\u5219\\u505C\\u6B62 xargs\\uFF0C\\u4E0D\\u7528\\u518D\\u53BB\\u6267\\u884C\\u4E86\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-s num \\u547D\\u4EE4\\u884C\\u7684\\u6700\\u5927\\u5B57\\u7B26\\u6570\\uFF0C\\u6307\\u7684\\u662F xargs \\u540E\\u9762\\u90A3\\u4E2A\\u547D\\u4EE4\\u7684\\u6700\\u5927\\u547D\\u4EE4\\u884C\\u5B57\\u7B26\\u6570\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-L num \\u4ECE\\u6807\\u51C6\\u8F93\\u5165\\u4E00\\u6B21\\u8BFB\\u53D6 num \\u884C\\u9001\\u7ED9 command \\u547D\\u4EE4\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-l \\u540C -L\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-d delim \\u5206\\u9694\\u7B26\\uFF0C\\u9ED8\\u8BA4\\u7684 xargs \\u5206\\u9694\\u7B26\\u662F\\u56DE\\u8F66\\uFF0Cargument \\u7684\\u5206\\u9694\\u7B26\\u662F\\u7A7A\\u683C\\uFF0C\\u8FD9\\u91CC\\u4FEE\\u6539\\u7684\\u662F xargs \\u7684\\u5206\\u9694\\u7B26\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-x exit \\u7684\\u610F\\u601D\\uFF0C\\u4E3B\\u8981\\u662F\\u914D\\u5408-s \\u4F7F\\u7528\\u3002\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"-P \\u4FEE\\u6539\\u6700\\u5927\\u7684\\u8FDB\\u7A0B\\u6570\\uFF0C\\u9ED8\\u8BA4\\u662F 1\\uFF0C\\u4E3A 0 \\u65F6\\u5019\\u4E3A as many as it can \\uFF0C\\u8FD9\\u4E2A\\u4F8B\\u5B50\\u6211\\u6CA1\\u6709\\u60F3\\u5230\\uFF0C\\u5E94\\u8BE5\\u5E73\\u65F6\\u90FD\\u7528\\u4E0D\\u5230\\u7684\\u5427\\u3002\")))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"October 10, 2020","title":"Linux命令xargs","tags":["linux"],"description":"xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具","fromNow":"a year ago"}},"randomPost":[{"data":{"date":"December 21, 2020","title":"Docker images","description":"Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器","tags":["docker"],"fromNow":"a year ago"},"content":"\nDocker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\n\nimage 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。\n\n```shell\n# 列出本机的所有 image 文件。\n$ docker image ls\n\n# 删除 image 文件\n$ docker image rm [imageName]\n```\n\nimage 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。\n\n为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。\n\n## 更多\n","slug":"docker/Docker镜像"},{"data":{"date":"October 12, 2020","title":"Linux命令ping","tags":["linux"],"description":"ping命令用于检测主机","fromNow":"a year ago"},"content":"\nLinux ping 命令用于检测主机。\n\n执行 ping 指令会使用 ICMP 传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。\n\n如下是 ping baidu.com：\n\n![XimNX7](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/XimNX7.png)\n\n**ping**发出请求到对应的主机，主机返回结果。\n\n默认情况**ping**会每秒发出请求，直到使用**ctrl+c**中断，也可以使用-c times 指定接收包的次数，如：\n\n```shell\nping -c 2 baidu.com\n```\n\n当结束**ping**命令时，屏幕上会打印出统计结果，其中包括丢包率以及速率\n\n```shell\nping -i 3 -s 1024 -t 255 baidu.com\n\n# -i 3 发送周期为 3秒 -s 设置发送包的大小 -t 设置TTL值为 255\n```\n\n## 参数\n\n- -d 使用 Socket 的 SO_DEBUG 功能。\n- -c<完成次数> 设置完成要求回应的次数。\n- -f 极限检测。\n- -i<间隔秒数> 指定收发信息的间隔时间。\n- -I<网络界面> 使用指定的网络接口送出数据包。\n- -l<前置载入> 设置在送出要求信息之前，先行发出的数据包。\n- -n 只输出数值。\n- -p<范本样式> 设置填满数据包的范本样式。\n- -q 不显示指令执行过程，开头和结尾的相关信息除外。\n- -r 忽略普通的 Routing Table，直接将数据包送到远端主机上。\n- -R 记录路由过程。\n- -s<数据包大小> 设置数据包的大小。\n- -t<存活数值> 设置存活数值 TTL 的大小。\n- -v 详细显示指令的执行过程。\n","slug":"linux/Linux命令-ping"},{"data":{"date":"November 19, 2019","title":"安装nvm和nodejs","tags":["server"],"fromNow":"2 years ago"},"content":"\n## 通过 nvm 安装 nodejs\n\n## 安装 nvm\n\n```bash\ncurl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n```\n\n或者\n\n```bash\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n```\n\n然后：\n\n```bash\nsource ~/.bashrc\n```\n\n## 安装 nodejs\n\n```bash\nnvm install stable\n```\n","slug":"server/安装nvm和nodejs"},{"data":{"date":"May 19, 2020","title":"闭包","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## 什么是闭包\n\n作用：能够在函数定义的作用域外，使用函数定义作用域内的局部变量，并且不会污染全局。\n\n原理：基于词法作用域链和垃圾回收机制，通过维持函数作用域的引用，让函数作用域可以在当前作用域外被访问到\n\n```javascript\nfunction foo() {\n  var a = 'hzfe';\n  function bar() {\n    console.log(a);\n  }\n  return bar;\n}\n\nvar baz = foo();\nbaz(); // hzfe\n```\n\n在这个例子中，函数 bar 作为返回值返回后，在自己定义的词法作用域以外的地方执行。一般来说，在函数 foo 执行后，通常会期待函数 foo 的整个内部作用域被引擎回收机制销毁。而闭包可以阻止这件事情的发生。事实上内部作用域依然存在，因为函数 bar 本身在使用，所以并不会被回收。\n\n在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\n\n## 闭包的应用\n\n无论何时何地，如果将函数作为返回值，就会看到闭包在这些函数中的应用。在定时器，事件监听器，ajax 请求，跨窗口通信，web workers 或者任何其他的异步/同步任务中，只要使用了回调函数，实际上就是使用闭包。使用闭包的例子可以参考实现节流防抖函数。\n\n```javascript\nvar a = 'hzfe';\n(function IIFE() {\n  console.log(a);\n})();\n```\n\n通常认为立即执行函数（IIFE）是典型的观察闭包的典型例子，但严格来说并不是。虽然创建了闭包，但没有体现出闭包的作用。因为函数并不是在它本身的词法作用域以外执行的。 它在定义时所在的作用域中执行，而非外部作用域。\n\n## 扩展\n\n- [闭包 MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n- [垃圾回收机制](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/Closed_Overlay_Requires_Arguments)\n- [你不知道的 JavaScript](https://www.imooc.com/article/2907)\n","slug":"javascript/advance/闭包"},{"data":{"date":"May 11, 2018","title":"Null","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nNull 和 Undefined 一样，只有一个值，就是 null\n\nnull 表示空对象指针，使用 typeof null 会返回 object\n\nnull 与 undefined 的区别\n\n```javascript\ntypeof null; //object\ntypeof undefined; //undefined\n\nnull == undefined;\nnull !== undefined;\n```\n","slug":"javascript/base/Null"},{"data":{"date":"December 2, 2021","title":"Functions","tags":["python"],"description":"随着程序的不断更新，我们会发现，函数的定义和调用是一致的。","fromNow":"12 days ago"},"content":"\n## 函数的定义\n\n函数的定义是一个特殊的可复用的代码块，它的第一行必须是函数的声明，第二行开始是函数的实现。\n\n```python\n#定义函数\ndef sumcount(n):\n    '''\n    Returns the sum of the first n integers\n    '''\n    total = 0\n    while n > 0:\n        total += n\n        n -= 1\n    return total\n#调用函数\na = sumcount(100)\n```\n\n## 标准函数\n\npython 中的标准函数是一些内置的函数，通过`import`调用。\n\n```python\nimport math\nx = math.sqrt(10)\n\nimport urllib.request\nu = urllib.request.urlopen('http://www.python.org/')\ndata = u.read()\n```\n\n## 错误和异常\n\n错误和异常是 python 中的两个主要概念，错误是指程序运行过程中发生的错误，异常是指程序运行过程中抛出的异常。例如：\n\n```python\n>>> int('N/A')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: 'N/A'\n>>>\n```\n\n## 捕获、处理异常\n\n异常可以通过`try`和`except`来捕获，也可以通过`try`和`finally`来处理。\n\n```python\nfor line in f:\n    fields = line.split()\n    try:\n        shares = int(fields[1])\n    except ValueError:\n        print(\"Couldn't parse\", line)\n    ...\n```\n","slug":"python/1.6-function"}]},"__N_SSG":true}