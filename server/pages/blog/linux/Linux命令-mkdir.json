{"pageProps":{"data":{"date":"October 13, 2020","title":"Linux命令mkdir","tags":["linux"],"description":"用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计","fromNow":"a year ago"},"content":{"compiledSource":"var u=Object.defineProperty,c=Object.defineProperties;var i=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var m=(e,r,o)=>r in e?u(e,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[r]=o,p=(e,r)=>{for(var o in r||(r={}))a.call(r,o)&&m(e,o,r[o]);if(n)for(var o of n(r))d.call(r,o)&&m(e,o,r[o]);return e},l=(e,r)=>c(e,i(r));var s=(e,r)=>{var o={};for(var t in e)a.call(e,t)&&r.indexOf(t)<0&&(o[t]=e[t]);if(e!=null&&n)for(var t of n(e))r.indexOf(t)<0&&d.call(e,t)&&(o[t]=e[t]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var t=o,{components:e}=t,r=s(t,[\"components\"]);return mdx(MDXLayout,l(p(p({},layoutProps),r),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"mkdir\"),\"\\u547D\\u4EE4\\u7528\\u4E8E\\u521B\\u5EFA\\u76EE\\u5F55\\uFF0C\\u5982\\u679C\\u5728\\u76EE\\u5F55\\u540D\\u7684\\u524D\\u9762\\u6CA1\\u6709\\u52A0\\u4EFB\\u4F55\\u8DEF\\u5F84\\u540D\\uFF0C\\u5219\\u5728\\u5F53\\u524D\\u76EE\\u5F55\\u4E0B\\u521B\\u5EFA\\u7531 dirname \\u6307\\u5B9A\\u7684\\u76EE\\u5F55\\uFF1B\\u5982\\u679C\\u7ED9\\u51FA\\u4E86\\u4E00\\u4E2A\\u5DF2\\u7ECF\\u5B58\\u5728\\u7684\\u8DEF\\u5F84\\uFF0C\\u5C06\\u4F1A\\u5728\\u8BE5\\u76EE\\u5F55\\u4E0B\\u521B\\u5EFA\\u4E00\\u4E2A\\u6307\\u5B9A\\u7684\\u76EE\\u5F55\\u3002\\u5728\\u521B\\u5EFA\\u76EE\\u5F55\\u65F6\\uFF0C\\u5E94\\u4FDD\\u8BC1\\u65B0\\u5EFA\\u7684\\u76EE\\u5F55\\u4E0E\\u5B83\\u6240\\u5728\\u76EE\\u5F55\\u4E0B\\u7684\\u6587\\u4EF6\\u6CA1\\u6709\\u91CD\\u540D\\u3002\"),mdx(\"h2\",null,\"\\u4F7F\\u7528\\u65B9\\u6CD5\"),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-shell\"}),`#\\u521B\\u5EFA\\u5355\\u4E2A\\u6587\\u4EF6\nmkdir folder\n\n#\\u521B\\u5EFA\\u591A\\u4E2A\\u6587\\u4EF6\nmkdir folder1 folder2\n\n#\\u4F7F\\u7528-p\\u53C2\\u6570\\u521B\\u5EFA\\u6587\\u4EF6\\u5939\\uFF0C\\u5982\\u679C\\u4E0D\\u5B58\\u5728\\u5373\\u521B\\u5EFA\\uFF0C\\u5982\\u679C\\u4E0D\\u52A0-p\\uFF0C\\u800C\\u4E14folder\\u4E0D\\u5B58\\u5728\\uFF0C\\u5C06\\u4F1A\\u62A5\\u9519\nmkdir -p folder/data\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"October 13, 2020","title":"Linux命令mkdir","tags":["linux"],"description":"用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计","fromNow":"a year ago"}},"randomPost":[{"data":{"date":"May 19, 2020","title":"类型判断","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## typeof\n\n> 用于判断操作数的数据类型，适用于除 null、object 的其他 5 种类型的判断。\n\n1. 对于基本类型，除 null 以外，均可以返回正确的结果。\n2. 对于引用类型，除 function 以外，一律返回 object 类型。\n3. 对于 null ，返回 object 类型。\n4. 对于 function 返回 function 类型。\n\n```javascript\ntypeof undefined; // \"undefined\";\ntypeof 1; // \"number\";\ntypeof '1'; // \"string\";\ntypeof true; // \"boolean\";\ntypeof Symbol(); // \"symbol\";\ntypeof { a: 1 }; // \"object\";\n\ntypeof null === 'object'; // true\ntypeof function () {} === 'function'; // true\n```\n\n## instanceof\n\n> 用于判断是对象的那个子类型\n\n```javascript\n[1, 2] instanceof Array; // true\n(function foo() {} instanceof Function); // true\nnew Date(2018) instanceof Date; // true\nnew Number(1) instanceof Number; // true\n1 instanceof Number; // false\n```\n\na instanceof b，instanceof 会去查找 a 的原型链(这里不展开讨论)上是否有 b 的 prototype 属性；如果有，就返回 true，否则返回 false。即判断 a 的原型链上是否有 a.\\_proto\\_\\_ === b.prototype 返回 true\n\n## constructor\n\n> 不仅可以用于对象子类型的判断，还可以用于基本类型的判断，返回创建实例对象的 Object 构造函数的引用，原始数据类型，constructor 只读，基本类型指向对应的内置对象的构造函数\n\n```javascript\n({ a: 1 }.constructor === Object); // true\n[1, 2].constructor === Array; // true\nnew Date(2018).constructor === Date; // true\n(function foo() {}.constructor === Function); // true\n'1'.constructor === String; // true\n(1).constructor === Number; // true\ntrue.constructor === Boolean; // true\n```\n\n## prototype\n\n> Object.prototype.toString.call('...')，通用方法判断对象类型。 Object.prototype 表示 Object 的原型对象，toString 返回表示该对象的字符串，call 用于指定 this\n\n```javascript\nObject.prototype.toString.call('1'); // \"[object String]\"\nObject.prototype.toString.call(1); // \"[object Number]\"\nObject.prototype.toString.call(true); // \"[object Boolean]\"\nObject.prototype.toString.call([1, 2, 3]); // \"[object Array]\"\nObject.prototype.toString.call(function foo() {}); // \"[object Function]\"\nObject.prototype.toString.call(null); //\"[object Null]\"\nObject.prototype.toString.call(undefined); //\"[object Undefined]\"\n```\n","slug":"javascript/advance/类型判断"},{"data":{"date":"April 5, 2021","title":"循环","tags":["swift"],"description":"取得成功的秘诀就是开始","fromNow":"8 months ago"},"content":"\nSwift 有三种循环：\n\n- for\n- while\n- repeat\n\n## for 循环\n\n> 用来重复执行一系列语句直到达成特定条件，如下图：\n\n![sgvlgu](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/sgvlgu.png)\n\n```swift\n// 语法\nfor init; condition; increment{\n   // do something\n}\n\n// example\nlet albums = [\"Red\", \"1989\", \"Reputation\"]\nfor album in albums {\n    print(\"\\(album) is on Apple Music\")\n}\n```\n\n## while 循环\n\n> while 循环从计算单一条件开始。如果条件为 true，会重复运行一系列语句，直到条件变为 false。\n\n![WOrVgL](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/WOrVgL.png)\n\n```swift\n// 语法\nwhile condition{\n   // do something\n}\n// example\nvar number = 1\n\nwhile number <= 20 {\n    print(number)\n    number += 1\n}\n\nprint(\"Ready or not, here I come!\")\n```\n\n## repeat 循环\n\n> repeat...while 循环不像 for 和 while 循环在循环体开始执行前先判断条件语句，而是在循环执行结束时判断条件是否符合。 `repeat...while无论条件是否符合，循环会执行至少一次`\n\n![bF7YMc](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/bF7YMc.png)\n\n```swift\n// 语法\nrepeat{\n   statement(s);\n}while( condition );\n\n// example\nvar number = 1\n\nrepeat {\n    print(number)\n    number += 1\n} while number <= 20\n\nprint(\"Ready or not, here I come!\")\n```\n\n## 退出循环\n\n使用`break`退出循环语句，比如在 while 循环中：\n\n```swift\nwhile countDown >= 0 {\n    print(countDown)\n\n    if countDown == 4 {\n        print(\"I'm bored. Let's go now!\")\n\t\t// 当countDown等于4的时候会退出循环\n        break\n    }\n\n    countDown -= 1\n}\n```\n\n## 退出多重循环\n\n在嵌套循环中，想要同时打破内循环和外循环是很常见的。举个例子，我们可以编写一些代码来计算从 1 到 10 的乘法表，如下所示:\n\n```swift\nfor i in 1...10 {\n    for j in 1...10 {\n        let product = i * j\n        print (\"\\(i) * \\(j) is \\(product)\")\n    }\n}\n```\n\n如果需要退出这个双重循环，需要做两步，首先，给外循环加上 label:`outerLoop`\n\n```swift\nouterLoop: for i in 1...10 {\n    for j in 1...10 {\n        let product = i * j\n        print (\"\\(i) * \\(j) is \\(product)\")\n    }\n}\n```\n\n第二步，在内循环执行`break outerLoop`\n\n```swift\nouterLoop: for i in 1...10 {\n    for j in 1...10 {\n        let product = i * j\n        print (\"\\(i) * \\(j) is \\(product)\")\n\n        if product == 50 {\n            print(\"It's a bullseye!\")\n            break outerLoop\n        }\n    }\n}\n```\n\n## 跳过条件 - continue\n\n> `break`退出循环。但是，如果只想跳过当前条件，继续下一个条件，应该使用`continue`。比如如下跳过奇数：\n\n```swift\nfor i in 1...10 {\n    if i % 2 == 1 {\n        continue\n    }\n\n    print(i)\n}\n```\n","slug":"swift/100days/day04"},{"data":{"date":"October 30, 2020","title":"Linux命令tar","tags":["linux"],"description":"tar用于linux的文件和目录创建档案，利用tar命令，可以把一大堆的文件和目录全部打包成一个文件","fromNow":"a year ago"},"content":"\n**tar**用于 linux 的文件和目录创建档案，利用 tar 命令，可以把一大堆的文件和目录全部打包成一个文件\n\n## 使用方法\n\n```shell\ntar -cf archive.tar file1 file2\n#c参数代表创建压缩文档，f参数用于写入归档文件。\n\ntar -xf archive.tar\n#x参数代表解压压缩文档\n\ntar -xf archive.tar -C directory\n#C参数代表解压到某个目录\n\ntar -tf archive.tar\n#t参数代表列出压缩文档的内容\n```\n","slug":"linux/Linux命令-tar"},{"data":{"date":"July 12, 2017","title":"三角形绘制方法","tags":["css"],"description":"在做UI（页面重构）的时候，免不了和各种小图标打交道，这其中最多的应该是三角形以及箭头","fromNow":"4 years ago"},"content":"\n在做 UI（页面重构）的时候，免不了和各种小图标打交道，这其中最多的应该是三角形以及箭头，一般情况下可以通过伪类使用 unicode 解决大部分问题。\n\n现在我们来总结下几种使用 css 绘制三角形的方法，dom 结构如下：\n\n```html\n<div class=\"triangle\"></div>\n```\n\n## 最简单最方便的办法 background\n\n```\n代码忽略\n```\n\n## unicode\n\n```css\n.triangle:after {\n  display: block;\n  content: '\\25B2';\n  color: '#fd5353';\n  font-size: 20px;\n}\n```\n\n> 注意，伪类必须加上 content 属性，否则不生效\n\n[unicode 图表](http://www.w3cplus.com/solution/css3content/images/html.png)\n\n## border\n\n```css\n.triangle {\n  width: 0;\n  height: 0;\n  border-left: 50px solid transparent;\n  border-right: 50px solid transparent;\n  border-bottom: 100px solid red;\n}\n```\n\n使用 border 绘制三角形是什么原理？事实上，宽度相等的 border 是以 45 度对接的，如下图：\n\n![image](https://i.stack.imgur.com/hZefy.png)\n\n那么没有了上 border 就是如下图：\n\n![image](https://i.stack.imgur.com/uV9Q5.png)\n\n再设置 div 的宽度为 0，就是如下图：\n\n![image](https://i.stack.imgur.com/K1A7G.png)\n\n再设置 div 的高度为 0，如下图：\n\n![image](https://i.stack.imgur.com/NsmsW.png)\n\n最后设置左右 border 的颜色为透明，如下图：\n\n![image](https://i.stack.imgur.com/B42zY.png)\n\n再来个动图：\n\n![image](https://i.stack.imgur.com/vYvqa.gif)\n\n通过这种原理，我们可以做更多的图形，比如五角星、六角星等，更多图形请移步[shapesofcss](https://css-tricks.com/examples/ShapesOfCSS/)\n\n## 使用 css3 transform rotate\n\n![image](https://i.stack.imgur.com/mEaS1.jpg)\n\n```css\n.triangle {\n  width: 30%;\n  padding-bottom: 21.27%; /* = width / 1.41 */\n  position: relative;\n\n  //划重点\n  overflow: hidden;\n}\n\n.triangle: before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: #0079c6;\n\n  //划重点\n  transform-origin: 0 100%;\n  transform: rotate(45deg);\n}\n```\n\n> 为什么是 1.41，因为正方形的对角线长度是约等于 1.414。\n\n## 使用 clip-path\n\n```css\n.triangle {\n  width: 200px;\n  height: 200px;\n  background: #fd5353;\n  clip-path: polygon(50% 0, 0 100%, 100% 100%);\n}\n```\n\nclip-path 不支持安卓 4.4 以下，其余均需使用浏览器前缀-webkit，[caniuse](http://caniuse.com/#feat=css-clip-path)\n\n详细请移步 [clip-path](https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path)\n","slug":"css/css三角形绘制方法总结"},{"data":{"date":"May 19, 2020","title":"MacbookPro-前端开发环境配置","tags":["i18n"],"fromNow":"2 years ago"},"content":"\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20200427135628.png)\n\n这是一份为 Web 开发准备的 Mac 配置指南，包括推荐工具，快捷方式，技巧等\n\n- macOS Settings\n  - System preferences\n  - Finder\n  - Screenshot\n- macOS Shortcuts\n- Command-line Tools\n  - Homebrew\n  - iTerm2\n  - Git\n  - Zsh\n  - Oh My Zsh\n  - Node.js\n  - Docker\n  - tldr\n  - htop\n  - fzf\n  - ripgrep\n  - path-extractor\n  - lnav\n- MacOS Applications\n  - Visual Studio Code\n  - Rectangle\n  - GIMP\n  - LICEcap\n  - Alfred\n  - Numi\n- Tips and Tricks\n","slug":"translate/MacbookPro-前端开发环境配置"},{"data":{"date":"May 19, 2020","title":"强制类型转换","tags":["javascript"],"fromNow":"2 years ago"},"content":"","slug":"javascript/advance/强制类型转换"}]},"__N_SSG":true}