{"pageProps":{"data":{"date":"January 7, 2021","title":"Docker Containers","description":"Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器","tags":["docker"],"fromNow":"a year ago"},"content":{"compiledSource":"var m=Object.defineProperty,i=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var c=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,t=Object.prototype.propertyIsEnumerable;var l=(e,a,r)=>a in e?m(e,a,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[a]=r,n=(e,a)=>{for(var r in a||(a={}))p.call(a,r)&&l(e,r,a[r]);if(c)for(var r of c(a))t.call(a,r)&&l(e,r,a[r]);return e},s=(e,a)=>i(e,u(a));var d=(e,a)=>{var r={};for(var o in e)p.call(e,o)&&a.indexOf(o)<0&&(r[o]=e[o]);if(e!=null&&c)for(var o of c(e))a.indexOf(o)<0&&t.call(e,o)&&(r[o]=e[o]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var o=r,{components:e}=o,a=d(o,[\"components\"]);return mdx(MDXLayout,s(n(n({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"image \\u6587\\u4EF6\\u751F\\u6210\\u7684\\u5BB9\\u5668\\u5B9E\\u4F8B\\uFF0C\\u672C\\u8EAB\\u4E5F\\u662F\\u4E00\\u4E2A\\u6587\\u4EF6\\uFF0C\\u79F0\\u4E3A\\u5BB9\\u5668\\u6587\\u4EF6\\u3002\\u4E5F\\u5C31\\u662F\\u8BF4\\uFF0C\\u4E00\\u65E6\\u5BB9\\u5668\\u751F\\u6210\\uFF0C\\u5C31\\u4F1A\\u540C\\u65F6\\u5B58\\u5728\\u4E24\\u4E2A\\u6587\\u4EF6\\uFF1A image \\u6587\\u4EF6\\u548C\\u5BB9\\u5668\\u6587\\u4EF6\\u3002\\u800C\\u4E14\\u5173\\u95ED\\u5BB9\\u5668\\u5E76\\u4E0D\\u4F1A\\u5220\\u9664\\u5BB9\\u5668\\u6587\\u4EF6\\uFF0C\\u53EA\\u662F\\u5BB9\\u5668\\u505C\\u6B62\\u8FD0\\u884C\\u800C\\u5DF2\\u3002\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-shell\"}),`# \\u5217\\u51FA\\u672C\\u673A\\u6B63\\u5728\\u8FD0\\u884C\\u7684\\u5BB9\\u5668\n$ docker container ls\n`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-shell\"}),`# \\u5217\\u51FA\\u672C\\u673A\\u6240\\u6709\\u5BB9\\u5668\\uFF0C\\u5305\\u62EC\\u7EC8\\u6B62\\u8FD0\\u884C\\u7684\\u5BB9\\u5668\n$ docker container ls --all\n`)),mdx(\"p\",null,\"\\u4E0A\\u9762\\u547D\\u4EE4\\u7684\\u8F93\\u51FA\\u7ED3\\u679C\\u4E4B\\u4E2D\\uFF0C\\u5305\\u62EC\\u5BB9\\u5668\\u7684 ID\\u3002\\u5F88\\u591A\\u5730\\u65B9\\u90FD\\u9700\\u8981\\u63D0\\u4F9B\\u8FD9\\u4E2A ID\\uFF0C\\u6BD4\\u5982\\u4E0A\\u4E00\\u8282\\u7EC8\\u6B62\\u5BB9\\u5668\\u8FD0\\u884C\\u7684 docker container kill \\u547D\\u4EE4\\u3002\"),mdx(\"p\",null,\"\\u7EC8\\u6B62\\u8FD0\\u884C\\u7684\\u5BB9\\u5668\\u6587\\u4EF6\\uFF0C\\u4F9D\\u7136\\u4F1A\\u5360\\u636E\\u786C\\u76D8\\u7A7A\\u95F4\\uFF0C\\u53EF\\u4EE5\\u4F7F\\u7528 docker container rm \\u547D\\u4EE4\\u5220\\u9664\\u3002\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-shell\"}),`$ docker container rm [containerID]\n`)),mdx(\"p\",null,\"\\u8FD0\\u884C\\u4E0A\\u9762\\u7684\\u547D\\u4EE4\\u4E4B\\u540E\\uFF0C\\u518D\\u4F7F\\u7528 docker container ls --all \\u547D\\u4EE4\\uFF0C\\u5C31\\u4F1A\\u53D1\\u73B0\\u88AB\\u5220\\u9664\\u7684\\u5BB9\\u5668\\u6587\\u4EF6\\u5DF2\\u7ECF\\u6D88\\u5931\\u4E86\\u3002\"),mdx(\"h2\",null,\"\\u66F4\\u591A\"))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"January 7, 2021","title":"Docker Containers","description":"Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器","tags":["docker"],"fromNow":"a year ago"}},"randomPost":[{"data":{"date":"May 4, 2016","title":"老生常谈-居中","tags":["css"],"description":"几种居中的方法","fromNow":"6 years ago"},"content":"\n## 水平居中\n\n### Text\n\n```css\np {\n  text-align: center;\n}\n```\n\n### Blocks\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190125091332.png)\n\n```css\n/*flexbox*/\n#mysection {\n  display: flex;\n  justify-content: center;\n}\n\n/*margin*/\n#mysection {\n  margin: 0 auto;\n  width: 50%;\n}\n```\n\n## 垂直居中\n\n### Text\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190125092037.png)\n\n```css\n#mysection {\n  display: flex;\n  align-items: center;\n}\n```\n\n## 水平垂直居中\n\n![image](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190125091735.png)\n\n```css\n/*flex*/\n#mysection {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n/*grid*/\nbody {\n  display: grid;\n  place-items: center;\n  height: 100vh;\n}\n```\n","slug":"css/老生常谈-居中"},{"data":{"date":"November 2, 2020","title":"Linux命令export","tags":["linux"],"description":"export用于设置或显示环境变量。","fromNow":"a year ago"},"content":"\n**export**用于设置或显示环境变量。\n\n## 使用方法\n\n```shell\nexport TEST=\"test\"\n# TEST代表变量名，test代表变量值\n\nexport -n TEST\n#-n参数代表一出TEST变量\n```\n\n## 参数：\n\n- -f 　代表[变量名称]中为函数名称。\n- -n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。\n- -p 　列出所有的 shell 赋予程序的环境变量。\n","slug":"linux/Linux命令-export"},{"data":{"date":"December 3, 2021","title":"Data Types and Data Structures","tags":["python"],"description":"以元组和字典的形式介绍数据结构。","fromNow":"12 days ago"},"content":"\n## 原始数据类型\n\n- 整形：`int`\n- 浮点型：`float`\n- 字符串：`str`\n\n## 无类型\n\n```python\nemail_address = None\n```\n\n`None` 是一个特殊的值，表示空值。\n\n```python\nif email_address:\n    print('email address provided.')\n```\n\n## 元组\n\n元组是一种有序的数据集合，元组中的元素可以是不同的数据类型。\n\n```python\ns = ('a', 'b', 'c')\n```\n\n有时候`()`可以省略，但是不建议这样做。\n\n```python\ns = 'a', 'b', 'c'\n```\n\n通过索引访问元组中的元素，索引从 0 开始。\n\n```python\ns = ('GOOG', 100, 490.10, 'Google Inc.')\nname = s[0] # GOOG\nprice = s[2] # 490.10\nshares = s[1] # 100\n```\n\n无法修改元组中的元素。\n\n```python\ns[1] = 200\n# TypeError: 'tuple' object does not support item assignment\n```\n\n元组可以被重新赋值，但是不能改变元组的长度。\n\n```python\ns = ('GOO', 200, 490.10, 'Google Inc.')\n```\n\n## 元组的包装和拆包\n\n```python\ns = ('GOOG', 100, 490.10, 'Google Inc.')\nname, shares, price, company = s\n```\n\n## 元组和列表\n\n元组通常由不同的数据，而列表是相同类型的数据队列。元组表示的是结构，而列表表示的是顺序\n\n- 都是序列\n- 都可以存储任何数据类型\n- 可以通过索引访问\n\n```python\nrecord = ('GOOG', 100, 490.1)       # 一些不同的数据\n\nsymbols = [ 'GOOG', 'AAPL', 'IBM' ]  # 一些相同类型的数据\n```\n\n## 字典\n\n字典是一种可变的数据结构，它是一种映射，也就是一种键值对的集合。\n\n```python\ns = {\n    'name': 'GOOG',\n    'shares': 100,\n    'price': 490.1\n}\n\ns['name'] # GOOG\ns['shares'] # 100\ns['price'] # 490.1\n```\n","slug":"python/2.1-data"},{"data":{"date":"December 10, 2021","title":"Formatting","tags":["python"],"description":"输出格式化","fromNow":"5 days ago"},"content":"\n当输出数据时，我们希望能够按照一定的格式输出，这个时候就可以使用 format()函数。比如：\n\n```python\n      Name      Shares        Price\n----------  ----------  -----------\n        AA         100        32.20\n       IBM          50        91.10\n       CAT         150        83.44\n      MSFT         200        51.23\n        GE          95        40.37\n      MSFT          50        65.10\n       IBM         100        70.44\n```\n\n## 字符输出格式化\n\n在`python 3.6+`使用`f-strings`格式化字符串，如下：\n\n```python\nname = 'IBM'\nshares = 100\nprice = 91.1\nf'{name:>10s} {shares:>10d} {price:>10.2f}'\n#'       IBM        100      91.10'\n\n# 通常配合 print()函数使用，如下：\nprint(f'{name:>10s} {shares:>10d} {price:>10.2f}')\n```\n\n## 格式化代码\n\n格式代码(在`{}`中`:` 之后)类似于 c `printf ()`。常见代码包括:\n\n```python\nd       # 整数\nb       # 十六进制\nx       # 十六进制\nf       # 浮点数\ne       # 指数\ng       # 指数或浮点数\ns       # 字符串\nc       # 字符\n```\n\n常用的修饰符调整字段宽度和十进制精度。这是一个部分列表:\n\n```python\n:>10d   # 宽度为10，十进制精度无限制\n:<10d   # 宽度为10，十进制精度无限制\n:^10d   # 宽度为10，十进制精度无限制\n:0.2f   # 宽度为无限制，十进制精度为2\n```\n\n## 字典格式化\n\n使用`format_map`函数可以将字典中的键和值对应输出，如下：\n\n```python\ns = {\n    'name': 'IBM',\n    'shares': 100,\n    'price': 91.1\n}\n'{name:>10s} {shares:10d} {price:10.2f}'.format_map(s)\n#'       IBM        100      91.10'\n```\n\n## format()函数\n\n```python\n'{name:>10s} {shares:10d} {price:10.2f}'.format(name='IBM', shares=100, price=91.1)\n#'       IBM        100      91.10'\n'{:10s} {:10d} {:10.2f}'.format('IBM', 100, 91.1)\n#'       IBM        100      91.10'\n```\n\n## C 语言格式化\n\n使用`%`可以格式化字符串，如下：\n\n```python\n'The value is %d' % 3\n#'The value is 3'\n'%5d %-5d %10d' % (3,4,5)\n#'    3 4              5'\n'%0.2f' % (3.1415926,)\n#'3.14'\n```\n","slug":"python/2.3-formatting"},{"data":{"date":"November 26, 2021","title":"Lists","tags":["python"],"description":"列表（List）是 python 的基本类型","fromNow":"19 days ago"},"content":"\n## 创建列表\n\n```python\nnames = ['Michael', 'Bob', 'Tracy']\nnums = [1, 2, 3]\n```\n\n也可以使用其他方法`split()`创建\n\n```python\nline = 'Hello World!'\nrow = line.split(' ')\nrow # ['Hello', 'World!']\n```\n\n## 列表操作\n\n```python\nnames.append('Adam') # 在末尾添加元素\nnames.insert(1, 'Jack') # 在指定位置添加元素\n```\n\n使用`+`连接两个列表\n\n```python\ns=[1,2,3]\nt=[4,5,6]\ns+t # [1,2,3,4,5,6]\n```\n\n列表索引从 0 开始\n\n```python\nnames = ['Michael', 'Bob', 'Tracy']\nnames[0] # Michael\nnames[1] # Bob\nnames[-1] # Tracy\n```\n\n使用索引覆盖元素\n\n```python\nnames[0] = 'Adam' # 修改第一个元素\nnames # ['Adam', 'Bob', 'Tracy']\n```\n\n使用`len`获取列表长度\n\n```python\nlen(names) # 3\n```\n\n使用`in`判断元素是否在列表中\n\n```python\n'Adam' in names # True\n'manon' in names # False\n```\n\n## 列表的循环\n\n使用`for`循环遍历列表\n\n```python\nfor name in names:\n    print(name)\n```\n\n查找索引值\n\n```python\nnames.index('Bob') # 1\n```\n\n## 移除元素\n\n使用`del`或`remove`删除元素\n\n```python\nnames.remove('Bob') # 删除第一个 Bob\ndel names[0] # 删除第一个元素\n```\n\n## 列表的排序\n\n使用`sort`对列表进行排序\n\n```python\ns = [10, 1, 7, 3]\ns.sort()                    # [1, 3, 7, 10]\n\n# Reverse order\ns = [10, 1, 7, 3]\ns.sort(reverse=True)        # [10, 7, 3, 1]\n\n# It works with any ordered data\ns = ['foo', 'bar', 'spam']\ns.sort()                    # ['bar', 'foo', 'spam']\n```\n\n使用`sorted`创建新的列表，不会修改原列表\n\n```python\nt = sorted(s)\n```\n","slug":"python/1.4-list"},{"data":{"date":"July 30, 2017","title":"css的小技巧","tags":["css"],"fromNow":"4 years ago"},"content":"\n1. 使用 CSS 复位\n\n不同浏览器有不同的自带初始样式，通常可以使用 normalize.css、tinyreset.css 进行通配初始化。\n\n```css\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n```\n\n2. 继承 box-sizing\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n```\n\n3. 使用 unset 而不是重置所有属性\n4. 使用 :not() 选择器来决定表单是否显示边框\n5. 为 body 元素添加行高\n6. 為表單元素設置:focus\n7. 垂直居中任何元素\n8. 逗号分隔的列表\n9. 使用负的 nth-child 来选择元素\n10. 使用 SVG 图标\n11. 使用 “形似猫头鹰” 的选择器\n12. 使用 max-height 来建立纯 CSS 的滑块\n13. 创造格子等宽的表格\n14. 利用 Flexbox 去除多余的外边距\n15. 利用属性选择器来选择空链接\n16. 给 “默认” 链接定义样式\n17. 一致的垂直节奏\n18. 内在比例盒\n19. 为破碎图象定义样式\n20. 用 rem 来调整全局大小；用 em 来调整局部大小\n21. 隐藏没有静音、自动播放的影片\n22. 使用选择器 :root 来控制字体弹性\n23. 为更好的移动体验，为表单元素设置字体大小\n24. 使用指针事件來控制鼠标事件\n","slug":"css/小技巧-ChicksTricks"}]},"__N_SSG":true}