{"pageProps":{"data":{"date":"December 21, 2020","title":"Docker入门","tags":["docker"],"description":"Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。","fromNow":"a year ago"},"content":{"compiledSource":"var u=Object.defineProperty,o=Object.defineProperties;var k=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var c=(a,t,i)=>t in a?u(a,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):a[t]=i,e=(a,t)=>{for(var i in t||(t={}))n.call(t,i)&&c(a,i,t[i]);if(r)for(var i of r(t))p.call(t,i)&&c(a,i,t[i]);return a},s=(a,t)=>o(a,k(t));var m=(a,t)=>{var i={};for(var l in a)n.call(a,l)&&t.indexOf(l)<0&&(i[l]=a[l]);if(a!=null&&r)for(var l of r(a))t.indexOf(l)<0&&p.call(a,l)&&(i[l]=a[l]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var l=i,{components:a}=l,t=m(l,[\"components\"]);return mdx(MDXLayout,s(e(e({},layoutProps),t),{components:a,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u7B80\\u4ECB\"),mdx(\"p\",null,\"Docker \\u662F\\u4E00\\u4E2A\\u5F00\\u6E90\\u7684\\u5E94\\u7528\\u5BB9\\u5668\\u5F15\\u64CE\\uFF0C\\u57FA\\u4E8E Go \\u8BED\\u8A00 \\u5E76\\u9075\\u4ECE Apache2.0 \\u534F\\u8BAE\\u5F00\\u6E90\\u3002\"),mdx(\"p\",null,\"Docker \\u53EF\\u4EE5\\u8BA9\\u5F00\\u53D1\\u8005\\u6253\\u5305\\u4ED6\\u4EEC\\u7684\\u5E94\\u7528\\u4EE5\\u53CA\\u4F9D\\u8D56\\u5305\\u5230\\u4E00\\u4E2A\\u8F7B\\u91CF\\u7EA7\\u3001\\u53EF\\u79FB\\u690D\\u7684\\u5BB9\\u5668\\u4E2D\\uFF0C\\u7136\\u540E\\u53D1\\u5E03\\u5230\\u4EFB\\u4F55\\u6D41\\u884C\\u7684 Linux \\u673A\\u5668\\u4E0A\\uFF0C\\u4E5F\\u53EF\\u4EE5\\u5B9E\\u73B0\\u865A\\u62DF\\u5316\\u3002\"),mdx(\"p\",null,\"\\u5BB9\\u5668\\u662F\\u5B8C\\u5168\\u4F7F\\u7528\\u6C99\\u7BB1\\u673A\\u5236\\uFF0C\\u76F8\\u4E92\\u4E4B\\u95F4\\u4E0D\\u4F1A\\u6709\\u4EFB\\u4F55\\u63A5\\u53E3\\uFF08\\u7C7B\\u4F3C iPhone \\u7684 app\\uFF09,\\u66F4\\u91CD\\u8981\\u7684\\u662F\\u5BB9\\u5668\\u6027\\u80FD\\u5F00\\u9500\\u6781\\u4F4E\\u3002\"),mdx(\"h2\",null,\"\\u5E94\\u7528\\u573A\\u666F\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Web \\u5E94\\u7528\\u7684\\u81EA\\u52A8\\u5316\\u6253\\u5305\\u548C\\u53D1\\u5E03\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"\\u81EA\\u52A8\\u5316\\u6D4B\\u8BD5\\u548C\\u6301\\u7EED\\u96C6\\u6210\\u3001\\u53D1\\u5E03\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"\\u5728\\u670D\\u52A1\\u578B\\u73AF\\u5883\\u4E2D\\u90E8\\u7F72\\u548C\\u8C03\\u6574\\u6570\\u636E\\u5E93\\u6216\\u5176\\u4ED6\\u7684\\u540E\\u53F0\\u5E94\\u7528\\u3002\"),mdx(\"li\",{parentName:\"ul\"},\"\\u4ECE\\u5934\\u7F16\\u8BD1\\u6216\\u8005\\u6269\\u5C55\\u73B0\\u6709\\u7684 OpenShift \\u6216 Cloud Foundry \\u5E73\\u53F0\\u6765\\u642D\\u5EFA\\u81EA\\u5DF1\\u7684 PaaS \\u73AF\\u5883\\u3002\")),mdx(\"h2\",null,\"\\u4F18\\u70B9\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"\\u5FEB\\u901F\\uFF0C\\u4E00\\u81F4\\u5730\\u4EA4\\u4ED8\\u60A8\\u7684\\u5E94\\u7528\\u7A0B\\u5E8F\"),mdx(\"li\",{parentName:\"ul\"},\"\\u54CD\\u5E94\\u5F0F\\u90E8\\u7F72\\u548C\\u6269\\u5C55\"),mdx(\"li\",{parentName:\"ul\"},\"\\u5728\\u540C\\u4E00\\u786C\\u4EF6\\u4E0A\\u8FD0\\u884C\\u66F4\\u591A\\u5DE5\\u4F5C\\u8D1F\\u8F7D\")),mdx(\"h2\",null,\"\\u76EE\\u5F55\"),mdx(\"ul\",e({},{className:\"contains-task-list\"}),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"./Docker%E9%95%9C%E5%83%8F\"}),\"Docker \\u955C\\u50CF\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"./Docker%E5%AE%B9%E5%99%A8\"}),\"Docker \\u5BB9\\u5668\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"./Dockerfiles\"}),\"Dockerfiles\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"./Docker%E6%9B%B4%E6%96%B0%E5%AE%B9%E5%99%A8\"}),\"Docker \\u66F4\\u65B0\\u5BB9\\u5668\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"./Docker%E6%9B%B4%E6%96%B0%E9%95%9C%E5%83%8F\"}),\"Docker \\u66F4\\u65B0\\u955C\\u50CF\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"\"}),\"How to access files outside a Docker image\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"\"}),\"Sharing Docker Images on Docker Hub\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"\"}),\"Working with Docker Images from the command line\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"\"}),\"Working with Docker Containers from the command line\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"\"}),\"What to do if a Docker container immediately exits\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"\"}),\"Create a simple Node.js Hello World Docker Container from scratch\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"\"}),\"Using Docker Desktop to manage a Container\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"\"}),\"First steps with Docker after the installation\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"./Macos%E5%AE%89%E8%A3%85Docker\"}),\"Macos \\u5B89\\u88C5 Docker\"))))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"December 21, 2020","title":"Docker入门","tags":["docker"],"description":"Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。","fromNow":"a year ago"}},"randomPost":[{"data":{"date":"November 24, 2021","title":"Strings","tags":["python"],"description":"","fromNow":"21 days ago"},"content":"\n## 字符串文本\n\n> 字符串文本通常是由单引号或者双引号括起来的。通常单行单引号，多行三引号。\n\n```python\n# Single quote\na = 'Yeah but no but yeah but...'\n\n# Double quote\nb = \"computer says no\"\n\n# Triple quotes\nc = '''\nLook into my eyes, look into my eyes, the eyes, the eyes, the eyes,\nnot around the eyes,\ndon't look around the eyes,\nlook into my eyes, you're under.\n'''\n```\n\n## 字符串转义\n\n```python\n'\\n'      # 换行\n'\\r'      # 回车\n'\\t'      # 水平制表符\n'\\''      # 单引号\n'\\\"'      # 双引号\n'\\\\'      # 反斜杠\n```\n\n## 字符串运算\n\n```python\n+  # 字符串连接\n*  # 重复\n[] # 取子串\n[:] # 截取字符串的一部分\nin # 判断字符串是否包含某个字符串\nnot in # 判断字符串是否不包含某个字符串\nr/re # 匹配字符串\n% # 格式化字符串\n\n\na = \"Hello\"\nb = \"Python\"\n\nprint \"a + b 输出结果：\", a + b\nprint \"a * 2 输出结果：\", a * 2\nprint \"a[1] 输出结果：\", a[1]\nprint \"a[1:4] 输出结果：\", a[1:4]\n\nif( \"H\" in a) :\n    print \"H 在变量 a 中\"\nelse :\n    print \"H 不在变量 a 中\"\n\nif( \"M\" not in a) :\n    print \"M 不在变量 a 中\"\nelse :\n    print \"M 在变量 a 中\"\n\nprint r'\\n'\nprint R'\\n'\n```\n\n## 字符串方法\n\n```python\ns = ' Hello'\nt = s.strip() #'Hello'去除空格\nl = s.lower() #' hello' 全部转换为小写\nu = s.upper() #' HELLO' 全部转换为大写\nc = s.capitalize() #'Hello' 字符串首字母大写\nt = s.replace('H', 'J') #'Jello' 将所有的H替换为J\n\ns.endswith(suffix)     # 判断字符串是否以指定后缀结尾\ns.find(t)              # 查找字符串中指定字符或字符串的索引位置\ns.index(t)             # 查找字符串中指定字符或字符串的索引位置\ns.isalpha()            # 判断字符串是否只有字母\ns.isdigit()            # 判断字符串是否只有数字\ns.islower()            # 判断字符串是否只有小写\ns.isupper()            # 判断字符串是否只有大写\ns.join(slist)          # 将字符串s与字符串列表slist中的字符串连接\ns.lower()              # 转换字符串中所有大写字符为小写\ns.replace(old,new)     # 替换字符串中的指定字符串\ns.rfind(t)             # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.rindex(t)            # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.split([delim])       # 将字符串分割成一个列表\ns.startswith(prefix)   # 判断字符串是否以指定前缀开头\ns.strip()              # 去掉字符串左右两边的空格\ns.upper()              # 转换字符串中的小写字母为大写\n```\n\n## 字符串类型转换\n\n> 使用`str()`将任何值转换成字符串\n\n```python\nx=42\nstr(x) #'42'\n```\n\n## 其他字符类型\n\n```python\n# 字节类型\ndata = b'Hello World\\r\\n'\nlen(data)                         # 13\ndata[0:5]                         # b'Hello'\ndata.replace(b'Hello', b'Cruel')  # b'Cruel World\\r\\n'\n\n# Raw字节类型\n>>> rs = r'c:\\newdata\\test' # Raw (uninterpreted backslash)\n>>> rs\n'c:\\\\newdata\\\\test'\n\n# f-string\n>>> name = 'IBM'\n>>> shares = 100\n>>> price = 91.1\n>>> a = f'{name:>10s} {shares:10d} {price:10.2f}'\n>>> a\n'       IBM        100      91.10'\n>>> b = f'Cost = ${shares*price:0.2f}'\n>>> b\n'Cost = $9110.00'\n>>>\n```\n","slug":"python/1.3-strings"},{"data":{"date":"October 11, 2020","title":"Linux命令nohup","tags":["linux"],"description":"用于忽略 SIGHUP (挂断信号) 在系统后台不挂断地运行命令，退出终端不会影响程序的运行","fromNow":"a year ago"},"content":"\n**nohup**用于忽略 SIGHUP (\"signal hang up\" 译：挂断信号) 在系统后台不挂断地运行命令，退出终端不会影响程序的运行。\n\nnohup 命令在默认情况下（非重定向时），会输出一个名叫 nohup.out 的文件到当前目录下，如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。\n\n## 使用方法\n\n```shell\nnohup <command>\n```\n\n停止运行\n\n```shell\n#使用如下命令找到进程pid，然后使用kill杀掉进程\nps -aux | grep <command>\n```\n\n## 参数\n\n- Command：要执行的命令。\n- Arg：一些参数，可以指定输出文件。\n- &：让命令在后台执行，终端退出后命令仍旧执行。\n\nnohup 命令可以在 Linux、macOS、WSL 和任何有 UNIX 环境的地方使用\n","slug":"linux/Linux命令-nohup"},{"data":{"date":"February 10, 2019","title":"online&offline","tags":["javascript"],"description":"当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发","fromNow":"3 years ago"},"content":"\n> 当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发，并冒泡到 document 和 window。可使用 window、document、document.body、添加监听事件`addEventListener`。\n\n## 使用方法\n\n```javascript\n//网络状态\nwindow.addEventListener('load', () => {\n  const updateOnlineStatus = () => {\n    this.online = navigator.onLine;\n  };\n\n  window.addEventListener('online', updateOnlineStatus);\n  window.addEventListener('offline', updateOnlineStatus);\n});\n```\n","slug":"apis/online-offline"},{"data":{"date":"December 21, 2020","title":"Docker images","description":"Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器","tags":["docker"],"fromNow":"a year ago"},"content":"\nDocker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\n\nimage 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。\n\n```shell\n# 列出本机的所有 image 文件。\n$ docker image ls\n\n# 删除 image 文件\n$ docker image rm [imageName]\n```\n\nimage 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。\n\n为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。\n\n## 更多\n","slug":"docker/Docker镜像"},{"data":{"date":"July 30, 2017","title":"css的小技巧","tags":["css"],"fromNow":"4 years ago"},"content":"\n1. 使用 CSS 复位\n\n不同浏览器有不同的自带初始样式，通常可以使用 normalize.css、tinyreset.css 进行通配初始化。\n\n```css\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n```\n\n2. 继承 box-sizing\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n```\n\n3. 使用 unset 而不是重置所有属性\n4. 使用 :not() 选择器来决定表单是否显示边框\n5. 为 body 元素添加行高\n6. 為表單元素設置:focus\n7. 垂直居中任何元素\n8. 逗号分隔的列表\n9. 使用负的 nth-child 来选择元素\n10. 使用 SVG 图标\n11. 使用 “形似猫头鹰” 的选择器\n12. 使用 max-height 来建立纯 CSS 的滑块\n13. 创造格子等宽的表格\n14. 利用 Flexbox 去除多余的外边距\n15. 利用属性选择器来选择空链接\n16. 给 “默认” 链接定义样式\n17. 一致的垂直节奏\n18. 内在比例盒\n19. 为破碎图象定义样式\n20. 用 rem 来调整全局大小；用 em 来调整局部大小\n21. 隐藏没有静音、自动播放的影片\n22. 使用选择器 :root 来控制字体弹性\n23. 为更好的移动体验，为表单元素设置字体大小\n24. 使用指针事件來控制鼠标事件\n","slug":"css/小技巧-ChicksTricks"},{"data":{"date":"December 21, 2020","title":"Docker入门","tags":["docker"],"description":"Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。","fromNow":"a year ago"},"content":"\n## 简介\n\nDocker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。\n\nDocker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\n\n## 应用场景\n\n- Web 应用的自动化打包和发布。\n- 自动化测试和持续集成、发布。\n- 在服务型环境中部署和调整数据库或其他的后台应用。\n- 从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。\n\n## 优点\n\n- 快速，一致地交付您的应用程序\n- 响应式部署和扩展\n- 在同一硬件上运行更多工作负载\n\n## 目录\n\n- [x] [Docker 镜像](./Docker镜像)\n- [x] [Docker 容器](./Docker容器)\n- [x] [Dockerfiles](./Dockerfiles)\n- [x] [Docker 更新容器](./Docker更新容器)\n- [x] [Docker 更新镜像](./Docker更新镜像)\n- [ ] [How to access files outside a Docker image]()\n- [ ] [Sharing Docker Images on Docker Hub]()\n- [ ] [Working with Docker Images from the command line]()\n- [ ] [Working with Docker Containers from the command line]()\n- [ ] [What to do if a Docker container immediately exits]()\n- [ ] [Create a simple Node.js Hello World Docker Container from scratch]()\n- [ ] [Using Docker Desktop to manage a Container]()\n- [ ] [First steps with Docker after the installation]()\n- [x] [Macos 安装 Docker](./Macos安装Docker)\n","slug":"docker/index"}]},"__N_SSG":true}