{"pageProps":{"data":{"date":"December 21, 2020","title":"Macos Docker安装","tags":["docker"],"fromNow":"a year ago"},"content":{"compiledSource":"var p=Object.defineProperty,m=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var s=(e,r,o)=>r in e?p(e,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[r]=o,a=(e,r)=>{for(var o in r||(r={}))n.call(r,o)&&s(e,o,r[o]);if(t)for(var o of t(r))d.call(r,o)&&s(e,o,r[o]);return e},l=(e,r)=>m(e,h(r));var i=(e,r)=>{var o={};for(var c in e)n.call(e,c)&&r.indexOf(c)<0&&(o[c]=e[c]);if(e!=null&&t)for(var c of t(e))r.indexOf(c)<0&&d.call(e,c)&&(o[c]=e[c]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var c=o,{components:e}=c,r=i(c,[\"components\"]);return mdx(MDXLayout,l(a(a({},layoutProps),r),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"brew \\u5B89\\u88C5 docker\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-shell\"}),`#\\u641C\\u7D22\n==> Formulae\ndocker                          docker-credential-helper        docker-machine-completion       docker-machine-nfs              docker2aci\ndocker-clean                    docker-credential-helper-ecr    docker-machine-driver-hyperkit  docker-machine-parallels        dockerize\ndocker-completion               docker-gen                      docker-machine-driver-vmware    docker-slim                     lazydocker\ndocker-compose                  docker-ls                       docker-machine-driver-vultr     docker-squash\ndocker-compose-completion       docker-machine                  docker-machine-driver-xhyve     docker-swarm\n==> Casks\ndocker\n\n#\\u5B89\\u88C5\nbrew install docker\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/bottles/docker-19.03.14.big_sur.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring docker-19.03.14.big_sur.bottle.tar.gz\n==> Caveats\nzsh completions have been installed to:\n  /usr/local/share/zsh/site-functions\n==> Summary\n\\u{1F37A}  /usr/local/Cellar/docker/19.03.14: 14 files, 71.6MB\n`)),mdx(\"h2\",null,\"\\u624B\\u52A8\\u5B89\\u88C5\"),mdx(\"p\",null,\"\\u4E0B\\u8F7D\",mdx(\"a\",a({parentName:\"p\"},{href:\"https://download.docker.com/mac/stable/Docker.dmg\"}),\"Stable\"),\"\\uFF0C\\u53CC\\u51FB\\u5B89\\u88C5\"),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/PVr5uh.jpg\",alt:\"PVr5uh\"}))),mdx(\"p\",null,\"\\u5B89\\u88C5\\u5B8C\\u6210\\u540E\\uFF0C\\u901A\\u8FC7\\u547D\\u4EE4\\u68C0\\u67E5 Docker \\u7248\\u672C\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-shell\"}),`docker --version\n\nDocker version 19.03.14, build 5eb3275\n`)),mdx(\"h2\",null,\"\\u955C\\u50CF\\u52A0\\u901F\"),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/NAWFnd.png\",alt:\"NAWFnd\"}))),mdx(\"h2\",null,\"\\u66F4\\u591A\"))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"December 21, 2020","title":"Macos Docker安装","tags":["docker"],"fromNow":"a year ago"}},"randomPost":[{"data":{"date":"October 9, 2020","title":"Linux命令gzip","tags":["linux"],"description":"“gzip”命令的快速指南，用于压缩文件","fromNow":"a year ago"},"content":"\n“gzip”命令的快速指南，用于压缩文件\n\ngzip 命令可以在 Linux、macOS、WSL 和任何有 UNIX 环境的地方使用。\n\n您可以使用 gzip 命令使用名为[LZ77](https://en.wikipedia.org/wiki/LZ77_and_LZ78)的 gzip 压缩协议压缩文件。\n\n## 使用方法\n\n```shell\ngzip filename\n```\n\n这将压缩文件，并向其附加一个.gz 扩展名，原始文件将被删除。为了防止出现这种情况，可以使用`-C`选项并使用输出重定向将输出写入文件名.gz 文件：\n\n```shell\ngzip -c filename > filename.gz\n```\n\n-C 选项指定输出将转到标准输出流，保留原始文件不变\n\n同时也可以使用-K 选项\n\n```shell\ngzip -k filename\n```\n\n压缩越多，压缩（和解压缩）所需的时间就越长。级别范围从 1（最快、最差的压缩）到 9（最慢、更好的压缩），默认值为 6。您可以使用-`<NUMBER>`选项选择特定级别：\n\n```shell\ngzip -1 filename\n```\n\n压缩多文件\n\n```shell\ngzip filename1 filename2\n```\n\n使用-r 选项递归地压缩目录中的所有文件：\n\n```shell\ngzip -r a_folder\n```\n\n-v 选项打印压缩百分比信息。下面是一个与-k（keep）选项一起使用的示例：\n\n![fvzBBf](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/fvzBBf.png)\n\ngzip 还可以用于解压缩文件，使用-d 选项：\n\n```shell\ngzip -d filename.gz\n```\n","slug":"linux/Linux命令-gzip"},{"data":{"date":"October 19, 2019","title":"安装mongodb","tags":["server"],"fromNow":"2 years ago"},"content":"\n## 安装 mongodb\n\n## 添加 mongodb 源\n\n```bash\nsudo vi /etc/yum.repos.d/mongodb-org.repo\n\n\n[mongodb-org-3.4]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc\n```\n\n```bash\nyum repolist\n```\n\n## 安装 mongodb\n\n```bash\nsudo yum install mongodb-org\n\n启动\nsudo systemctl start mongod\n\n重载\nsudo systemctl reload mongod\n\n停止\nsudo systemctl stop mongod\n\n重启\nsudo systemctl restart mongod\n\n加入自启\nsudo systemctl enable mongod\n\n检查状态\nsystemctl status mongod\n\n```\n","slug":"server/安装mongodb"},{"data":{"date":"October 19, 2020","title":"css-BFC","tags":["css"],"fromNow":"a year ago"},"content":"\n## 什么是 BFC\n\nBlock Formatting Context（块级格式化上下文）\n\n> Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域\n\n## 布局规则\n\n- 内部的 Box 会在垂直方向一个接一个地放置\n- Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠\n- 每个盒子（块盒与行盒）的 margin box 的左边，与包含块 border box 的左边相接触，即使存在浮动也是如此\n- BFC 的区域不会与 float box 重叠\n- BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响外面的元素。反之也是如此\n- 计算 BFC 的高度时，浮动元素也参与计算\n\n## 如何创建 BFC\n\n- 根元素或其他包含他的元素\n- 浮动元素（元素的 float 不是 none）\n- 绝对定位元素（元素具有 position 为 absolute 或 fixed）\n- 内联块（元素具有 display: inline-block）\n- 表格单元格（元素具有 display: table-cell ，HTML 表格单元格默认属性）\n- 表格标题（元素具有 display: table-caption，HTML 表格标题默认属性）\n- 具有 overflow 且值不是 visible 的块元素\n- 弹性盒子（flex 或 inline-flex）\n- ` css display: flow-root`\n- `css column-span: all`\n\n## BFC 作用\n\n- 利用 BFC 避免 margin 重叠\n- 自适应两栏布局\n- 清除浮动\n","slug":"interview/css/BFC"},{"data":{"date":"May 19, 2020","title":"理解函数的执行过程","tags":["javascript"],"fromNow":"2 years ago"},"content":"","slug":"javascript/advance/理解函数的执行过程"},{"data":{"date":"February 10, 2019","title":"online&offline","tags":["javascript"],"description":"当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发","fromNow":"3 years ago"},"content":"\n> 当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发，并冒泡到 document 和 window。可使用 window、document、document.body、添加监听事件`addEventListener`。\n\n## 使用方法\n\n```javascript\n//网络状态\nwindow.addEventListener('load', () => {\n  const updateOnlineStatus = () => {\n    this.online = navigator.onLine;\n  };\n\n  window.addEventListener('online', updateOnlineStatus);\n  window.addEventListener('offline', updateOnlineStatus);\n});\n```\n","slug":"apis/online-offline"},{"data":{"date":"May 21, 2020","title":"Go-HelloWorld","tags":["go"],"fromNow":"2 years ago"},"content":"\n## 搭建开发环境\n\n让我们创建一个目录，在该目录中编写我们的 hello world 程序。打开终端并运行以下命令。\n\n```shell\nmkdir ~/Documents/learngo/\n```\n\n上面的命令将 learngo 在当前用户的 Documents 目录中创建一个名为目录。\n\n### 你好，世界\n\n使用您喜欢的文本编辑器 main.go 在 learngo 目录中创建一个名为以下内容的文件。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello World\")\n}\n```\n\n按照 Go 中的约定，将包含 main 函数的文件命名为 main.go。\n\n### 运行程序\n\n1. go install\n\n```shell\ncd ~/Documents/learngo/\ngo install\n#此命令将编译程序并将编译好的二进制文件复制到~/go/bin内\nls -al ~/go/bin/\n\n~/go/bin/learngo\n#输出hello world\n```\n\n2. go build\n\n```shell\ncd ~/Documents/learngo/\ngo build\n#上面的命令将learngo在当前目录中创建一个二进制文件。ls -al将显示learngo已创建一个名为的文件。\n./learngo\n#输出Hello World\n```\n\n3. go run\n\ncd ~/Documents/learngo/在终端中键入命令以将当前目录更改为 learngo。\n\n```shell\ngo run main.go\nHello World\n#go run和go build/go install命令之间的细微差别是，go run需要.go文件名作为参数。\n```\n\ngo run 工作原理非常相似 go build。无需将程序编译并安装到当前目录，而是将文件编译到一个临时位置并从该位置运行文件。如果您想知道 go run 将文件编译到的位置，请 go run 使用--work 参数运行。\n\n```shell\ngo run --work main.go\n```\n\n4. go playground\n\n<Gist gistLink=\"Manonicu/ef552d29300ffb0cd311d9cc8828bc6e\" />\n\n我们将简要讨论该程序的每一行的作用。\n\n- package main - 每个 go 文件必须以 package name 开始。\n- import \"fmt\" - import 语句用于导入其他软件\n\n  包\n\n- func main（）- func 关键字标记函数的开始。\n- fmt.Println（\"H​​ello World\"）\n","slug":"go/第一个Go程序"}]},"__N_SSG":true}