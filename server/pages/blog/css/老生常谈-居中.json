{"pageProps":{"data":{"date":"May 4, 2016","title":"老生常谈-居中","tags":["css"],"description":"几种居中的方法","fromNow":"6 years ago"},"content":{"compiledSource":"var o=Object.defineProperty,l=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var i=(e,a,t)=>a in e?o(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,s=(e,a)=>{for(var t in a||(a={}))r.call(a,t)&&i(e,t,a[t]);if(p)for(var t of p(a))c.call(a,t)&&i(e,t,a[t]);return e},m=(e,a)=>l(e,d(a));var g=(e,a)=>{var t={};for(var n in e)r.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(e!=null&&p)for(var n of p(e))a.indexOf(n)<0&&c.call(e,n)&&(t[n]=e[n]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:e}=n,a=g(n,[\"components\"]);return mdx(MDXLayout,m(s(s({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u6C34\\u5E73\\u5C45\\u4E2D\"),mdx(\"h3\",null,\"Text\"),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-css\"}),`p {\n  text-align: center;\n}\n`)),mdx(\"h3\",null,\"Blocks\"),mdx(\"p\",null,mdx(\"img\",s({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190125091332.png\",alt:\"image\"}))),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-css\"}),`/*flexbox*/\n#mysection {\n  display: flex;\n  justify-content: center;\n}\n\n/*margin*/\n#mysection {\n  margin: 0 auto;\n  width: 50%;\n}\n`)),mdx(\"h2\",null,\"\\u5782\\u76F4\\u5C45\\u4E2D\"),mdx(\"h3\",null,\"Text\"),mdx(\"p\",null,mdx(\"img\",s({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190125092037.png\",alt:\"image\"}))),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-css\"}),`#mysection {\n  display: flex;\n  align-items: center;\n}\n`)),mdx(\"h2\",null,\"\\u6C34\\u5E73\\u5782\\u76F4\\u5C45\\u4E2D\"),mdx(\"p\",null,mdx(\"img\",s({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190125091735.png\",alt:\"image\"}))),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-css\"}),`/*flex*/\n#mysection {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n/*grid*/\nbody {\n  display: grid;\n  place-items: center;\n  height: 100vh;\n}\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 4, 2016","title":"老生常谈-居中","tags":["css"],"description":"几种居中的方法","fromNow":"6 years ago"}},"randomPost":[{"data":{"date":"December 21, 2020","title":"Macos Docker安装","tags":["docker"],"fromNow":"a year ago"},"content":"\n## brew 安装 docker\n\n```shell\n#搜索\n==> Formulae\ndocker                          docker-credential-helper        docker-machine-completion       docker-machine-nfs              docker2aci\ndocker-clean                    docker-credential-helper-ecr    docker-machine-driver-hyperkit  docker-machine-parallels        dockerize\ndocker-completion               docker-gen                      docker-machine-driver-vmware    docker-slim                     lazydocker\ndocker-compose                  docker-ls                       docker-machine-driver-vultr     docker-squash\ndocker-compose-completion       docker-machine                  docker-machine-driver-xhyve     docker-swarm\n==> Casks\ndocker\n\n#安装\nbrew install docker\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/bottles/docker-19.03.14.big_sur.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring docker-19.03.14.big_sur.bottle.tar.gz\n==> Caveats\nzsh completions have been installed to:\n  /usr/local/share/zsh/site-functions\n==> Summary\n🍺  /usr/local/Cellar/docker/19.03.14: 14 files, 71.6MB\n```\n\n## 手动安装\n\n下载[Stable](https://download.docker.com/mac/stable/Docker.dmg)，双击安装\n\n![PVr5uh](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/PVr5uh.jpg)\n\n安装完成后，通过命令检查 Docker 版本\n\n```shell\ndocker --version\n\nDocker version 19.03.14, build 5eb3275\n```\n\n## 镜像加速\n\n![NAWFnd](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/NAWFnd.png)\n\n## 更多\n","slug":"docker/Macos安装Docker"},{"data":{"date":"December 10, 2021","title":"Formatting","tags":["python"],"description":"输出格式化","fromNow":"5 days ago"},"content":"\n当输出数据时，我们希望能够按照一定的格式输出，这个时候就可以使用 format()函数。比如：\n\n```python\n      Name      Shares        Price\n----------  ----------  -----------\n        AA         100        32.20\n       IBM          50        91.10\n       CAT         150        83.44\n      MSFT         200        51.23\n        GE          95        40.37\n      MSFT          50        65.10\n       IBM         100        70.44\n```\n\n## 字符输出格式化\n\n在`python 3.6+`使用`f-strings`格式化字符串，如下：\n\n```python\nname = 'IBM'\nshares = 100\nprice = 91.1\nf'{name:>10s} {shares:>10d} {price:>10.2f}'\n#'       IBM        100      91.10'\n\n# 通常配合 print()函数使用，如下：\nprint(f'{name:>10s} {shares:>10d} {price:>10.2f}')\n```\n\n## 格式化代码\n\n格式代码(在`{}`中`:` 之后)类似于 c `printf ()`。常见代码包括:\n\n```python\nd       # 整数\nb       # 十六进制\nx       # 十六进制\nf       # 浮点数\ne       # 指数\ng       # 指数或浮点数\ns       # 字符串\nc       # 字符\n```\n\n常用的修饰符调整字段宽度和十进制精度。这是一个部分列表:\n\n```python\n:>10d   # 宽度为10，十进制精度无限制\n:<10d   # 宽度为10，十进制精度无限制\n:^10d   # 宽度为10，十进制精度无限制\n:0.2f   # 宽度为无限制，十进制精度为2\n```\n\n## 字典格式化\n\n使用`format_map`函数可以将字典中的键和值对应输出，如下：\n\n```python\ns = {\n    'name': 'IBM',\n    'shares': 100,\n    'price': 91.1\n}\n'{name:>10s} {shares:10d} {price:10.2f}'.format_map(s)\n#'       IBM        100      91.10'\n```\n\n## format()函数\n\n```python\n'{name:>10s} {shares:10d} {price:10.2f}'.format(name='IBM', shares=100, price=91.1)\n#'       IBM        100      91.10'\n'{:10s} {:10d} {:10.2f}'.format('IBM', 100, 91.1)\n#'       IBM        100      91.10'\n```\n\n## C 语言格式化\n\n使用`%`可以格式化字符串，如下：\n\n```python\n'The value is %d' % 3\n#'The value is 3'\n'%5d %-5d %10d' % (3,4,5)\n#'    3 4              5'\n'%0.2f' % (3.1415926,)\n#'3.14'\n```\n","slug":"python/2.3-formatting"},{"data":{"date":"October 12, 2020","title":"Linux命令ping","tags":["linux"],"description":"ping命令用于检测主机","fromNow":"a year ago"},"content":"\nLinux ping 命令用于检测主机。\n\n执行 ping 指令会使用 ICMP 传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。\n\n如下是 ping baidu.com：\n\n![XimNX7](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/XimNX7.png)\n\n**ping**发出请求到对应的主机，主机返回结果。\n\n默认情况**ping**会每秒发出请求，直到使用**ctrl+c**中断，也可以使用-c times 指定接收包的次数，如：\n\n```shell\nping -c 2 baidu.com\n```\n\n当结束**ping**命令时，屏幕上会打印出统计结果，其中包括丢包率以及速率\n\n```shell\nping -i 3 -s 1024 -t 255 baidu.com\n\n# -i 3 发送周期为 3秒 -s 设置发送包的大小 -t 设置TTL值为 255\n```\n\n## 参数\n\n- -d 使用 Socket 的 SO_DEBUG 功能。\n- -c<完成次数> 设置完成要求回应的次数。\n- -f 极限检测。\n- -i<间隔秒数> 指定收发信息的间隔时间。\n- -I<网络界面> 使用指定的网络接口送出数据包。\n- -l<前置载入> 设置在送出要求信息之前，先行发出的数据包。\n- -n 只输出数值。\n- -p<范本样式> 设置填满数据包的范本样式。\n- -q 不显示指令执行过程，开头和结尾的相关信息除外。\n- -r 忽略普通的 Routing Table，直接将数据包送到远端主机上。\n- -R 记录路由过程。\n- -s<数据包大小> 设置数据包的大小。\n- -t<存活数值> 设置存活数值 TTL 的大小。\n- -v 详细显示指令的执行过程。\n","slug":"linux/Linux命令-ping"},{"data":{"date":"November 26, 2021","title":"Lists","tags":["python"],"description":"列表（List）是 python 的基本类型","fromNow":"19 days ago"},"content":"\n## 创建列表\n\n```python\nnames = ['Michael', 'Bob', 'Tracy']\nnums = [1, 2, 3]\n```\n\n也可以使用其他方法`split()`创建\n\n```python\nline = 'Hello World!'\nrow = line.split(' ')\nrow # ['Hello', 'World!']\n```\n\n## 列表操作\n\n```python\nnames.append('Adam') # 在末尾添加元素\nnames.insert(1, 'Jack') # 在指定位置添加元素\n```\n\n使用`+`连接两个列表\n\n```python\ns=[1,2,3]\nt=[4,5,6]\ns+t # [1,2,3,4,5,6]\n```\n\n列表索引从 0 开始\n\n```python\nnames = ['Michael', 'Bob', 'Tracy']\nnames[0] # Michael\nnames[1] # Bob\nnames[-1] # Tracy\n```\n\n使用索引覆盖元素\n\n```python\nnames[0] = 'Adam' # 修改第一个元素\nnames # ['Adam', 'Bob', 'Tracy']\n```\n\n使用`len`获取列表长度\n\n```python\nlen(names) # 3\n```\n\n使用`in`判断元素是否在列表中\n\n```python\n'Adam' in names # True\n'manon' in names # False\n```\n\n## 列表的循环\n\n使用`for`循环遍历列表\n\n```python\nfor name in names:\n    print(name)\n```\n\n查找索引值\n\n```python\nnames.index('Bob') # 1\n```\n\n## 移除元素\n\n使用`del`或`remove`删除元素\n\n```python\nnames.remove('Bob') # 删除第一个 Bob\ndel names[0] # 删除第一个元素\n```\n\n## 列表的排序\n\n使用`sort`对列表进行排序\n\n```python\ns = [10, 1, 7, 3]\ns.sort()                    # [1, 3, 7, 10]\n\n# Reverse order\ns = [10, 1, 7, 3]\ns.sort(reverse=True)        # [10, 7, 3, 1]\n\n# It works with any ordered data\ns = ['foo', 'bar', 'spam']\ns.sort()                    # ['bar', 'foo', 'spam']\n```\n\n使用`sorted`创建新的列表，不会修改原列表\n\n```python\nt = sorted(s)\n```\n","slug":"python/1.4-list"},{"data":{"date":"October 19, 2020","title":"css-BFC","tags":["css"],"fromNow":"a year ago"},"content":"\n## 什么是 BFC\n\nBlock Formatting Context（块级格式化上下文）\n\n> Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域\n\n## 布局规则\n\n- 内部的 Box 会在垂直方向一个接一个地放置\n- Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠\n- 每个盒子（块盒与行盒）的 margin box 的左边，与包含块 border box 的左边相接触，即使存在浮动也是如此\n- BFC 的区域不会与 float box 重叠\n- BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响外面的元素。反之也是如此\n- 计算 BFC 的高度时，浮动元素也参与计算\n\n## 如何创建 BFC\n\n- 根元素或其他包含他的元素\n- 浮动元素（元素的 float 不是 none）\n- 绝对定位元素（元素具有 position 为 absolute 或 fixed）\n- 内联块（元素具有 display: inline-block）\n- 表格单元格（元素具有 display: table-cell ，HTML 表格单元格默认属性）\n- 表格标题（元素具有 display: table-caption，HTML 表格标题默认属性）\n- 具有 overflow 且值不是 visible 的块元素\n- 弹性盒子（flex 或 inline-flex）\n- ` css display: flow-root`\n- `css column-span: all`\n\n## BFC 作用\n\n- 利用 BFC 避免 margin 重叠\n- 自适应两栏布局\n- 清除浮动\n","slug":"interview/css/BFC"},{"data":{"date":"May 10, 2018","title":"Boolean","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nBoolean 有两个值 true/false。\n\n| 数据类型  | 转换为 true 的值 | 转换为 false 的值 |\n| --------- | ---------------- | ----------------- |\n| Boolean   | true             | false             |\n| String    | 任意飞空字符串   | 空字符串          |\n| Number    | 任何非零值       | 0 和 NaN          |\n| Object    | 任何对象         | null              |\n| Undefined |                  | undefined         |\n","slug":"javascript/base/Boolean"}]},"__N_SSG":true}