{"pageProps":{"data":{"date":"May 19, 2020","title":"MacbookPro-前端开发环境配置","tags":["i18n"],"fromNow":"2 years ago"},"content":{"compiledSource":"var o=Object.defineProperty,s=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var u=(l,e,a)=>e in l?o(l,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):l[e]=a,n=(l,e)=>{for(var a in e||(e={}))p.call(e,a)&&u(l,a,e[a]);if(t)for(var a of t(e))r.call(e,a)&&u(l,a,e[a]);return l},m=(l,e)=>s(l,c(e));var N=(l,e)=>{var a={};for(var i in l)p.call(l,i)&&e.indexOf(i)<0&&(a[i]=l[i]);if(l!=null&&t)for(var i of t(l))e.indexOf(i)<0&&r.call(l,i)&&(a[i]=l[i]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var i=a,{components:l}=i,e=N(i,[\"components\"]);return mdx(MDXLayout,m(n(n({},layoutProps),e),{components:l,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"img\",n({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20200427135628.png\",alt:null}))),mdx(\"p\",null,\"\\u8FD9\\u662F\\u4E00\\u4EFD\\u4E3A Web \\u5F00\\u53D1\\u51C6\\u5907\\u7684 Mac \\u914D\\u7F6E\\u6307\\u5357\\uFF0C\\u5305\\u62EC\\u63A8\\u8350\\u5DE5\\u5177\\uFF0C\\u5FEB\\u6377\\u65B9\\u5F0F\\uFF0C\\u6280\\u5DE7\\u7B49\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"macOS Settings\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"System preferences\"),mdx(\"li\",{parentName:\"ul\"},\"Finder\"),mdx(\"li\",{parentName:\"ul\"},\"Screenshot\"))),mdx(\"li\",{parentName:\"ul\"},\"macOS Shortcuts\"),mdx(\"li\",{parentName:\"ul\"},\"Command-line Tools\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"Homebrew\"),mdx(\"li\",{parentName:\"ul\"},\"iTerm2\"),mdx(\"li\",{parentName:\"ul\"},\"Git\"),mdx(\"li\",{parentName:\"ul\"},\"Zsh\"),mdx(\"li\",{parentName:\"ul\"},\"Oh My Zsh\"),mdx(\"li\",{parentName:\"ul\"},\"Node.js\"),mdx(\"li\",{parentName:\"ul\"},\"Docker\"),mdx(\"li\",{parentName:\"ul\"},\"tldr\"),mdx(\"li\",{parentName:\"ul\"},\"htop\"),mdx(\"li\",{parentName:\"ul\"},\"fzf\"),mdx(\"li\",{parentName:\"ul\"},\"ripgrep\"),mdx(\"li\",{parentName:\"ul\"},\"path-extractor\"),mdx(\"li\",{parentName:\"ul\"},\"lnav\"))),mdx(\"li\",{parentName:\"ul\"},\"MacOS Applications\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"Visual Studio Code\"),mdx(\"li\",{parentName:\"ul\"},\"Rectangle\"),mdx(\"li\",{parentName:\"ul\"},\"GIMP\"),mdx(\"li\",{parentName:\"ul\"},\"LICEcap\"),mdx(\"li\",{parentName:\"ul\"},\"Alfred\"),mdx(\"li\",{parentName:\"ul\"},\"Numi\"))),mdx(\"li\",{parentName:\"ul\"},\"Tips and Tricks\")))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 19, 2020","title":"MacbookPro-前端开发环境配置","tags":["i18n"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"November 2, 2020","title":"Linux命令export","tags":["linux"],"description":"export用于设置或显示环境变量。","fromNow":"a year ago"},"content":"\n**export**用于设置或显示环境变量。\n\n## 使用方法\n\n```shell\nexport TEST=\"test\"\n# TEST代表变量名，test代表变量值\n\nexport -n TEST\n#-n参数代表一出TEST变量\n```\n\n## 参数：\n\n- -f 　代表[变量名称]中为函数名称。\n- -n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。\n- -p 　列出所有的 shell 赋予程序的环境变量。\n","slug":"linux/Linux命令-export"},{"data":{"date":"January 19, 2020","title":"使用js获取位置","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":"\n![quick-tip-detecting-your-location-with-javascript](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190121163457.png)\n\n首先，我们使用 caniuse-cmd 查看下 geolocation 的兼容性,几乎所有的现代浏览器都支持 geolocation\n\nGeolocation 通过使用 GPS、WIFI、IP 地址检测自己的位置信息，开发人员可使用这些信息给用户提供更好的搜索建议，比如附近的便利店，并实现互动。\n\n本地资源（location sources） JavaScript 提供了一个简单，但功能强大的工具来定位设备的地理定位 API 的形式。它包括一个小的一组易于使用的方法，可以获得设备的位置：\n\nGPS-主要在移动设备，精确到 10 米 WIFI-几乎所有的联网设备 IP-仅限于区域，备选方案采用哪种方案取决于浏览器支持，一般情况下 WIFI 快于 GPS 快于 IP\n\n使用 geolocation api 通过使用 caniuse-cmd，我们知道大部分浏览器支持 geolocation，但我们需要做好判断，请确保可以正常使用 geolocation\n\n```javascript\nif (navigator.geolocation) {\n  // 支持geolocation\n} else {\n  // 不支持geolocation\n}\n```\n\nnavigator.geolocation 有如下几个方法：\n\n- Geolocation.getCurrentPosition() //获取当前位置\n- Geolocation.watchPosition() //监测定位\n- Geolocation.clearWatch() //清除监测\n\ngetCurrentPosition() and watchPosition() methods 的工作方式是基本相同的。这两方法目的基本相同，都是用来去获取 device 的位置信息吧， 都是以一个异步的工作形式来获取位置信息的， 他们也都依赖于一个 attempt call 的结果\n\n```javascript\nnavigator.geolocation.getCurrentPosition(\n\n    // 位置获取成功\n    function(position) {\n\n        position = {\n            coords: {\n                latitude - //纬度.\n                longitude - //经度.\n                altitude - //高度.\n                accuracy - //精确度.\n                altitudeAccuracy - //高度的准确性.\n                heading - //.\n                speed - //.\n            }\n            timestamp - //时间戳.\n        }\n\n    },\n\n    // 位置获取失败\n    function(error){\n\n    }\n);\n```\n\n如上，使用 geolocation api 很简单，只需要正确调用方法，等待返回坐标即可。\n\n用户权限由于 geolocation api 会暴露用户信息，所以当应用程序访问的时候，将以弹窗请求用户操作，如下\n\n主机安全另一个保护措施是使用 HTTPS 连接。由于一个新的网络安全策略，谷歌浏览器（桌面版和手机版）不再允许非安全的主机上运行的 geolocation api。使用 https 可以最大限度的减少数据信息的盗用或被滥用的风险。\n\n这里查看更多关于这个问题。\n\n```javascript\n一个简单的Demo;\nfindMeButton.on('click', function () {\n  navigator.geolocation.getCurrentPosition(function (position) {\n    // Get the coordinates of the current position.\n    var lat = position.coords.latitude;\n    var lng = position.coords.longitude;\n\n    // Create a new map and place a marker at the device location.\n    var map = new GMaps({\n      el: '#map',\n      lat: lat,\n      lng: lng,\n    });\n\n    map.addMarker({\n      lat: lat,\n      lng: lng,\n    });\n  });\n});\n```\n\n[在线 demo](https://jsfiddle.net/dannymarkov/ubrvm4ao/ 'https://jsfiddle.net/dannymarkov/ubrvm4ao/')\n\n翻译自[Detecting Your Location With JavaScript](http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/ 'http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/')\n","slug":"translate/使用js获取位置"},{"data":{"date":"October 19, 2019","title":"安装mongodb","tags":["server"],"fromNow":"2 years ago"},"content":"\n## 安装 mongodb\n\n## 添加 mongodb 源\n\n```bash\nsudo vi /etc/yum.repos.d/mongodb-org.repo\n\n\n[mongodb-org-3.4]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc\n```\n\n```bash\nyum repolist\n```\n\n## 安装 mongodb\n\n```bash\nsudo yum install mongodb-org\n\n启动\nsudo systemctl start mongod\n\n重载\nsudo systemctl reload mongod\n\n停止\nsudo systemctl stop mongod\n\n重启\nsudo systemctl restart mongod\n\n加入自启\nsudo systemctl enable mongod\n\n检查状态\nsystemctl status mongod\n\n```\n","slug":"server/安装mongodb"},{"data":{"date":"May 7, 2018","title":"Undefined","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nUndefined 类型只有一个值-undefined，即声明变量但未赋值，这个变量的值就是 undefined。\n\n```javascript\nvar a;\nconsole.log(a == undefined); //true\nconsole.log(typeof a); //\"undefined\"\n```\n\n> 对未初始化的变量和未声明的变量执行 typeof 都会返回 undefined\n","slug":"javascript/base/Undefined"},{"data":{"date":"May 11, 2018","title":"Null","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nNull 和 Undefined 一样，只有一个值，就是 null\n\nnull 表示空对象指针，使用 typeof null 会返回 object\n\nnull 与 undefined 的区别\n\n```javascript\ntypeof null; //object\ntypeof undefined; //undefined\n\nnull == undefined;\nnull !== undefined;\n```\n","slug":"javascript/base/Null"},{"data":{"date":"May 19, 2020","title":"闭包","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## 什么是闭包\n\n作用：能够在函数定义的作用域外，使用函数定义作用域内的局部变量，并且不会污染全局。\n\n原理：基于词法作用域链和垃圾回收机制，通过维持函数作用域的引用，让函数作用域可以在当前作用域外被访问到\n\n```javascript\nfunction foo() {\n  var a = 'hzfe';\n  function bar() {\n    console.log(a);\n  }\n  return bar;\n}\n\nvar baz = foo();\nbaz(); // hzfe\n```\n\n在这个例子中，函数 bar 作为返回值返回后，在自己定义的词法作用域以外的地方执行。一般来说，在函数 foo 执行后，通常会期待函数 foo 的整个内部作用域被引擎回收机制销毁。而闭包可以阻止这件事情的发生。事实上内部作用域依然存在，因为函数 bar 本身在使用，所以并不会被回收。\n\n在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\n\n## 闭包的应用\n\n无论何时何地，如果将函数作为返回值，就会看到闭包在这些函数中的应用。在定时器，事件监听器，ajax 请求，跨窗口通信，web workers 或者任何其他的异步/同步任务中，只要使用了回调函数，实际上就是使用闭包。使用闭包的例子可以参考实现节流防抖函数。\n\n```javascript\nvar a = 'hzfe';\n(function IIFE() {\n  console.log(a);\n})();\n```\n\n通常认为立即执行函数（IIFE）是典型的观察闭包的典型例子，但严格来说并不是。虽然创建了闭包，但没有体现出闭包的作用。因为函数并不是在它本身的词法作用域以外执行的。 它在定义时所在的作用域中执行，而非外部作用域。\n\n## 扩展\n\n- [闭包 MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n- [垃圾回收机制](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/Closed_Overlay_Requires_Arguments)\n- [你不知道的 JavaScript](https://www.imooc.com/article/2907)\n","slug":"javascript/advance/闭包"}]},"__N_SSG":true}