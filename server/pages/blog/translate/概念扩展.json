{"pageProps":{"data":{"date":"December 19, 2019","title":"JS概念扩展","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":{"compiledSource":"var n=Object.defineProperty,r=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var c=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var b=(o,t,e)=>t in o?n(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e,a=(o,t)=>{for(var e in t||(t={}))u.call(t,e)&&b(o,e,t[e]);if(c)for(var e of c(t))l.call(t,e)&&b(o,e,t[e]);return o},k=(o,t)=>r(o,h(t));var q=(o,t)=>{var e={};for(var p in o)u.call(o,p)&&t.indexOf(p)<0&&(e[p]=o[p]);if(o!=null&&c)for(var p of c(o))t.indexOf(p)<0&&l.call(o,p)&&(e[p]=o[p]);return e};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(e){var p=e,{components:o}=p,t=q(p,[\"components\"]);return mdx(MDXLayout,k(a(a({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u539F\\u59CB\\u503C\\u548C\\u5F15\\u7528\\u503C\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u4E86\\u89E3\\u5982\\u4F55\\u5C06\\u5BF9\\u8C61\\uFF0C\\u6570\\u7EC4\\u548C\\u51FD\\u6570\\u590D\\u5236\\u5E76\\u4F20\\u9012\\u7ED9\\u51FD\\u6570\\u3002\\u8981\\u77E5\\u9053\\u5F15\\u7528\\u65F6\\u590D\\u5236\\u4E86\\u4EC0\\u4E48\\u3002\\u7406\\u89E3\\u539F\\u59CB\\u503C\\u662F\\u901A\\u8FC7\\u590D\\u5236\\u503C\\u6765\\u8FDB\\u884C\\u590D\\u5236\\u548C\\u4F20\\u9012\\u7684\\u3002\")),mdx(\"h2\",null,\"\\u4F5C\\u7528\\u57DF\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u4E86\\u89E3\\u5168\\u5C40\\u4F5C\\u7528\\u57DF\\uFF0C\\u51FD\\u6570\\u4F5C\\u7528\\u57DF\\u548C\\u5757\\u4F5C\\u7EA7\\u7528\\u57DF\\u4E4B\\u95F4\\u7684\\u533A\\u522B\\u3002\\u4E86\\u89E3\\u54EA\\u4E9B\\u53D8\\u91CF\\u5728\\u54EA\\u4E9B\\u5730\\u65B9\\u53EF\\u7528\\u3002\\u77E5\\u9053 JavaScript \\u5F15\\u64CE\\u5982\\u4F55\\u6267\\u884C\\u53D8\\u91CF\\u67E5\\u627E\\u3002\")),mdx(\"h2\",null,\"\\u63D0\\u5347\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u7406\\u89E3\\u53D8\\u91CF\\u548C\\u51FD\\u6570\\u58F0\\u660E\\u4F1A\\u88AB\\u63D0\\u5347\\u5230\\u53EF\\u7528\\u4F5C\\u7528\\u57DF\\u7684\\u9876\\u90E8\\u3002 \\u7406\\u89E3\\u51FD\\u6570\\u8868\\u8FBE\\u5F0F\\u4E0D\\u4F1A\\u88AB\\u63D0\\u5347\\u3002\")),mdx(\"h2\",null,\"\\u95ED\\u5305\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u77E5\\u9053\\u4E00\\u4E2A\\u51FD\\u6570\\u4FDD\\u7559\\uFF0C\\u5E76\\u4E14\\u53EF\\u4EE5\\u8BBF\\u95EE\\u521B\\u5EFA\\u5B83\\u7684\\u4F5C\\u7528\\u57DF\\u3002\\u77E5\\u9053\\u8FD9\\u4E9B\\u53EF\\u4EE5\\u8BA9\\u6211\\u4EEC\\u505A\\u4EC0\\u4E48\\uFF0C\\u4F8B\\u5982\\u6570\\u636E\\u9690\\u85CF\\u3001\\u5185\\u5B58\\u5316\\u4EE5\\u53CA\\u52A8\\u6001\\u51FD\\u6570\\u751F\\u6210\\u3002\")),mdx(\"h2\",null,\"this\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u77E5\\u9053 this \\u7ED1\\u5B9A\\u7684\\u89C4\\u5219\\u3002\\u77E5\\u9053\\u5B83\\u7684\\u5DE5\\u4F5C\\u673A\\u5236\\uFF0C\\u77E5\\u9053\\u5982\\u4F55\\u5F04\\u6E05\\u695A\\u5728\\u4E00\\u4E2A\\u51FD\\u6570\\u4E2D\\u5B83\\u7B49\\u540C\\u4E8E\\u4EC0\\u4E48\\uFF0C\\u6216\\u8005\\u8BF4\\u6307\\u5411\\u4EC0\\u4E48\\uFF1F\\u5E76\\u77E5\\u9053\\u4E3A\\u4EC0\\u4E48\\u5B83\\u662F\\u6709\\u7528\\u7684\\u3002\")),mdx(\"h2\",null,\"new\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u77E5\\u9053\\u5B83\\u5982\\u4F55\\u4E0E\\u9762\\u5411\\u5BF9\\u8C61\\u7F16\\u7A0B\\u76F8\\u5173\\u3002\\u77E5\\u9053\\u7528 new \\u8C03\\u7528\\u7684\\u51FD\\u6570\\u4F1A\\u53D1\\u751F\\u4EC0\\u4E48\\u3002\\u7406\\u89E3\\u5982\\u4F55\\u4F7F\\u7528 new \\u6765\\u7EE7\\u627F\\u51FD\\u6570 prototype(\\u539F\\u578B) \\u5C5E\\u6027\\u751F\\u6210\\u7684\\u5BF9\\u8C61\\u3002\")),mdx(\"h2\",null,\"apply\\u3001call\\u3001bind\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u77E5\\u9053\\u8FD9\\u4E9B\\u51FD\\u6570\\u7684\\u5DE5\\u4F5C\\u673A\\u5236\\u3002 \\u77E5\\u9053\\u5982\\u4F55\\u4F7F\\u7528\\u5B83\\u4EEC\\u3002\\u4E86\\u89E3\\u5B83\\u4EEC\\u5BF9 this \\u505A\\u4E86\\u4EC0\\u4E48\\u3002\")),mdx(\"h2\",null,\"\\u539F\\u578B\\u548C\\u7EE7\\u627F\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u4E86\\u89E3 JavaScript \\u4E2D\\u7684\\u7EE7\\u627F\\u662F\\u901A\\u8FC7 [\",\"[Prototype]\",\"] \\u94FE\\u5B9E\\u73B0\\u7684\\u3002\\u4E86\\u89E3\\u5982\\u4F55\\u901A\\u8FC7\\u51FD\\u6570\\u548C\\u5BF9\\u8C61\\u6765\\u8BBE\\u7F6E\\u7EE7\\u627F\\uFF0C\\u4EE5\\u53CA new \\u662F\\u5982\\u4F55\\u5E2E\\u52A9\\u6211\\u4EEC\\u5B9E\\u73B0\\u7684\\u3002\\u77E5\\u9053 \",mdx(\"strong\",{parentName:\"p\"},\"proto\"),\" \\u548C prototype \\u5C5E\\u6027\\u662F\\u4EC0\\u4E48\\uFF0C\\u4EE5\\u53CA\\u4ED6\\u4EEC\\u7684\\u4F5C\\u7528\\u3002\")),mdx(\"h2\",null,\"\\u5F02\\u6B65\\u548C\\u540C\\u6B65\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u7406\\u89E3\\u4E8B\\u4EF6\\u5FAA\\u73AF\\uFF0C\\u7406\\u89E3\\u6D4F\\u89C8\\u5668\\u662F\\u5982\\u4F55\\u5904\\u7406\\u7528\\u6237\\u8F93\\u5165\\u3001Web \\u8BF7\\u6C42\\u548C\\u4E00\\u822C\\u4E8B\\u4EF6\\u7684\\u3002\\u77E5\\u9053\\u5982\\u4F55\\u8BC6\\u522B\\u5E76\\u6B63\\u786E\\u5B9E\\u73B0\\u5F02\\u6B65\\u4EE3\\u7801\\u3002\\u7406\\u89E3 JavaScript \\u4E2D\\u5F02\\u6B65\\u548C\\u5355\\u7EBF\\u7A0B\\u5206\\u522B\\u662F\\u600E\\u6837\\u7684\\u3002\")),mdx(\"h2\",null,\"\\u9AD8\\u9636\\u51FD\\u6570\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u7406\\u89E3\\u8FD9\\u4E9B\\u51FD\\u6570\\u662F JavaScript \\u4E2D\\u7684\\u4E00\\u7B49\\u516C\\u6C11\\uFF0C\\u4EE5\\u53CA\\u8FD9\\u610F\\u5473\\u7740\\u4EC0\\u4E48\\u3002 \\u77E5\\u9053\\u4ECE\\u53E6\\u4E00\\u4E2A\\u51FD\\u6570\\u8FD4\\u56DE\\u4E00\\u4E2A\\u51FD\\u6570\\u662F\\u5B8C\\u5168\\u5408\\u6CD5\\u7684\\u3002 \\u4E86\\u89E3\\u95ED\\u5305\\u548C\\u66F4\\u9AD8\\u9636\\u51FD\\u6570\\u5141\\u8BB8\\u6211\\u4EEC\\u4F7F\\u7528\\u7684\\u6280\\u5DE7\")))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"December 19, 2019","title":"JS概念扩展","tags":["i18n","javascript"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"July 30, 2017","title":"css的小技巧","tags":["css"],"fromNow":"4 years ago"},"content":"\n1. 使用 CSS 复位\n\n不同浏览器有不同的自带初始样式，通常可以使用 normalize.css、tinyreset.css 进行通配初始化。\n\n```css\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n```\n\n2. 继承 box-sizing\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n```\n\n3. 使用 unset 而不是重置所有属性\n4. 使用 :not() 选择器来决定表单是否显示边框\n5. 为 body 元素添加行高\n6. 為表單元素設置:focus\n7. 垂直居中任何元素\n8. 逗号分隔的列表\n9. 使用负的 nth-child 来选择元素\n10. 使用 SVG 图标\n11. 使用 “形似猫头鹰” 的选择器\n12. 使用 max-height 来建立纯 CSS 的滑块\n13. 创造格子等宽的表格\n14. 利用 Flexbox 去除多余的外边距\n15. 利用属性选择器来选择空链接\n16. 给 “默认” 链接定义样式\n17. 一致的垂直节奏\n18. 内在比例盒\n19. 为破碎图象定义样式\n20. 用 rem 来调整全局大小；用 em 来调整局部大小\n21. 隐藏没有静音、自动播放的影片\n22. 使用选择器 :root 来控制字体弹性\n23. 为更好的移动体验，为表单元素设置字体大小\n24. 使用指针事件來控制鼠标事件\n","slug":"css/小技巧-ChicksTricks"},{"data":{"date":"November 2, 2020","title":"Linux命令export","tags":["linux"],"description":"export用于设置或显示环境变量。","fromNow":"a year ago"},"content":"\n**export**用于设置或显示环境变量。\n\n## 使用方法\n\n```shell\nexport TEST=\"test\"\n# TEST代表变量名，test代表变量值\n\nexport -n TEST\n#-n参数代表一出TEST变量\n```\n\n## 参数：\n\n- -f 　代表[变量名称]中为函数名称。\n- -n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。\n- -p 　列出所有的 shell 赋予程序的环境变量。\n","slug":"linux/Linux命令-export"},{"data":{"date":"December 21, 2020","title":"Macos Docker安装","tags":["docker"],"fromNow":"a year ago"},"content":"\n## brew 安装 docker\n\n```shell\n#搜索\n==> Formulae\ndocker                          docker-credential-helper        docker-machine-completion       docker-machine-nfs              docker2aci\ndocker-clean                    docker-credential-helper-ecr    docker-machine-driver-hyperkit  docker-machine-parallels        dockerize\ndocker-completion               docker-gen                      docker-machine-driver-vmware    docker-slim                     lazydocker\ndocker-compose                  docker-ls                       docker-machine-driver-vultr     docker-squash\ndocker-compose-completion       docker-machine                  docker-machine-driver-xhyve     docker-swarm\n==> Casks\ndocker\n\n#安装\nbrew install docker\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/bottles/docker-19.03.14.big_sur.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring docker-19.03.14.big_sur.bottle.tar.gz\n==> Caveats\nzsh completions have been installed to:\n  /usr/local/share/zsh/site-functions\n==> Summary\n🍺  /usr/local/Cellar/docker/19.03.14: 14 files, 71.6MB\n```\n\n## 手动安装\n\n下载[Stable](https://download.docker.com/mac/stable/Docker.dmg)，双击安装\n\n![PVr5uh](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/PVr5uh.jpg)\n\n安装完成后，通过命令检查 Docker 版本\n\n```shell\ndocker --version\n\nDocker version 19.03.14, build 5eb3275\n```\n\n## 镜像加速\n\n![NAWFnd](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/NAWFnd.png)\n\n## 更多\n","slug":"docker/Macos安装Docker"},{"data":{"date":"May 19, 2020","title":"闭包","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## 什么是闭包\n\n作用：能够在函数定义的作用域外，使用函数定义作用域内的局部变量，并且不会污染全局。\n\n原理：基于词法作用域链和垃圾回收机制，通过维持函数作用域的引用，让函数作用域可以在当前作用域外被访问到\n\n```javascript\nfunction foo() {\n  var a = 'hzfe';\n  function bar() {\n    console.log(a);\n  }\n  return bar;\n}\n\nvar baz = foo();\nbaz(); // hzfe\n```\n\n在这个例子中，函数 bar 作为返回值返回后，在自己定义的词法作用域以外的地方执行。一般来说，在函数 foo 执行后，通常会期待函数 foo 的整个内部作用域被引擎回收机制销毁。而闭包可以阻止这件事情的发生。事实上内部作用域依然存在，因为函数 bar 本身在使用，所以并不会被回收。\n\n在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\n\n## 闭包的应用\n\n无论何时何地，如果将函数作为返回值，就会看到闭包在这些函数中的应用。在定时器，事件监听器，ajax 请求，跨窗口通信，web workers 或者任何其他的异步/同步任务中，只要使用了回调函数，实际上就是使用闭包。使用闭包的例子可以参考实现节流防抖函数。\n\n```javascript\nvar a = 'hzfe';\n(function IIFE() {\n  console.log(a);\n})();\n```\n\n通常认为立即执行函数（IIFE）是典型的观察闭包的典型例子，但严格来说并不是。虽然创建了闭包，但没有体现出闭包的作用。因为函数并不是在它本身的词法作用域以外执行的。 它在定义时所在的作用域中执行，而非外部作用域。\n\n## 扩展\n\n- [闭包 MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n- [垃圾回收机制](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/Closed_Overlay_Requires_Arguments)\n- [你不知道的 JavaScript](https://www.imooc.com/article/2907)\n","slug":"javascript/advance/闭包"},{"data":{"date":"May 12, 2018","title":"Object","tags":["javascript"],"fromNow":"4 years ago"},"content":"\n## Object\n\n> 任何非原始类型的值（字符串，数字，布尔值，符号，null 或未定义）都是对象，数组和函数也不例外。\n\n## 内置属性\n\n1. Object.length=1\n2. Object.prototype\n\n## 静态方法\n\n1. Object.assign() **_ES2015_** //通过复制一个或多个对象来创建一个新的对象。\n2. Object.create() //使用指定的原型对象和属性创建一个新对象。\n3. Object.defineProperty() //给对象添加一个属性并指定该属性的配置。\n4. Object.defineProperties() //给对象添加多个属性并分别指定它们的配置。\n5. Object.entries() **_ES2017_** //返回给定对象自身可枚举属性的 [key, value] 数组。\n6. Object.freeze() //冻结对象：其他代码不能删除或更改任何属性。\n7. Object.getOwnPropertyDescriptor() //返回对象指定的属性配置。\n8. Object.getOwnPropertyNames() //返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。\n9. Object.getOwnPropertySymbols() //返回一个数组，它包含了指定对象自身所有的符号属性。\n10. Object.getPrototypeOf() //返回指定对象的原型对象。\n11. Object.is() **_ES2015_** //比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。\n12. Object.isExtensible() //判断对象是否可扩展。\n13. Object.isFrozen() //判断对象是否已经冻结。\n14. Object.isSealed() //判断对象是否已经密封。\n15. Object.keys() //返回一个包含所有给定对象自身可枚举属性名称的数组。\n16. Object.preventExtensions() //防止对象的任何扩展。\n17. Object.seal() //防止其他代码删除对象的属性。\n18. Object.setPrototypeOf() **_ES2015_** //设置对象的原型（即内部 [[Prototype]] 属性）。\n19. Object.values() //返回给定对象自身可枚举值的数组。\n\n## Object 实例和 Object 原型对象\n\n> JavaScript 中的所有对象都来自 Object；所有对象从 Object.prototype 继承方法和属性，尽管它们可能被覆盖。\n\n```javascript\nObject.prototype.constructor; //特定的函数，用于创建一个对象的原型。\n```\n\n## 实例方法\n\n1. Object.prototype.hasOwnProperty() //返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。\n2. Object.prototype.isPrototypeOf() //返回一个布尔值，表示指定的对象是否在本对象的原型链中。\n3. Object.prototype.propertyIsEnumerable() //判断指定属性是否可枚举，内部属性设置参见 ECMAScript [[Enumerable]] attribute 。\n4. Object.prototype.toLocaleString() //直接调用 toString()方法。\n5. Object.prototype.toString() //返回对象的字符串表示。\n6. Object.prototype.valueOf() //返回指定对象的原始值。\n\n## 创建对象\n\n```javascript\nconst person = {};\ntypeof person; //object\n```\n\n### 使用 Object 全局函数\n\n```javascript\nconst person = Object();\ntypeof person; //object\n```\n\n### 使用 Object 构造器\n\n```javascript\nconst person = new Object();\ntypeof person; //object\n```\n\n### 使用 Object.create()\n\n```javascript\nconst car = Object.create();\n```\n\n```javascript\nconst person = {\n  age: 36,\n  name: 'funny',\n  speak: () => {\n    //speak\n  },\n};\n\nconst person = Object({\n  age: 36,\n  name: 'funny',\n  speak: () => {\n    //speak\n  },\n});\n\nconst person = new Object({\n  age: 36,\n  name: 'funny',\n  speak: () => {\n    //speak\n  },\n});\n```\n\n### Object.assign\n\n```javascript\nconst copied = Object.assign({}, target1, target2, ...target);\n```\n\n> Object.assign-将一个或多个对象的所有可枚举属性复制到另一个对象中。浅拷贝，复制对象引用而非对象本身。\n\n```javascript\nconst original = {\n  name: 'Fiesta',\n  car: {\n    color: 'blue',\n  },\n};\nconst copied = Object.assign({}, original);\n\noriginal.name = 'Focus';\noriginal.car.color = 'yellow';\n\ncopied.name; //Fiesta\ncopied.car.color; //yellow\n```\n\n### Object.create\n\n```javascript\nconst newObject = Object.create(prototype);\n\nconst newObject = Object.create(prototype, newProperties);\n```\n\n> 使用指定原型创建新的对象，可以指定第二个参数来向对象添加新属性\n\n```javascript\nconst animal = {};\nconst dog = Object.create(animal);\n\nconst animal = {};\nconst dog = Object.create(animal, {\n  breed: {\n    value: 'Siberian Husky',\n  },\n});\nconsole.log(dog.breed); //'Siberian Husky'\n```\n\n### Object.defineProperty\n\n> 直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象\n\n```javascript\nconst dog = {};\nObject.defineProperty(dog, 'breed', {\n  value: 'Siberian Husky',\n});\nconsole.log(dog.breed); //'Siberian Husky'\n```\n\n扩展：[vue 原理之-神奇的 Object.defineProperty](\"https://zhuanlan.zhihu.com/p/29066270\")\n\n### Object.defineProperties\n\n> 直接在一个对象上定义新的属性或修改现有属性，并返回该对象\n\n```javascript\nconst dog = {};\nObject.defineProperties(dog, {\n  breed: {\n    value: 'Siberian Husky',\n  },\n});\nconsole.log(dog.breed); //'Siberian Husky'\n```\n\n### Object.entries()\n\n> ES2017,返回自身可枚举属性的键值对数组\n\n```javascript\nconst person = { name: 'Fred', age: 87 };\nObject.entries(person); // [['name', 'Fred'], ['age', 87]]\n\nconst people = ['Fred', 'Tony'];\nObject.entries(people); // [['0', 'Fred'], ['1', 'Tony']]\n```\n\n### Object.freeze()\n\n> 冻结对象，冻结后不能再添加或修改\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nconst myDog = Object.freeze(dog);\n\nObject.isFrozen(dog); //true\nObject.isFrozen(myDog); //true\ndog === myDog; //true\n\ndog.name = 'Roger'; //TypeError: 无法添加name属性，dog是不可扩展的\n```\n\n### Object.getOwnPropertyDescriptor()\n\n> 返回自由属性描述符\n\n```javascript\nconst dog = {};\nObject.defineProperties(dog, {\n  breed: {\n    value: 'Siberian Husky',\n  },\n});\nObject.getOwnPropertyDescriptor(dog, 'breed');\n/*\n{\n  value: 'Siberian Husky',\n  writable: false,\n  enumerable: false,\n  configurable: false\n}\n*/\n```\n\n### Object.getOwnPropertyNames()\n\n> 返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\ndog.name = 'Roger';\n\nObject.getOwnPropertyNames(dog); //[ 'breed', 'name' ]\n```\n\n### Object.getOwnPropertySymbols()\n\n> 返回一个给定对象自身的所有 Symbol 属性的数\n\n```javascript\nconst dog = {};\nconst r = Symbol('Roger');\nconst s = Symbol('Syd');\ndog[r] = {\n  name: 'Roger',\n  age: 6,\n};\ndog[s] = {\n  name: 'Syd',\n  age: 5,\n};\n\nObject.getOwnPropertySymbols(dog); //[ Symbol(Roger), Symbol(Syd) ]\n```\n\n### Object.getPrototypeOf()\n\n> 返回指定对象的原型（内部[[Prototype]]属性的\n\n```javascript\nconst animal = {};\nconst dog = Object.create(animal);\nconst prot = Object.getPrototypeOf(dog);\n\nanimal === prot; //true\n\n//如果对象没有原型，将返回null\nObject.prototype; //{}\nObject.getPrototypeOf(Object.prototype); //null\n```\n\n### Object.is()\n\n> 判断两个值是否相等\n\n- 两个值都是 undefined\n- 两个值都是 null\n- 两个值都是 true 或者都是 false\n- 两个值是由相同个数的字符按照相同的顺序组成的字符串\n- 两个值指向同一个对象\n- 两个值都是数字并且\n  - 都是正零 +0\n  - 都是负零 -0\n  - 都是 NaN\n  - 都是除零和 NaN 外的其它同一个数字\n\n```javascript\nObject.is(a, b);\n```\n\n### Object.isExtensible()\n\n> 判断一个对象是否是可扩展的，返回布尔值。任何对象都是可扩展，除非使用了 Object.freeze()、Object.seal()、Object.preventExtensions()\n\n### Object.isFrozen()\n\n> 判断一个对象是否被冻结，返回布尔值\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nconst myDog = Object.freeze(dog);\nObject.isFrozen(dog); //true\nObject.isFrozen(myDog); //true\ndog === myDog; //true\n```\n\n### Object.isSealed()\n\n> 判断一个对象是否被密封，返回布尔值\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nconst myDog = Object.seal(dog);\nObject.isSealed(dog); //true\nObject.isSealed(myDog); //true\ndog === myDog; //true\n```\n\n### Object.keys()\n\n> 返回对象的自身可枚举属性组成的数组\n\n```javascript\nconst car = {\n  color: 'Blue',\n  brand: 'Ford',\n  model: 'Fiesta',\n};\n\nObject.keys(car); //[ 'color', 'brand', 'model' ]\n```\n\n### Object.preventExtensions()\n\n> 阻止对象扩展，但可以删除属性\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nObject.preventExtensions(dog);\n\ndog.name = 'Roger'; //TypeError: Cannot add property name, object is not extensible\n\ndelete dog.name;\ndog; //{ breed: 'Siberian Husky' }\n```\n\n### Object.seal()\n\n> 与 Object.freeze（）类似，但不会使属性不可写。仅阻止添加或删除属性。与 Object.preventExtensions（）类似，但也不允许删除属性：\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nObject.seal(dog);\ndog.breed = 'Pug';\ndog.name = 'Roger'; //TypeError: Cannot add property name, object is not extensible\n```\n\n### Object.values()\n\n> 对象自身的所有可枚举属性值的数组\n\n```javascript\nconst person = { name: 'Fred', age: 87 };\nObject.values(person); // ['Fred', 87]\n\nconst people = ['Fred', 'Tony'];\nObject.values(people); // ['Fred', 'Tony']\n```\n\n### Object.hasOwnProperty()\n\n> 判断对象自身是否有某个值，返回布尔值\n\n```javascript\nconst person = { name: 'Fred', age: 87 };\nperson.hasOwnProperty('name'); //true\nperson.hasOwnProperty('job'); //false\n```\n\n### Object.isPrototypeOf()\n\n> 测试一个对象是否存在于另一个对象的原型链上\n\n```javascript\nconst Animal = {\n  isAnimal: true,\n};\n\nconst Mammal = Object.create(Animal);\nMammal.isMammal = true;\n\nAnimal.isPrototypeOf(Mammal); //true\n\nconst dog = Object.create(Animal);\nObject.setPrototypeOf(dog, Mammal);\n\nAnimal.isPrototypeOf(dog); //true\nMammal.isPrototypeOf(dog); //true\n```\n\n### Object.propertyIsEnumerable()\n\n> 判断对象的属性是否可枚举，返回布尔值\n\n```javascript\nconst person = { name: 'Fred' };\n\nObject.defineProperty(person, 'age', {\n  value: 87,\n  enumerable: false,\n});\n\nperson.propertyIsEnumerable('name'); //true\nperson.propertyIsEnumerable('age'); //false\n```\n\n### Object.toLocaleString()\n\n```javascript\nconst person = { name: 'Fred' };\nperson.toLocaleString(); //[object Object]\n```\n\n### Object.toString()\n\n```javascript\nconst person = { name: 'Fred' };\nperson.toString(); //[object Object]\n```\n\n### Object.valueOf()\n\n> 返回指定对象的原始值\n\n```javascript\nconst person = { name: 'Fred' };\nperson.valueOf(); //{ name: 'Fred' }\n```\n","slug":"javascript/base/Object"},{"data":{"date":"January 7, 2021","title":"Docker Containers","description":"Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器","tags":["docker"],"fromNow":"a year ago"},"content":"\nimage 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。\n\n```shell\n# 列出本机正在运行的容器\n$ docker container ls\n```\n\n```shell\n# 列出本机所有容器，包括终止运行的容器\n$ docker container ls --all\n```\n\n上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的 docker container kill 命令。\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用 docker container rm 命令删除。\n\n```shell\n$ docker container rm [containerID]\n```\n\n运行上面的命令之后，再使用 docker container ls --all 命令，就会发现被删除的容器文件已经消失了。\n\n## 更多\n","slug":"docker/Docker容器"}]},"__N_SSG":true}