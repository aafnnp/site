{"pageProps":{"data":{"date":"September 19, 2019","title":"安装jenkins","tags":["server"],"fromNow":"2 years ago"},"content":{"compiledSource":"var o=Object.defineProperty,g=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var m=(e,a,s)=>a in e?o(e,a,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[a]=s,n=(e,a)=>{for(var s in a||(a={}))r.call(a,s)&&m(e,s,a[s]);if(t)for(var s of t(a))c.call(a,s)&&m(e,s,a[s]);return e},i=(e,a)=>g(e,h(a));var l=(e,a)=>{var s={};for(var p in e)r.call(e,p)&&a.indexOf(p)<0&&(s[p]=e[p]);if(e!=null&&t)for(var p of t(e))a.indexOf(p)<0&&c.call(e,p)&&(s[p]=e[p]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var p=s,{components:e}=p,a=l(p,[\"components\"]);return mdx(MDXLayout,i(n(n({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"\\u57FA\\u4E8E centos 7.2\"),mdx(\"h2\",null,\"\\u5B89\\u88C5 java \\u73AF\\u5883\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`sudo yum install java-1.8.0-openjdk-devel\n`)),mdx(\"h2\",null,\"\\u52A0\\u5165\\u8F6F\\u4EF6\\u6E90\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo\n`)),mdx(\"h2\",null,\"\\u52A0\\u5165\\u8F6F\\u4EF6 key\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n`)),mdx(\"h2\",null,\"\\u5B89\\u88C5\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`sudo yum install jenkins\n`)),mdx(\"h2\",null,\"\\u542F\\u52A8 jenkins\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`sudo systemctl start jenkins\n`)),mdx(\"h2\",null,\"\\u68C0\\u67E5 jenkins \\u72B6\\u6001\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`systemctl status jenkins\n`)),mdx(\"h2\",null,\"\\u52A0\\u5165\\u5F00\\u673A\\u542F\\u52A8\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`sudo systemctl enable jenkins\n`)),mdx(\"h2\",null,\"\\u8BBF\\u95EE\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`http://your_ip_or_domain:8080\n`)),mdx(\"p\",null,mdx(\"img\",n({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621160854.png\",alt:null}))),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n`)),mdx(\"h2\",null,\"\\u5B89\\u88C5\\u9ED8\\u8BA4\\u63D2\\u4EF6\"),mdx(\"p\",null,mdx(\"img\",n({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161025.png\",alt:null}))),mdx(\"p\",null,mdx(\"img\",n({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161045.png\",alt:null}))),mdx(\"h2\",null,\"\\u6CE8\\u518C\\u7528\\u6237\"),mdx(\"p\",null,mdx(\"img\",n({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161123.png\",alt:null}))),mdx(\"h2\",null,\"\\u5B8C\\u6210\"),mdx(\"p\",null,mdx(\"img\",n({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161155.png\",alt:null}))))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"September 19, 2019","title":"安装jenkins","tags":["server"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"April 1, 2021","title":"基本类型与引用类型","tags":["javascript"],"fromNow":"8 months ago"},"content":"\n在 ECMAScript 中，变量可以存在两种类型的值，即原始值和引用值。\n\n- 原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。\n- 引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存处。\n\n## 基本类型\n\n- Number：`typeof instance === \"number\"`\n- Boolean：`typeof instance === \"boolean\"`\n- String：`typeof instance === \"string\"`\n- Symbol：`typeof instance === \"symbol\"`\n- Null：`typeof instance === \"object\"`\n- Undefined：`typeof instance === \"undefined\"`\n\n```javascript\nconst number = 10;\n\nconst bool = false;\n\nconst str = 'Hello!';\n\nconst missingObject = null;\n\nconst nothing = undefined;\n```\n\n![fZKmxT](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/fZKmxT.jpg)\n\n如果给一个变量赋值一个原始类型值，我们可以认为该变量包含这个原始值。当使用 = 将该变量赋值给其他变量值，其实是将值拷贝了一份并赋值给新的变量，因此原始值是通过值的拷贝来赋值的。\n\n```javascript\nlet a = 1;\nlet b = a;\n\nb = b + 2;\n\nconsole.log(a); // 1\nconsole.log(b); // 3\n```\n\n## 引用类型\n\n- Object：`typeof instance === \"object\"`\n- Array：`typeof instance === \"array\"`\n- Function：`typeof instance === \"function\"`\n\n```javascript\n// Objects\nconst plainObject = {\n  prop: 'Value',\n};\n\nconst array = [1, 5, 6];\n\nconst functionObject = (n1, n2) => {\n  return n1 + n2;\n};\n```\n\n![GLC3Zu](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/GLC3Zu.jpg)\n\n将一个非原始值赋值给一个变量，相当于给这个变量赋值了一个引用类型的值，这个引用执行对象在内存中的地址，而这个变量实际上并不包含这个值。\n\n当一个引用类型，比如一个对象，使用 = 将其赋值给另一个变量，实际上是代表那个对象的地址引用赋值给了新的变量，就和是原始值的拷贝一样\n\n```javascript\nlet x = [1];\nlet y = x;\n\ny.push(2);\n\nconsole.log(x); // [1, 2]\nconsole.log(y); // [1, 2]\n```\n\n> **任何非基本类型的都是对象**\n\n## 比较对象\n\n原始值按值比较，引用值按引用比较\n\n```javascript\n// 原始值比较\nconst one = 1;\nconst oneCopy = 1;\n\nconsole.log(one === oneCopy); // true\nconsole.log(one === 1); // true\nconsole.log(one === one); // true\n\n// 引用值比较\nconst ar1 = [1];\nconst ar2 = [1];\n\nconsole.log(ar1 === ar2); // false\nconsole.log(ar1 === [1]); // false\n\nconst ar11 = ar1;\nconsole.log(ar1 === ar11); // true\nconsole.log(ar1 === ar1); // true\n```\n\n## 总结\n\n原始变量及他们的值储存在栈中，当把一个原始变量传递给另一个原始变量时，是把一个栈房间的东西复制到另一个栈房间，且这两个原始变量互不影响。\n\n引用值是把引用变量的名称储存在栈中，但是把其实际对象储存在堆中，且存在一个指针由变量名指向储存在堆中的实际对象，当把引用对象传递给另一个变量时，复制的其实是指向实际对象的指针，此时两者指向的是同一个数据，若通过方法改变其中一个变量的值，则访问另一个变量时，其值也会随之加以改变；但若不是通过方法而是通过重新赋值，此时，相当于重新开了一个房间，该值的原指针改变，则另外一个值不会随他的改变而改变\n","slug":"javascript/advance/基本类型与引用类型"},{"data":{"date":"October 12, 2020","title":"Linux命令gunzip","tags":["linux"],"description":"“gunzip”命令的快速指南，用于解压缩gzip文件。","fromNow":"a year ago"},"content":"\n“gunzip”命令的快速指南，用于解压缩 gzip 文件。\n\n**gunzip**命令基本上等同于**gzip**命令，但默认情况-d 选项始终处于启用状态。\n\n## 使用方法\n\n```shell\ngunzip filename.gz\n```\n\n这将**gunzip**并删除**.gz**扩展名，将结果放入文件名文件中。如果该文件存在，它将覆盖该文件。\n\n可以使用-c 选项使用输出重定向将其提取到其他文件名：\n\n```shell\ngunzip -c filename.gz > anotherfilename\n```\n\ngunzip 命令可以在 Linux、macOS、WSL 和任何有 UNIX 环境的地方使用\n\n## 参数\n\n- -a 或--ascii 　使用 ASCII 文字模式。\n- -c 或--stdout 或--to-stdout 　把解压后的文件输出到标准输出设备。\n- -f 或-force 　强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接。\n- -h 或--help 　在线帮助。\n- -l 或--list 　列出压缩文件的相关信息。\n- -L 或--license 　显示版本与版权信息。\n- -n 或--no-name 　解压缩时，若压缩文件内含有远来的文件名称及时间戳记，则将其忽略不予处理。\n- -N 或--name 　解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上。\n- -q 或--quiet 　不显示警告信息。\n- -r 或--recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。\n- -S<压缩字尾字符串>或--suffix<压缩字尾字符串> 　更改压缩字尾字符串。\n- -t 或--test 　测试压缩文件是否正确无误。\n- -v 或--verbose 　显示指令执行过程。\n- -V 或--version 显示版本信息。\n","slug":"linux/Linux命令-gunzip"},{"data":{"date":"May 19, 2020","title":"闭包","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## 什么是闭包\n\n作用：能够在函数定义的作用域外，使用函数定义作用域内的局部变量，并且不会污染全局。\n\n原理：基于词法作用域链和垃圾回收机制，通过维持函数作用域的引用，让函数作用域可以在当前作用域外被访问到\n\n```javascript\nfunction foo() {\n  var a = 'hzfe';\n  function bar() {\n    console.log(a);\n  }\n  return bar;\n}\n\nvar baz = foo();\nbaz(); // hzfe\n```\n\n在这个例子中，函数 bar 作为返回值返回后，在自己定义的词法作用域以外的地方执行。一般来说，在函数 foo 执行后，通常会期待函数 foo 的整个内部作用域被引擎回收机制销毁。而闭包可以阻止这件事情的发生。事实上内部作用域依然存在，因为函数 bar 本身在使用，所以并不会被回收。\n\n在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\n\n## 闭包的应用\n\n无论何时何地，如果将函数作为返回值，就会看到闭包在这些函数中的应用。在定时器，事件监听器，ajax 请求，跨窗口通信，web workers 或者任何其他的异步/同步任务中，只要使用了回调函数，实际上就是使用闭包。使用闭包的例子可以参考实现节流防抖函数。\n\n```javascript\nvar a = 'hzfe';\n(function IIFE() {\n  console.log(a);\n})();\n```\n\n通常认为立即执行函数（IIFE）是典型的观察闭包的典型例子，但严格来说并不是。虽然创建了闭包，但没有体现出闭包的作用。因为函数并不是在它本身的词法作用域以外执行的。 它在定义时所在的作用域中执行，而非外部作用域。\n\n## 扩展\n\n- [闭包 MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n- [垃圾回收机制](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/Closed_Overlay_Requires_Arguments)\n- [你不知道的 JavaScript](https://www.imooc.com/article/2907)\n","slug":"javascript/advance/闭包"},{"data":{"date":"May 19, 2020","title":"类型判断","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## typeof\n\n> 用于判断操作数的数据类型，适用于除 null、object 的其他 5 种类型的判断。\n\n1. 对于基本类型，除 null 以外，均可以返回正确的结果。\n2. 对于引用类型，除 function 以外，一律返回 object 类型。\n3. 对于 null ，返回 object 类型。\n4. 对于 function 返回 function 类型。\n\n```javascript\ntypeof undefined; // \"undefined\";\ntypeof 1; // \"number\";\ntypeof '1'; // \"string\";\ntypeof true; // \"boolean\";\ntypeof Symbol(); // \"symbol\";\ntypeof { a: 1 }; // \"object\";\n\ntypeof null === 'object'; // true\ntypeof function () {} === 'function'; // true\n```\n\n## instanceof\n\n> 用于判断是对象的那个子类型\n\n```javascript\n[1, 2] instanceof Array; // true\n(function foo() {} instanceof Function); // true\nnew Date(2018) instanceof Date; // true\nnew Number(1) instanceof Number; // true\n1 instanceof Number; // false\n```\n\na instanceof b，instanceof 会去查找 a 的原型链(这里不展开讨论)上是否有 b 的 prototype 属性；如果有，就返回 true，否则返回 false。即判断 a 的原型链上是否有 a.\\_proto\\_\\_ === b.prototype 返回 true\n\n## constructor\n\n> 不仅可以用于对象子类型的判断，还可以用于基本类型的判断，返回创建实例对象的 Object 构造函数的引用，原始数据类型，constructor 只读，基本类型指向对应的内置对象的构造函数\n\n```javascript\n({ a: 1 }.constructor === Object); // true\n[1, 2].constructor === Array; // true\nnew Date(2018).constructor === Date; // true\n(function foo() {}.constructor === Function); // true\n'1'.constructor === String; // true\n(1).constructor === Number; // true\ntrue.constructor === Boolean; // true\n```\n\n## prototype\n\n> Object.prototype.toString.call('...')，通用方法判断对象类型。 Object.prototype 表示 Object 的原型对象，toString 返回表示该对象的字符串，call 用于指定 this\n\n```javascript\nObject.prototype.toString.call('1'); // \"[object String]\"\nObject.prototype.toString.call(1); // \"[object Number]\"\nObject.prototype.toString.call(true); // \"[object Boolean]\"\nObject.prototype.toString.call([1, 2, 3]); // \"[object Array]\"\nObject.prototype.toString.call(function foo() {}); // \"[object Function]\"\nObject.prototype.toString.call(null); //\"[object Null]\"\nObject.prototype.toString.call(undefined); //\"[object Undefined]\"\n```\n","slug":"javascript/advance/类型判断"},{"data":{"date":"December 3, 2021","title":"Data Types and Data Structures","tags":["python"],"description":"以元组和字典的形式介绍数据结构。","fromNow":"12 days ago"},"content":"\n## 原始数据类型\n\n- 整形：`int`\n- 浮点型：`float`\n- 字符串：`str`\n\n## 无类型\n\n```python\nemail_address = None\n```\n\n`None` 是一个特殊的值，表示空值。\n\n```python\nif email_address:\n    print('email address provided.')\n```\n\n## 元组\n\n元组是一种有序的数据集合，元组中的元素可以是不同的数据类型。\n\n```python\ns = ('a', 'b', 'c')\n```\n\n有时候`()`可以省略，但是不建议这样做。\n\n```python\ns = 'a', 'b', 'c'\n```\n\n通过索引访问元组中的元素，索引从 0 开始。\n\n```python\ns = ('GOOG', 100, 490.10, 'Google Inc.')\nname = s[0] # GOOG\nprice = s[2] # 490.10\nshares = s[1] # 100\n```\n\n无法修改元组中的元素。\n\n```python\ns[1] = 200\n# TypeError: 'tuple' object does not support item assignment\n```\n\n元组可以被重新赋值，但是不能改变元组的长度。\n\n```python\ns = ('GOO', 200, 490.10, 'Google Inc.')\n```\n\n## 元组的包装和拆包\n\n```python\ns = ('GOOG', 100, 490.10, 'Google Inc.')\nname, shares, price, company = s\n```\n\n## 元组和列表\n\n元组通常由不同的数据，而列表是相同类型的数据队列。元组表示的是结构，而列表表示的是顺序\n\n- 都是序列\n- 都可以存储任何数据类型\n- 可以通过索引访问\n\n```python\nrecord = ('GOOG', 100, 490.1)       # 一些不同的数据\n\nsymbols = [ 'GOOG', 'AAPL', 'IBM' ]  # 一些相同类型的数据\n```\n\n## 字典\n\n字典是一种可变的数据结构，它是一种映射，也就是一种键值对的集合。\n\n```python\ns = {\n    'name': 'GOOG',\n    'shares': 100,\n    'price': 490.1\n}\n\ns['name'] # GOOG\ns['shares'] # 100\ns['price'] # 490.1\n```\n","slug":"python/2.1-data"},{"data":{"date":"February 10, 2019","title":"online&offline","tags":["javascript"],"description":"当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发","fromNow":"3 years ago"},"content":"\n> 当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发，并冒泡到 document 和 window。可使用 window、document、document.body、添加监听事件`addEventListener`。\n\n## 使用方法\n\n```javascript\n//网络状态\nwindow.addEventListener('load', () => {\n  const updateOnlineStatus = () => {\n    this.online = navigator.onLine;\n  };\n\n  window.addEventListener('online', updateOnlineStatus);\n  window.addEventListener('offline', updateOnlineStatus);\n});\n```\n","slug":"apis/online-offline"}]},"__N_SSG":true}