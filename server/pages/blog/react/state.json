{"pageProps":{"data":{"date":"April 28, 2021","title":"React State","tags":["react","javascript"],"description":"如何在 React.js 中处理状态","fromNow":"8 months ago"},"content":{"compiledSource":"var c=Object.defineProperty,C=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var d=(e,t,n)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,o=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&d(e,n,t[n]);if(i)for(var n of i(t))l.call(t,n)&&d(e,n,t[n]);return e},r=(e,t)=>C(e,m(t));var s=(e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(e!=null&&i)for(var a of i(e))t.indexOf(a)<0&&l.call(e,a)&&(n[a]=e[a]);return n};const makeShortcode=e=>function(n){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",o({},n))},CodeSandbox=makeShortcode(\"CodeSandbox\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:e}=a,t=s(a,[\"components\"]);return mdx(MDXLayout,r(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"state\"),\"\\u662F\",mdx(\"inlineCode\",{parentName:\"p\"},\"React\"),\"\\u7EC4\\u4EF6\\u4E2D\\u7684\\u5185\\u7F6E\\u5BF9\\u8C61\"),mdx(\"p\",null,\"\\u5728\",mdx(\"inlineCode\",{parentName:\"p\"},\"state\"),\"\\u5BF9\\u8C61\\u4E2D\\uFF0C\\u6211\\u4EEC\\u5B58\\u50A8\\u5C5E\\u4E8E\\u7EC4\\u4EF6\\u7684\\u5C5E\\u6027\\u503C\\u3002\\u5F53\\u72B6\\u6001\\u5BF9\\u8C61\\u66F4\\u6539\\u65F6\\uFF0C\\u7EC4\\u4EF6\\u91CD\\u65B0\\u6E32\\u67D3\\u3002\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"p\"},\"setState()\"),\"\\u51FD\\u6570\\u4FEE\\u6539\",mdx(\"inlineCode\",{parentName:\"p\"},\"state\"),\"\\u5BF9\\u8C61\\u3002\",mdx(\"inlineCode\",{parentName:\"p\"},\"state\"),\"\\u548C\",mdx(\"inlineCode\",{parentName:\"p\"},\"props\"),\"\\u7C7B\\u4F3C\\uFF0C\\u533A\\u522B\\u5728\\u4E8E\",mdx(\"inlineCode\",{parentName:\"p\"},\"props\"),\"\\u88AB\\u4F20\\u9012\\u7ED9\\u7EC4\\u4EF6\\uFF0C\\u800C\",mdx(\"inlineCode\",{parentName:\"p\"},\"state\"),\"\\u5728\\u7EC4\\u4EF6\\u4E2D\\u8FDB\\u884C\\u7BA1\\u7406\\u3002\\u5F00\\u53D1\\u4EBA\\u5458\\u5E94\\u8BE5\\u59CB\\u7EC8\\u5C1D\\u8BD5\\u4F7F\\u72B6\\u6001\\u6700\\u5C0F\\u5316\\u3002\\u6B64\\u5916\\uFF0C\\u6709\\u72B6\\u6001\\u7EC4\\u4EF6\\u7684\\u6570\\u91CF\\u5E94\\u8BE5\\u6700\\u5C0F\\u5316\\u3002\"),mdx(\"h2\",null,\"\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"h2\"},\"create-react-app\"),\"\\u521B\\u5EFA\\u5E94\\u7528\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-shell\"}),`npx create-react-app state-demo\ncd state-demo\n`)),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\"}),`//App.js\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      title: 'React state example',\n    };\n  }\n\n  tooggleTitle = () => {\n    if (this.state.title === '') {\n      this.setState({ title: 'React state example' });\n    } else {\n      this.setState({ title: '' });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <input\n            type=\"checkbox\"\n            id=\"showTitle\"\n            onClick={this.tooggleTitle}\n            defaultChecked\n          />\n          <label htmlFor=\"showTitle\">Show title</label>\n        </div>\n\n        <h2>{this.state.title}</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n`)),mdx(\"p\",null,\"\\u5728\\u8FD9\\u91CC\\u521B\\u5EFA\\u4E00\\u4E2A\\u7B80\\u5355\\u7684\",mdx(\"inlineCode\",{parentName:\"p\"},\"state\"),\"\\uFF0C\\u7528\\u6765\\u5B58\\u50A8\",mdx(\"inlineCode\",{parentName:\"p\"},\"title\"),\"\\u7684\\u5C5E\\u6027\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"toggleTitle\"),\"\\u51FD\\u6570\\u5207\\u6362\",mdx(\"inlineCode\",{parentName:\"p\"},\"title\"),\"\\u7684\\u503C\"),mdx(CodeSandbox,{codeSandboxId:\"white-worker-4r3bv\",mdxType:\"CodeSandbox\"}),mdx(\"p\",null,mdx(\"a\",o({parentName:\"p\"},{href:\"https://csb-4r3bv.netlify.app/\"}),\"\\u5728\\u7EBF\\u5730\\u5740\")))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"April 28, 2021","title":"React State","tags":["react","javascript"],"description":"如何在 React.js 中处理状态","fromNow":"8 months ago"}},"randomPost":[{"data":{"date":"May 19, 2020","title":"原型和原型链","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n![Dyv0vb](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/Dyv0vb.jpg)\n\n每个对象都会在其内部初始化⼀个属性，就是`prototype`(原型)，当我们访问⼀个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去`prototype` ⾥找这个属性，这个`prototype`⼜会有⾃⼰的`prototype`，于是就这样⼀直找下去，也就是我们平时所说的原型链的概念关系：`instance.constructor.prototype = instance.__proto__` 特点： JavaScript 对象是通过引⽤来传递的，我们创建的每个新对象实体中并没有⼀份属于⾃⼰的原型副本。当我们修改原型时，与之相关的对象也会继承这⼀改变当我们需要⼀个属性的时， Javascript 引擎会先看当前对象中是否有这个属性， 如果没有的就会查找他的`Prototype`对象是否有这个属性，如此递推下去，⼀直检索到`Object`内建对象\n\n## 原型：\n\nJavaScript 的所有对象中都包含了⼀个 [__proto__] 内部属性，这个属性所对应的就是该对象的原型\n\nJavaScript 的函数对象，除了原型 [__proto__] 之外，还预置了 prototype 属性当函数对象作为构造函数创建实例时，该 prototype 属性值将被作为实例对象的原型[__proto__] 。\n\n## 原型链：\n\n当⼀个对象调⽤的属性/⽅法⾃身不存在时，就会去⾃⼰ [__proto__] 关联的前辈 prototype 对象上去找如果没找到，就会去该 prototype 原型 [__proto__] 关联的前辈 prototype 去找。依次类推，直到找到属性/⽅法或 undefined 为⽌。从⽽形成了所谓的“原型链”\n\n## 原型特点：\n\nJavaScript 对象是通过引⽤来传递的，当修改原型时，与之相关的对象也会继承这⼀改变\n","slug":"javascript/advance/原型和原型链"},{"data":{"date":"November 20, 2021","title":"如何在 vue 中使用 Debounce、Throttle","tags":["vue","javascript"],"description":"如input、resize、scroll、intersection observer 等事件可能发生得非常频繁，例如每秒发生几次，因此调用一个动作，比如对每个事件发出读取请求，并不是一个明智的方法。","fromNow":"25 days ago"},"content":"\n## 为什么要使用 debounce 和 throttle\n\n防抖和节流就是针对响应跟不上触发频率这类问题的两种解决方案。在给 DOM 绑定事件时，有些事件我们是无法控制触发频率的。 如鼠标移动事件 onmousemove, 滚动滚动条事件 onscroll，窗口大小改变事件 onresize，瞬间的操作都会导致这些事件会被高频触发。 如果事件的回调函数较为复杂，就会导致响应跟不上触发，出现页面卡顿，假死现象。 在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发。\n\n## 在 watcher 中使用 debounce\n\n1. 在`created`生命周期将`this.debounce`绑定到`this`上，这样`this.debounce`就可以在`created`生命周期中使用。\n2. 在`watch`函数中，使用`this.debounce`调用`debounce`函数，并传入`this.debounce`的回调函数。\n3. 在事件销毁前，使用`this.debounce`调用`clear`函数，清除定时器。\n\n```html\n<template>\n  <input v-model=\"value\" type=\"text\" />\n  <p>{{ value }}</p>\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    data() {\n      return {\n        value: '',\n      };\n    },\n    watch: {\n      value(...args) {\n        this.debouncedWatch(...args);\n      },\n    },\n    created() {\n      this.debouncedWatch = debounce((newValue, oldValue) => {\n        console.log('New value:', newValue);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedWatch.cancel();\n    },\n  };\n</script>\n```\n\n## 使用 debounce 处理事件\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    created() {\n      this.debouncedHandler = debounce((event) => {\n        console.log('New value:', event.target.value);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedHandler.cancel();\n    },\n  };\n</script>\n```\n\n为什么不适用`debounce`或`throttle`直接绑定函数呢？比如：\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    methods: {\n      // Don't do this!\n      debouncedHandler: debounce(function (event) {\n        console.log('New value:', event.target.value);\n      }, 500),\n    },\n  };\n</script>\n```\n\n**使用`export default { ... }`从组件导出的 options 对象，包括方法，将被组件的所有实例重用。如果网页中有 2 个或更多的组件实例，那么所有的组件都将使用相同的`debounce`或`throttle`的函数方法。**\n\n## 总结\n\n在 `vue` 中使用 `debounce` 和 `throttle` 函数，应该在 `created` 和 `beforeUnmount` 生命周期中使用，而不是在 `watch` 中使用。\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  export default {\n    created() {\n      this.debouncedCallback = debounce((...args) => {\n        // The debounced\n        callback;\n      }, 500);\n    },\n    watch: {\n      value(...args) {\n        this.debouncedCallback(...args);\n      },\n    },\n  };\n</script>\n```\n","slug":"vue/debounce-throttle"},{"data":{"date":"April 11, 2021","title":"闭包","tags":["swift"],"description":"闭包(Closures)是自包含的功能代码块，可以在代码中使用或者用来作为参数传值。","fromNow":"8 months ago"},"content":"\n## 闭包的定义\n\n闭包(Closures)是自包含的功能代码块，可以将闭包视为无名函数，可以将其分配给变量或将其作为参数传递给函数。\n闭包主要用于在将来满足条件时执行某项操作。例如，成功下载文件后，将其内容存储到数据库中。\n\n全局函数和嵌套函数其实就是特殊的闭包。\n\n闭包的形式有：\n\n| 全局函数               | 嵌套函数                       | 闭包表达式                                         |\n| ---------------------- | ------------------------------ | -------------------------------------------------- |\n| 有名字但不能捕获任何值 | 有名字，也能捕获封闭函数内的值 | 无名闭包，使用轻量级语法，可以根据上下文环境捕获值 |\n\n## 创建闭包\n\n```swift\nlet helloWorldClosure = {\n  print(\"hello\")\n}\n\nhelloWorldClosure()\n```\n\n上面的代码创建一个打印`Hello`的闭包，并将该闭包分配给`helloWorldClosure`变量。然后，可以像调用函数一样简单地调用闭包。\n\n## 接收参数\n\n```swift\nlet driving = { (place: String) in\n    print(\"I'm going to \\(place) in my car\")\n}\ndriving(\"London\")\n```\n\n## 闭包返回值\n\n```swift\nlet addClosure = { (first: Int, second: Int) -> Int in\n    return first + second\n}\n\nlet sum = addClosure(1,2)\n```\n\n上面的代码创建一个以两个数字为参数的闭包，并返回数字的总和。\n\n## 作为参数传递\n\n```swift\nlet saveFile = {\n   //code to save file\n}\n\nfunc downloadFile(imageUrl, onSuccess: () ->) {\n  //code to download file\n  if(downloadSuccessfull){\n     onSuccess()\n  }\n}\n\ndownloadFile(imageUrl: \"Instagram\", onSuccess: saveFile)\n```\n\n上面的代码创建了一个闭包，用于保存从`Internet`下载的文件。这个闭包被传递到`downloadFile`函数中。此`downloadFile`功能从互联网下载文件，如果文件下载成功，则调用保存文件关闭。\n","slug":"swift/100days/day06"},{"data":{"date":"December 21, 2020","title":"Macos Docker安装","tags":["docker"],"fromNow":"a year ago"},"content":"\n## brew 安装 docker\n\n```shell\n#搜索\n==> Formulae\ndocker                          docker-credential-helper        docker-machine-completion       docker-machine-nfs              docker2aci\ndocker-clean                    docker-credential-helper-ecr    docker-machine-driver-hyperkit  docker-machine-parallels        dockerize\ndocker-completion               docker-gen                      docker-machine-driver-vmware    docker-slim                     lazydocker\ndocker-compose                  docker-ls                       docker-machine-driver-vultr     docker-squash\ndocker-compose-completion       docker-machine                  docker-machine-driver-xhyve     docker-swarm\n==> Casks\ndocker\n\n#安装\nbrew install docker\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/bottles/docker-19.03.14.big_sur.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring docker-19.03.14.big_sur.bottle.tar.gz\n==> Caveats\nzsh completions have been installed to:\n  /usr/local/share/zsh/site-functions\n==> Summary\n🍺  /usr/local/Cellar/docker/19.03.14: 14 files, 71.6MB\n```\n\n## 手动安装\n\n下载[Stable](https://download.docker.com/mac/stable/Docker.dmg)，双击安装\n\n![PVr5uh](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/PVr5uh.jpg)\n\n安装完成后，通过命令检查 Docker 版本\n\n```shell\ndocker --version\n\nDocker version 19.03.14, build 5eb3275\n```\n\n## 镜像加速\n\n![NAWFnd](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/NAWFnd.png)\n\n## 更多\n","slug":"docker/Macos安装Docker"},{"data":{"date":"April 28, 2021","title":"React State","tags":["react","javascript"],"description":"如何在 React.js 中处理状态","fromNow":"8 months ago"},"content":"\n`state`是`React`组件中的内置对象\n\n在`state`对象中，我们存储属于组件的属性值。当状态对象更改时，组件重新渲染。使用`setState()`函数修改`state`对象。`state`和`props`类似，区别在于`props`被传递给组件，而`state`在组件中进行管理。开发人员应该始终尝试使状态最小化。此外，有状态组件的数量应该最小化。\n\n## 使用`create-react-app`创建应用\n\n```shell\nnpx create-react-app state-demo\ncd state-demo\n```\n\n```jsx\n//App.js\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      title: 'React state example',\n    };\n  }\n\n  tooggleTitle = () => {\n    if (this.state.title === '') {\n      this.setState({ title: 'React state example' });\n    } else {\n      this.setState({ title: '' });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <input\n            type=\"checkbox\"\n            id=\"showTitle\"\n            onClick={this.tooggleTitle}\n            defaultChecked\n          />\n          <label htmlFor=\"showTitle\">Show title</label>\n        </div>\n\n        <h2>{this.state.title}</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n在这里创建一个简单的`state`，用来存储`title`的属性\n\n`toggleTitle`函数切换`title`的值\n\n<CodeSandbox codeSandboxId=\"white-worker-4r3bv\" />\n\n[在线地址](https://csb-4r3bv.netlify.app/)\n","slug":"react/state"},{"data":{"date":"May 9, 2018","title":"String","tags":["javascript"],"fromNow":"4 years ago"},"content":"\n## String\n\n### 方法\n\n- String.fromCharCode() //通过一串 Unicode 创建字符串。\n- String.fromCodePoint() //通过一串 码点 创建字符串。\n- String.raw() //通过模板字符串创建字符串。\n\n### 实例方法\n\n- charAt(i)\n- charCodeAt(i)\n- codePointAt(i)\n- concat(str)\n- endsWith(str)\n- includes(str)\n- indexOf(str)\n- lastIndexOf(str)\n- localeCompare()\n- match(regex)\n- normalize()\n- padEnd()\n- padStart()\n- repeat()\n- replace(str1, str2)\n- search(str)\n- slice(begin, end)\n- split(separator)\n- startsWith(str)\n- substring()\n- toLocaleLowerCase()\n- toLocaleUpperCase()\n- toLowerCase()\n- toString()\n- toUpperCase()\n- trim()\n- trimEnd()\n- trimStart()\n- valueOf()\n\n### charAt\n\n> 返回指定位置的字符,且返回的字符长度为 1，**_js 没有一种有别于字符串类型的字符数据类型_**\n\n```javascript\nstring.charAt(index);\n\n'porhub'.charAt(0); //'p'\n'porhub'.charAt(1); //'o'\n'porhub'.charAt(2); //'r'\n```\n\n### charCodeAt\n\n> 返回在指定的位置的字符的 Unicode 编码\n\n**字符串中第一个字符的下标是 0。如果 index 是负数，或大于等于字符串的长度，则 charCodeAt() 返回 NaN。**\n\n```javascript\nstring.charCodeAt(index);\n\n'porhub'.charCodeAt(0); //112\n'porhub'.charCodeAt(1); //111\n'porhub'.charCodeAt(2); //114\n```\n\n### codePointAt\n\n> ES2015 引入的，用于处理 2 UTF-16 字符的，比如中文，在 ES2015 之前 charCodeAt 只能处理单个字符，处理双字符必须一个个处理然后拼接。\n\n```javascript\nstring.codePointAt(index);\n\n//ES2015之前\n'𠮷'.charCodeAt(0).toString(16); //d842\n'𠮷'.charCodeAt(1).toString(16); //dfb7\n('\\ud842\\udfb7'); //𠮷\n\n//ES2015\n'𠮷'.codePointAt(0); //20bb7\n('\\u{20bb7}'); //𠮷\n```\n\n### concat\n\n> 类似 Array 的 concat\n\n```javascript\nstringObject.concat(stringX,stringX,...,stringX)\n\n\"browser\".concat(\"porhub\");\n```\n\n通常使用 + 拼接来得更方便，或者使用 ES2015 的``字符扩展。\n\n### endWith\n\n> 用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false。\n\n```javascript\nstr.endsWith(searchString, position);\n\n'JavaScript'.endsWith('Script'); //true\n'JavaScript'.endsWith('script'); //false\n'JavaScript'.endsWith('Script', 5); //false\n'JavaScript'.endsWith('as', 5); //true\n```\n\n### includes\n\n> 用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false\n\n```javascript\nstr.includes(searchString, position);\n\n'JavaScript'.includes('Script'); //true\n'JavaScript'.includes('script'); //false\n'JavaScript'.includes('nice'); //true\n'JavaScript'.includes('nice', 3); //false\n```\n\n### indexOf\n\n> 用于返回字符串中出现某个字符的初始位置，如果没有找到，返回-1.\n\n```javascript\nstr.indexOf(searchString, startPosition);\n\n'JavaScript'.indexOf('a'); //1\n'JavaScript'.indexOf('a', 2); //3\n```\n\n### lastIndexOf\n\n> 用于返回某个字符最后出现的位置，如果没有，返回-1\n\n```javascript\nstr.lastIndexOf(searchString, startPosition);\n\n'JavaScript'.lastIndexOf('a'); //3\n'JavaScript'.lastIndexOf('a', 1); //1\n```\n\n### padEnd\n\n> 用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。\n\n```javascript\nstr.padEnd(targetLength, string);\n\n'abc'.padEnd(10); // \"abc       \"\n'abc'.padEnd(10, 'foo'); // \"abcfoofoof\"\n'abc'.padEnd(6, '123456'); // \"abc123\"\n'abc'.padEnd(1); // \"abc\"\n```\n\n### padStart\n\n> 用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的\n\n```javascript\nstr.padStart(targetLength, string);\n\n'abc'.padStart(10); // \"       abc\"\n'abc'.padStart(10, 'foo'); // \"foofoofabc\"\n'abc'.padStart(6, '123465'); // \"123abc\"\n'abc'.padStart(8, '0'); // \"00000abc\"\n'abc'.padStart(1); // \"abc\"\n```\n\n### repeat\n\n> 构造并返回一个包含被连接在一起的指定数量的新字符串。\n\n```javascript\nstr.repeat(count);\n\n'abc'.repeat(-1); // RangeError: repeat count must be positive and less than inifinity\n'abc'.repeat(0); // \"\"\n'abc'.repeat(1); // \"abc\"\n'abc'.repeat(2); // \"abcabc\"\n'abc'.repeat(3.5); // \"abcabcabc\" 参数count将会被自动转换成整数.\n'abc'.repeat(1 / 0); // RangeError: repeat count must be positive and less than inifinity\n```\n\n### slice\n\n> 截取字符串的一部分，并返回一个新的字符串\n\n```javascript\nstr.slice(startPosition, endPosition);\n\n'abc'.slice(0, 1); //a\n'abc'.slice(0, -1); //ab\n```\n\n### split\n\n> 将字符串切割成数组\n\n```javascript\nstr.split(separator, limit);\n\n'abc'.split(); //\"[a,b,c]\";\n'a,b,c'.split(',', 1); //[a]\n```\n\n### startWith\n\n> 判断字符串是否以给定的字符串开始，返回 true/false\n\n```javascript\nstr.startsWith(searchString, poistion);\n\n'abc'.startsWith('a'); //true\n'abc'.startsWith('a', 1); //false\n```\n\n### substring\n\n> 根据开始索引到结束索引截取字符串\n\n```javascript\nstr.substring(startPosition, endPosition);\n\n'abc'.substring(0, 1); //a\n'abc'.substring(-1); //abc\n```\n\n1. 如果 startPosition 等于 indexEnd，substring 返回一个空字符串。\n2. 如果省略 indexEnd，substring 提取字符一直到字符串末尾。\n3. 如果任一参数小于 0 或为 NaN，则被当作 0。\n4. 如果任一参数大于 stringName.length，则被当作 stringName.length。\n5. 如果 startPosition 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。见下面的例子。\n\n### toLocaleLowerCase/toLocaleUpperCase/toUpperCase/toLowerCase\n\n> 将字符串转换成小写/大写\n\n```javascript\nstr.toLocaleLowerCase() /\n  str.toLocaleUpperCase() /\n  str.toUpperCase() /\n  str.toLowerCase();\n\n'ABC'.toLocaleLowerCase(); //abc\n'abc'.toLocaleUpperCase(); //ABC\n```\n\n### toString\n\n> 将\\*转换成字符串\n\n```javascript\nvar x = new String('Hello world');\n\nalert(x.toString()); // 输出 \"Hello world\"\n```\n\n### trim/trimStart/trimEnd\n\n> 移除空白字符/起始位置空白字符/结尾位置空白字符\n\n```javascript\nstr.trim() / str.trimStart() / str.trimEnd();\n\n'Testing'.trim(); //'Testing'\n' Testing'.trim(); //'Testing'\n' Testing '.trim(); //'Testing'\n'Testing '.trim(); //'Testing'\n```\n\n### valueOf\n\n> 返回 str 的原始值，等同于 String.prototype.toString\n\n```javascript\nstr.valueOf();\n\nx = new String('Hello world');\nalert(x.valueOf()); // Displays \"Hello world\"\n```\n\n### 扩展学习\n\n```javascript\n1 +\n  '5'[(1, 3, 5)] + //\"15\"\n  1; //\"1,3,51\"\n10 + true; // 11\n15 + {}; // \"15[object Object]\"\n8 + null; // 8\n'queen' + null; // \"queennull\"\n12 + undefined; // NaN\n```\n\n[See examples in jsbin](http://jsbin.com/fiwemir/2/edit?js,console)\n","slug":"javascript/base/String"}]},"__N_SSG":true}