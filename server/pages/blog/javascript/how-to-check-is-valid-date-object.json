{"pageProps":{"data":{"date":"December 8, 2021","title":"如何判断是否是日期对象？","tags":["javascript"],"description":"一些常见的日期对象判断方法","fromNow":"6 days ago"},"content":{"compiledSource":"var s=Object.defineProperty,C=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var l=(e,n,a)=>n in e?s(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,o=(e,n)=>{for(var a in n||(n={}))p.call(n,a)&&l(e,a,n[a]);if(i)for(var a of i(n))r.call(n,a)&&l(e,a,n[a]);return e},d=(e,n)=>C(e,m(n));var c=(e,n)=>{var a={};for(var t in e)p.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(e!=null&&i)for(var t of i(e))n.indexOf(t)<0&&r.call(e,t)&&(a[t]=e[t]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var t=a,{components:e}=t,n=c(t,[\"components\"]);return mdx(MDXLayout,d(o(o({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"typeof\"),mdx(\"p\",null,\"\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"p\"},\"typeof\"),\"\\u53EF\\u4EE5\\u5224\\u65AD\\u4E00\\u4E2A\\u53D8\\u91CF\\u7684\\u7C7B\\u578B\\uFF0C\\u8FD4\\u56DE\\u503C\\u4E3A\",mdx(\"inlineCode\",{parentName:\"p\"},\"string\"),\"\\uFF0C\\u53EF\\u4EE5\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"p\"},\"instanceof\"),\"\\u6765\\u5224\\u65AD\\u4E00\\u4E2A\\u5BF9\\u8C61\\u662F\\u5426\\u662F\\u67D0\\u4E2A\\u7C7B\\u7684\\u5B9E\\u4F8B\\u3002\"),mdx(\"p\",null,\"\\u6211\\u4EEC\\u4F7F\\u7528\\u8FD0\\u7B97\\u7B26 typeof \\u68C0\\u67E5 getMonth \\u65B9\\u6CD5\\u662F\\u5426\\u662F\\u4E00\\u4E2A\\u51FD\\u6570\\uFF0C\\u770B\\u770B\\u5B83\\u662F\\u5426\\u8FD4\\u56DE\",mdx(\"inlineCode\",{parentName:\"p\"},\"function\")),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-javascript\"}),`const date = new Date(2021, 1, 1);\nconsole.log(typeof date.getMonth === 'function');\n`)),mdx(\"p\",null,\"\\u5982\\u679C\\u8FD4\\u56DE\",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\"\\uFF0C\\u8BF4\\u660E getMonth \\u662F\\u4E00\\u4E2A\\u51FD\\u6570\\uFF0C\",mdx(\"inlineCode\",{parentName:\"p\"},\"date\"),\"\\u53EF\\u80FD\\u662F\",mdx(\"inlineCode\",{parentName:\"p\"},\"Date\"),\"\\u5B9E\\u4F8B\\uFF0C\\u5982\\u679C\\u8FD4\\u56DE\",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\"\\uFF0C\\u8BF4\\u660E getMonth \\u662F\\u4E00\\u4E2A\\u5B57\\u7B26\\u4E32\\u3002\"),mdx(\"h2\",null,\"instanceof\"),mdx(\"p\",null,\"instanceof \\u53EF\\u4EE5\\u7528\\u6765\\u5224\\u65AD\\u4E00\\u4E2A\\u5BF9\\u8C61\\u662F\\u5426\\u662F\\u67D0\\u4E2A\\u7C7B\\u7684\\u5B9E\\u4F8B\\uFF0C\\u8FD4\\u56DE\\u503C\\u4E3A\",mdx(\"inlineCode\",{parentName:\"p\"},\"boolean\"),\"\\u3002\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-javascript\"}),`const date = new Date(2021, 1, 1);\nconsole.log(date instanceof Date);\n`)),mdx(\"p\",null,\"\\u5982\\u679C\\u8FD4\\u56DE\",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\"\\uFF0C\\u8BF4\\u660E date \\u662F\\u4E00\\u4E2A\",mdx(\"inlineCode\",{parentName:\"p\"},\"Date\"),\"\\u5B9E\\u4F8B\\uFF0C\\u5982\\u679C\\u8FD4\\u56DE\",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\"\\uFF0C\\u8BF4\\u660E date \\u4E0D\\u662F\\u4E00\\u4E2A\",mdx(\"inlineCode\",{parentName:\"p\"},\"Date\"),\"\\u5B9E\\u4F8B\\u3002\"),mdx(\"h2\",null,\"Object.prototype.toString\"),mdx(\"p\",null,\"Object.prototype.toString \\u65B9\\u6CD5\\u53EF\\u4EE5\\u8FD4\\u56DE\\u4E00\\u4E2A\\u5BF9\\u8C61\\u7684\\u5B57\\u7B26\\u4E32\\u8868\\u793A\\uFF0C\\u8FD4\\u56DE\\u503C\\u4E3A\",mdx(\"inlineCode\",{parentName:\"p\"},\"string\"),\"\\u3002\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-javascript\"}),`const date = new Date(2021, 1, 1);\nconsole.log(date instanceof Date);\n`)),mdx(\"h2\",null,\"isValid Date\"),mdx(\"p\",null,\"\\u5224\\u65AD\\u4E00\\u4E2A\\u5BF9\\u8C61\\u662F\\u5426\\u662F\\u4E00\\u4E2A\\u6709\\u6548\\u7684\\u65E5\\u671F\\u5BF9\\u8C61\\uFF0C\\u8FD4\\u56DE\\u503C\\u4E3A\",mdx(\"inlineCode\",{parentName:\"p\"},\"boolean\"),\"\\u3002\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-javascript\"}),`Object.prototype.toString;\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"December 8, 2021","title":"如何判断是否是日期对象？","tags":["javascript"],"description":"一些常见的日期对象判断方法","fromNow":"6 days ago"}},"randomPost":[{"data":{"date":"January 19, 2020","title":"使用js获取位置","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":"\n![quick-tip-detecting-your-location-with-javascript](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190121163457.png)\n\n首先，我们使用 caniuse-cmd 查看下 geolocation 的兼容性,几乎所有的现代浏览器都支持 geolocation\n\nGeolocation 通过使用 GPS、WIFI、IP 地址检测自己的位置信息，开发人员可使用这些信息给用户提供更好的搜索建议，比如附近的便利店，并实现互动。\n\n本地资源（location sources） JavaScript 提供了一个简单，但功能强大的工具来定位设备的地理定位 API 的形式。它包括一个小的一组易于使用的方法，可以获得设备的位置：\n\nGPS-主要在移动设备，精确到 10 米 WIFI-几乎所有的联网设备 IP-仅限于区域，备选方案采用哪种方案取决于浏览器支持，一般情况下 WIFI 快于 GPS 快于 IP\n\n使用 geolocation api 通过使用 caniuse-cmd，我们知道大部分浏览器支持 geolocation，但我们需要做好判断，请确保可以正常使用 geolocation\n\n```javascript\nif (navigator.geolocation) {\n  // 支持geolocation\n} else {\n  // 不支持geolocation\n}\n```\n\nnavigator.geolocation 有如下几个方法：\n\n- Geolocation.getCurrentPosition() //获取当前位置\n- Geolocation.watchPosition() //监测定位\n- Geolocation.clearWatch() //清除监测\n\ngetCurrentPosition() and watchPosition() methods 的工作方式是基本相同的。这两方法目的基本相同，都是用来去获取 device 的位置信息吧， 都是以一个异步的工作形式来获取位置信息的， 他们也都依赖于一个 attempt call 的结果\n\n```javascript\nnavigator.geolocation.getCurrentPosition(\n\n    // 位置获取成功\n    function(position) {\n\n        position = {\n            coords: {\n                latitude - //纬度.\n                longitude - //经度.\n                altitude - //高度.\n                accuracy - //精确度.\n                altitudeAccuracy - //高度的准确性.\n                heading - //.\n                speed - //.\n            }\n            timestamp - //时间戳.\n        }\n\n    },\n\n    // 位置获取失败\n    function(error){\n\n    }\n);\n```\n\n如上，使用 geolocation api 很简单，只需要正确调用方法，等待返回坐标即可。\n\n用户权限由于 geolocation api 会暴露用户信息，所以当应用程序访问的时候，将以弹窗请求用户操作，如下\n\n主机安全另一个保护措施是使用 HTTPS 连接。由于一个新的网络安全策略，谷歌浏览器（桌面版和手机版）不再允许非安全的主机上运行的 geolocation api。使用 https 可以最大限度的减少数据信息的盗用或被滥用的风险。\n\n这里查看更多关于这个问题。\n\n```javascript\n一个简单的Demo;\nfindMeButton.on('click', function () {\n  navigator.geolocation.getCurrentPosition(function (position) {\n    // Get the coordinates of the current position.\n    var lat = position.coords.latitude;\n    var lng = position.coords.longitude;\n\n    // Create a new map and place a marker at the device location.\n    var map = new GMaps({\n      el: '#map',\n      lat: lat,\n      lng: lng,\n    });\n\n    map.addMarker({\n      lat: lat,\n      lng: lng,\n    });\n  });\n});\n```\n\n[在线 demo](https://jsfiddle.net/dannymarkov/ubrvm4ao/ 'https://jsfiddle.net/dannymarkov/ubrvm4ao/')\n\n翻译自[Detecting Your Location With JavaScript](http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/ 'http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/')\n","slug":"translate/使用js获取位置"},{"data":{"date":"May 13, 2018","title":"Number","tags":["javascript"],"fromNow":"4 years ago"},"content":"\n## Number\n\n```javascript\nconst age = 36;\ntypeof age; //number\n\nconst age = Number(36);\ntypeof age; //number\n\n//使用new声明的Number返回object类型，可使用valueOf获取原始值\nconst age = new Number(36);\ntypeof age; //object\n```\n\n### 属性\n\n1. EPSILON - 两个数字之间的最小间隔\n2. MAX_SAFE_INTEGER - 可表示的最大整数值\n3. MAX_VALUE - 可表示的最大正值\n4. MIN_SAFE_INTEGER - 可表示的最小整数值\n5. MIN_VALUE - 可表示的最小正值\n6. NAN - not a number\n7. NEGATIVE_INFINITY - 正向无穷大\n8. POSITIVE_INFINITY - 负向无穷大\n\n```javascript\nNumber.EPSILON; //2.220446049250313e-16\nNumber.MAX_SAFE_INTEGER; //9007199254740991\nNumber.MAX_VALUE; //1.7976931348623157e+308\nNumber.MIN_SAFE_INTEGER; //-9007199254740991\nNumber.MIN_VALUE; //5e-324\nNumber.NAN; //NaN\nNumber.NEGATIVE_INFINITY; //-Infinity\nNumber.POSITIVE_INFINITY; //Infinity\n```\n\n### 方法\n\n- Number.isNaN(value) //当 value 为非 number 时返回 true\n- Number.isFinite(value) //当 value 是有穷值返回 true\n- Number.isInteger(value) //当 value 是整型值返回 true\n- Number.isSafeInteger(value) //当 value 是安全整型值返回 true\n- Number.parseFloat(value) //将值转换成浮点类型并返回\n- Number.parseInt(value) //将值转换成整形并返回\n\n### 实例方法\n\n当使用 new 关键词声明一个数值，将会返回 object，并且提供如下方法。\n\n```javascript\nconst age = new Number(36);\ntypeof age; //object\n```\n\n- .toExponential() //将值转换成指数计数法\n- .toFixed() //返回小数点后 N 位\n- .toLocaleString() //将值转换成字符类型\n- .toPrecision() //返回指定的精度\n- .toString() //将值转换成字符类型\n- .valueOf() //返回原始值\n\n### 扩展学习\n","slug":"javascript/base/Number"},{"data":{"date":"May 19, 2020","title":"this的指向","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20200413141906.png)\n\n## this 指向\n\nthis 总是指向函数的直接调⽤者（⽽⾮间接调⽤者）\n\n如果有 new 关键字， this 指向 new 出来的那个对象\n\n在事件中， this 指向触发这个事件的对象，特殊的是， IE 中的 attachEvent 中的 this 总是指向全局对象 Window\n\n> 创建⼀个空对象，并且 this 变量引⽤该对象，同时还继承了该函数的原型属性和⽅法被加⼊到 this 引⽤的对象中新创建的对象由 this 所引⽤，并且最后隐式的返回 this\n\n```javascript\nvar test = {\n  prop: 42,\n  func: function () {\n    return this.prop;\n  },\n};\n\nconsole.log(test.func()); //42，调用者是test\n//42\n\nvar fullname = 'David Jones';\nvar obj = {\n  fullname: 'Colin Brown',\n  prop: {\n    fullname: 'Aurelio Deftch',\n    getFullname: function () {\n      return this.fullname;\n    },\n  },\n};\nvar test = obj.prop.getFullname;\nconsole.log(test()); // David Jones，调用者是window，window.fullname是David Jones\nobj.prop.getFullname(); // Aurelio Deftch，调用者是obj.prop，obj.prop.fullname是Aurelio Deftch\n```\n\n## 扩展（call、bind、apply）\n\n- apply 、 call 、bind 三者都是用来改变函数的 this 对象的指向的；\n- apply 、 call 、bind 三者第一个参数都是 this 要指向的对象，也就是想指定的上下文；\n- apply 、 call 、bind 三者都可以利用后续参数传参；\n- bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。\n\n### apply、call\n\n- apply、call 是为了改变某个函数运行时的上下文（context）而存在的，即改变函数体内部的 this 指向\n- 作用一样，区别在于接受的参数不一样\n- func.call(this,args)\n- func.apply(this,[args])\n- 用法：当知道参数数量的时候用 call，不确定的时候用 apply\n\n```javascript\nfunction log() {\n  var _args = [...arguments];\n  console.log(_args);\n  args.unshift('(app)');\n\n  console.log.apply(console, args);\n}\nlog(1, 2, 3); //(app) 1 2 3\n```\n\n### bind\n\n> MDN 的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n\n```javascript\nvar bar = function () {\n  console.log(this.x);\n};\nvar foo = {\n  x: 3,\n};\nbar(); // undefined\nvar func = bar.bind(foo);\nfunc(); // 3,this指向了foo\n```\n","slug":"javascript/advance/this指向"},{"data":{"date":"October 19, 2020","title":"css-BFC","tags":["css"],"fromNow":"a year ago"},"content":"\n## 什么是 BFC\n\nBlock Formatting Context（块级格式化上下文）\n\n> Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域\n\n## 布局规则\n\n- 内部的 Box 会在垂直方向一个接一个地放置\n- Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠\n- 每个盒子（块盒与行盒）的 margin box 的左边，与包含块 border box 的左边相接触，即使存在浮动也是如此\n- BFC 的区域不会与 float box 重叠\n- BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响外面的元素。反之也是如此\n- 计算 BFC 的高度时，浮动元素也参与计算\n\n## 如何创建 BFC\n\n- 根元素或其他包含他的元素\n- 浮动元素（元素的 float 不是 none）\n- 绝对定位元素（元素具有 position 为 absolute 或 fixed）\n- 内联块（元素具有 display: inline-block）\n- 表格单元格（元素具有 display: table-cell ，HTML 表格单元格默认属性）\n- 表格标题（元素具有 display: table-caption，HTML 表格标题默认属性）\n- 具有 overflow 且值不是 visible 的块元素\n- 弹性盒子（flex 或 inline-flex）\n- ` css display: flow-root`\n- `css column-span: all`\n\n## BFC 作用\n\n- 利用 BFC 避免 margin 重叠\n- 自适应两栏布局\n- 清除浮动\n","slug":"interview/css/BFC"},{"data":{"date":"November 24, 2021","title":"Strings","tags":["python"],"description":"","fromNow":"21 days ago"},"content":"\n## 字符串文本\n\n> 字符串文本通常是由单引号或者双引号括起来的。通常单行单引号，多行三引号。\n\n```python\n# Single quote\na = 'Yeah but no but yeah but...'\n\n# Double quote\nb = \"computer says no\"\n\n# Triple quotes\nc = '''\nLook into my eyes, look into my eyes, the eyes, the eyes, the eyes,\nnot around the eyes,\ndon't look around the eyes,\nlook into my eyes, you're under.\n'''\n```\n\n## 字符串转义\n\n```python\n'\\n'      # 换行\n'\\r'      # 回车\n'\\t'      # 水平制表符\n'\\''      # 单引号\n'\\\"'      # 双引号\n'\\\\'      # 反斜杠\n```\n\n## 字符串运算\n\n```python\n+  # 字符串连接\n*  # 重复\n[] # 取子串\n[:] # 截取字符串的一部分\nin # 判断字符串是否包含某个字符串\nnot in # 判断字符串是否不包含某个字符串\nr/re # 匹配字符串\n% # 格式化字符串\n\n\na = \"Hello\"\nb = \"Python\"\n\nprint \"a + b 输出结果：\", a + b\nprint \"a * 2 输出结果：\", a * 2\nprint \"a[1] 输出结果：\", a[1]\nprint \"a[1:4] 输出结果：\", a[1:4]\n\nif( \"H\" in a) :\n    print \"H 在变量 a 中\"\nelse :\n    print \"H 不在变量 a 中\"\n\nif( \"M\" not in a) :\n    print \"M 不在变量 a 中\"\nelse :\n    print \"M 在变量 a 中\"\n\nprint r'\\n'\nprint R'\\n'\n```\n\n## 字符串方法\n\n```python\ns = ' Hello'\nt = s.strip() #'Hello'去除空格\nl = s.lower() #' hello' 全部转换为小写\nu = s.upper() #' HELLO' 全部转换为大写\nc = s.capitalize() #'Hello' 字符串首字母大写\nt = s.replace('H', 'J') #'Jello' 将所有的H替换为J\n\ns.endswith(suffix)     # 判断字符串是否以指定后缀结尾\ns.find(t)              # 查找字符串中指定字符或字符串的索引位置\ns.index(t)             # 查找字符串中指定字符或字符串的索引位置\ns.isalpha()            # 判断字符串是否只有字母\ns.isdigit()            # 判断字符串是否只有数字\ns.islower()            # 判断字符串是否只有小写\ns.isupper()            # 判断字符串是否只有大写\ns.join(slist)          # 将字符串s与字符串列表slist中的字符串连接\ns.lower()              # 转换字符串中所有大写字符为小写\ns.replace(old,new)     # 替换字符串中的指定字符串\ns.rfind(t)             # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.rindex(t)            # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.split([delim])       # 将字符串分割成一个列表\ns.startswith(prefix)   # 判断字符串是否以指定前缀开头\ns.strip()              # 去掉字符串左右两边的空格\ns.upper()              # 转换字符串中的小写字母为大写\n```\n\n## 字符串类型转换\n\n> 使用`str()`将任何值转换成字符串\n\n```python\nx=42\nstr(x) #'42'\n```\n\n## 其他字符类型\n\n```python\n# 字节类型\ndata = b'Hello World\\r\\n'\nlen(data)                         # 13\ndata[0:5]                         # b'Hello'\ndata.replace(b'Hello', b'Cruel')  # b'Cruel World\\r\\n'\n\n# Raw字节类型\n>>> rs = r'c:\\newdata\\test' # Raw (uninterpreted backslash)\n>>> rs\n'c:\\\\newdata\\\\test'\n\n# f-string\n>>> name = 'IBM'\n>>> shares = 100\n>>> price = 91.1\n>>> a = f'{name:>10s} {shares:10d} {price:10.2f}'\n>>> a\n'       IBM        100      91.10'\n>>> b = f'Cost = ${shares*price:0.2f}'\n>>> b\n'Cost = $9110.00'\n>>>\n```\n","slug":"python/1.3-strings"},{"data":{"date":"September 19, 2019","title":"安装jenkins","tags":["server"],"fromNow":"2 years ago"},"content":"\n基于 centos 7.2\n\n## 安装 java 环境\n\n```bash\nsudo yum install java-1.8.0-openjdk-devel\n```\n\n## 加入软件源\n\n```bash\ncurl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo\n```\n\n## 加入软件 key\n\n```bash\nsudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n```\n\n## 安装\n\n```bash\nsudo yum install jenkins\n```\n\n## 启动 jenkins\n\n```bash\nsudo systemctl start jenkins\n```\n\n## 检查 jenkins 状态\n\n```bash\nsystemctl status jenkins\n```\n\n## 加入开机启动\n\n```bash\nsudo systemctl enable jenkins\n```\n\n## 访问\n\n```bash\nhttp://your_ip_or_domain:8080\n```\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621160854.png)\n\n```bash\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n## 安装默认插件\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161025.png)\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161045.png)\n\n## 注册用户\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161123.png)\n\n## 完成\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161155.png)\n","slug":"server/安装jenkins"}]},"__N_SSG":true}