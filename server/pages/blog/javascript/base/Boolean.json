{"pageProps":{"data":{"date":"May 10, 2018","title":"Boolean","tags":["javascript"],"fromNow":"4 years ago"},"content":{"compiledSource":"var o=Object.defineProperty,i=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var d=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var u=(a,n,e)=>n in a?o(a,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[n]=e,t=(a,n)=>{for(var e in n||(n={}))d.call(n,e)&&u(a,e,n[e]);if(l)for(var e of l(n))p.call(n,e)&&u(a,e,n[e]);return a},m=(a,n)=>i(a,g(n));var N=(a,n)=>{var e={};for(var r in a)d.call(a,r)&&n.indexOf(r)<0&&(e[r]=a[r]);if(a!=null&&l)for(var r of l(a))n.indexOf(r)<0&&p.call(a,r)&&(e[r]=a[r]);return e};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(e){var r=e,{components:a}=r,n=N(r,[\"components\"]);return mdx(MDXLayout,m(t(t({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Boolean \\u6709\\u4E24\\u4E2A\\u503C true/false\\u3002\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",t({parentName:\"tr\"},{align:null}),\"\\u6570\\u636E\\u7C7B\\u578B\"),mdx(\"th\",t({parentName:\"tr\"},{align:null}),\"\\u8F6C\\u6362\\u4E3A true \\u7684\\u503C\"),mdx(\"th\",t({parentName:\"tr\"},{align:null}),\"\\u8F6C\\u6362\\u4E3A false \\u7684\\u503C\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"Boolean\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"true\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"false\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"String\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u4EFB\\u610F\\u98DE\\u7A7A\\u5B57\\u7B26\\u4E32\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u7A7A\\u5B57\\u7B26\\u4E32\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"Number\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u4EFB\\u4F55\\u975E\\u96F6\\u503C\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"0 \\u548C NaN\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"Object\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u4EFB\\u4F55\\u5BF9\\u8C61\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"null\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"Undefined\"),mdx(\"td\",t({parentName:\"tr\"},{align:null})),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"undefined\")))))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 10, 2018","title":"Boolean","tags":["javascript"],"fromNow":"4 years ago"}},"randomPost":[{"data":{"date":"January 7, 2021","title":"Docker Containers","description":"Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器","tags":["docker"],"fromNow":"a year ago"},"content":"\nimage 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。\n\n```shell\n# 列出本机正在运行的容器\n$ docker container ls\n```\n\n```shell\n# 列出本机所有容器，包括终止运行的容器\n$ docker container ls --all\n```\n\n上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的 docker container kill 命令。\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用 docker container rm 命令删除。\n\n```shell\n$ docker container rm [containerID]\n```\n\n运行上面的命令之后，再使用 docker container ls --all 命令，就会发现被删除的容器文件已经消失了。\n\n## 更多\n","slug":"docker/Docker容器"},{"data":{"date":"February 10, 2019","title":"online&offline","tags":["javascript"],"description":"当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发","fromNow":"3 years ago"},"content":"\n> 当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发，并冒泡到 document 和 window。可使用 window、document、document.body、添加监听事件`addEventListener`。\n\n## 使用方法\n\n```javascript\n//网络状态\nwindow.addEventListener('load', () => {\n  const updateOnlineStatus = () => {\n    this.online = navigator.onLine;\n  };\n\n  window.addEventListener('online', updateOnlineStatus);\n  window.addEventListener('offline', updateOnlineStatus);\n});\n```\n","slug":"apis/online-offline"},{"data":{"date":"December 16, 2020","title":"安装Certbot","tags":["server"],"fromNow":"a year ago"},"content":"\n![Fkz8eJ](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/Fkz8eJ.jpg)\n\n## 前置条件\n\n- Centos 8/Ubuntu 18.04/Debain 10\n- 域名 xxx.com\n- 域名解析到对应服务器\n\n## Centos 8 安装 Certbot\n\n### 加入 EPEL 软件源\n\n```shell\nsudo yum install epel-release\nsudo yum -y update\n```\n\n### 下载并安装特定于 Certbot 和 web 服务器的包\n\n```shell\nsudo curl -O https://dl.eff.org/certbot-auto\nsudo mv certbot-auto /usr/local/bin/certbot-auto\nchmod 0755 /usr/local/bin/certbot-auto\n```\n\n### 启动 Certbot\n\n```shell\nsudo /usr/local/bin/certbot-auto --nginx\n```\n\n### 启动 jenkins\n\n```bash\nsudo systemctl start jenkins\n```\n\n### 询问信息如下\n\n```shell\n\n# sudo /usr/local/bin/certbot-auto --nginx\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator nginx, Installer nginx\nNo names were found in your configuration files. Please enter in your domain\nname(s) (comma and/or space separated)  (Enter 'c' to cancel): www.example.com\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for www.example.com\nWaiting for verification...\nCleaning up challenges\nDeploying Certificate to VirtualHost /etc/nginx/nginx.conf\n\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n1: No redirect - Make no further changes to the webserver configuration.\n2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\nnew sites, or if you're confident your site works on HTTPS. You can undo this\nchange by editing your web server's configuration.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel): 2\nRedirecting all traffic on port 80 to ssl in /etc/nginx/nginx.conf\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\n\n### 开启防火墙\n\n```shell\nsudo firewall-cmd --zone=public --permanent --add-service=https\nsudo firewall-cmd --reload\n```\n\n## Ubuntu 18.04 安装 Certbot\n\n### 安装 Certbot 和 web 服务器\n\n```shell\nsudo apt-get update\nsudo add-apt-repository ppa:certbot/certbot\nsudo apt-get install python-certbot-nginx\nsudo certbot --nginx\n```\n\n### 开启防火墙\n\n```shell\nsudo systemctl start ufw && sudo systemctl enable ufw\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw enable\n```\n\n## Debain 10 安装 Certbot\n\n### 安装 Certbot 和 web 服务器\n\n```shell\nsudo apt install certbot python-certbot-nginx\nsudo certbot --nginx\n```\n\n### 询问信息\n\n```shell\n# sudo certbot --nginx\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator nginx, Installer nginx\nEnter email address (used for urgent renewal and security notices) (Enter 'c' to\ncancel): admin@example.com\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPlease read the Terms of Service at\nhttps://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must\nagree in order to register with the ACME server at\nhttps://acme-v02.api.letsencrypt.org/directory\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(A)gree/(C)ancel: A\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nWould you be willing to share your email address with the Electronic Frontier\nFoundation, a founding partner of the Let's Encrypt project and the non-profit\norganization that develops Certbot? We'd like to send you email about our work\nencrypting the web, EFF news, campaigns, and ways to support digital freedom.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(Y)es/(N)o: N\nNo names were found in your configuration files. Please enter in your domain\nname(s) (comma and/or space separated)  (Enter 'c' to cancel): www.rajie.wiki\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for www.example.com\nWaiting for verification...\nCleaning up challenges\nDeploying Certificate to VirtualHost /etc/nginx/sites-enabled/default\n\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n1: No redirect - Make no further changes to the webserver configuration.\n2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\nnew sites, or if you're confident your site works on HTTPS. You can undo this\nchange by editing your web server's configuration.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel): 2\nRedirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/default\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\n\n### 开启防火墙\n\n```shell\nsudo systemctl start ufw && sudo systemctl enable ufw\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw enable\n```\n","slug":"server/安装Certbot"},{"data":{"date":"October 19, 2020","title":"css-BFC","tags":["css"],"fromNow":"a year ago"},"content":"\n## 什么是 BFC\n\nBlock Formatting Context（块级格式化上下文）\n\n> Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域\n\n## 布局规则\n\n- 内部的 Box 会在垂直方向一个接一个地放置\n- Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠\n- 每个盒子（块盒与行盒）的 margin box 的左边，与包含块 border box 的左边相接触，即使存在浮动也是如此\n- BFC 的区域不会与 float box 重叠\n- BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响外面的元素。反之也是如此\n- 计算 BFC 的高度时，浮动元素也参与计算\n\n## 如何创建 BFC\n\n- 根元素或其他包含他的元素\n- 浮动元素（元素的 float 不是 none）\n- 绝对定位元素（元素具有 position 为 absolute 或 fixed）\n- 内联块（元素具有 display: inline-block）\n- 表格单元格（元素具有 display: table-cell ，HTML 表格单元格默认属性）\n- 表格标题（元素具有 display: table-caption，HTML 表格标题默认属性）\n- 具有 overflow 且值不是 visible 的块元素\n- 弹性盒子（flex 或 inline-flex）\n- ` css display: flow-root`\n- `css column-span: all`\n\n## BFC 作用\n\n- 利用 BFC 避免 margin 重叠\n- 自适应两栏布局\n- 清除浮动\n","slug":"interview/css/BFC"},{"data":{"date":"December 8, 2021","title":"如何判断是否是日期对象？","tags":["javascript"],"description":"一些常见的日期对象判断方法","fromNow":"6 days ago"},"content":"\n## typeof\n\n使用`typeof`可以判断一个变量的类型，返回值为`string`，可以使用`instanceof`来判断一个对象是否是某个类的实例。\n\n我们使用运算符 typeof 检查 getMonth 方法是否是一个函数，看看它是否返回`function`\n\n```javascript\nconst date = new Date(2021, 1, 1);\nconsole.log(typeof date.getMonth === 'function');\n```\n\n如果返回`true`，说明 getMonth 是一个函数，`date`可能是`Date`实例，如果返回`false`，说明 getMonth 是一个字符串。\n\n## instanceof\n\ninstanceof 可以用来判断一个对象是否是某个类的实例，返回值为`boolean`。\n\n```javascript\nconst date = new Date(2021, 1, 1);\nconsole.log(date instanceof Date);\n```\n\n如果返回`true`，说明 date 是一个`Date`实例，如果返回`false`，说明 date 不是一个`Date`实例。\n\n## Object.prototype.toString\n\nObject.prototype.toString 方法可以返回一个对象的字符串表示，返回值为`string`。\n\n```javascript\nconst date = new Date(2021, 1, 1);\nconsole.log(date instanceof Date);\n```\n\n## isValid Date\n\n判断一个对象是否是一个有效的日期对象，返回值为`boolean`。\n\n```javascript\nObject.prototype.toString;\n```\n","slug":"javascript/how-to-check-is-valid-date-object"},{"data":{"date":"October 10, 2020","title":"Linux命令xargs","tags":["linux"],"description":"xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具","fromNow":"a year ago"},"content":"\nxargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。\n\n## 使用方法\n\n```shell\ncommand1 | xargs command2\n```\n\n我们使用**|**将输出传递给 xargs。这将负责运行 command2 命令，使用 command1 的输出作为其参数。\n\n## 例子\n\n让我们举一个简单的例子。您要从目录中删除某些特定文件。这些文件列在文本文件中。我们有 3 个文件：file1，file2，file3。在**todelete.txt**我们有一个要删除的文件列表，在本例中为 file1 和 file3：\n\n```shell\ncat todelete.txt\n\nfile1\nfile2\n```\n\n![nXyQfk](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/nXyQfk.png)\n\n通过 cat 命令将 todelete 内容输出并执行 rm 命令\n\n```shell\ncat todelete.txt | xargs rm\n```\n\n## 参数\n\n- -a file 从文件中读入作为 sdtin\n- -e flag ，注意有的时候可能会是-E，flag 必须是一个以空格分隔的标志，当 xargs 分析到含有 flag 这个标志的时候就停止。\n- -p 当每次执行一个 argument 的时候询问一次用户。\n- -n num 后面加次数，表示命令在执行的时候一次用的 argument 的个数，默认是用所有的。\n- -t 表示先打印命令，然后再执行。\n- -i 或者是-I，这得看 linux 支持了，将 xargs 的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。\n- -r no-run-if-empty 当 xargs 的输入为空的时候则停止 xargs，不用再去执行了。\n- -s num 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。\n- -L num 从标准输入一次读取 num 行送给 command 命令。\n- -l 同 -L。\n- -d delim 分隔符，默认的 xargs 分隔符是回车，argument 的分隔符是空格，这里修改的是 xargs 的分隔符。\n- -x exit 的意思，主要是配合-s 使用。。\n- -P 修改最大的进程数，默认是 1，为 0 时候为 as many as it can ，这个例子我没有想到，应该平时都用不到的吧。\n","slug":"linux/Linux命令-xargs"}]},"__N_SSG":true}