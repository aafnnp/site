{"pageProps":{"data":{"date":"May 15, 2018","title":"Array","tags":["javascript"],"fromNow":"4 years ago"},"content":{"compiledSource":"var m=Object.defineProperty,A=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var i=(r,a,e)=>a in r?m(r,a,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[a]=e,t=(r,a)=>{for(var e in a||(a={}))o.call(a,e)&&i(r,e,a[e]);if(p)for(var e of p(a))y.call(a,e)&&i(r,e,a[e]);return r},n=(r,a)=>A(r,N(a));var u=(r,a)=>{var e={};for(var l in r)o.call(r,l)&&a.indexOf(l)<0&&(e[l]=r[l]);if(r!=null&&p)for(var l of p(r))a.indexOf(l)<0&&y.call(r,l)&&(e[l]=r[l]);return e};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(e){var l=e,{components:r}=l,a=u(l,[\"components\"]);return mdx(MDXLayout,n(t(t({},layoutProps),a),{components:r,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u5C5E\\u6027\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Array.length - \\u9759\\u6001\\u5C5E\\u6027\\uFF0C\\u503C\\u4E3A 1\"),mdx(\"li\",{parentName:\"ol\"},\"Array.prototype - \\u6570\\u7EC4\\u7684\\u539F\\u578B\\u5BF9\\u8C61\")),mdx(\"h2\",null,\"\\u65B9\\u6CD5\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Array.from - \\u4ECE\\u7C7B\\u6570\\u7EC4\\u5BF9\\u8C61\\u6216\\u8005\\u53EF\\u8FED\\u4EE3\\u5BF9\\u8C61\\u4E2D\\u521B\\u5EFA\\u4E00\\u4E2A\\u65B0\\u7684\\u6570\\u7EC4\\u5B9E\\u4F8B\"),mdx(\"li\",{parentName:\"ol\"},\"Array.of - \\u6839\\u636E\\u4E00\\u7EC4\\u53C2\\u6570\\u6765\\u521B\\u5EFA\\u65B0\\u7684\\u6570\\u7EC4\\u5B9E\\u4F8B\\uFF0C\\u652F\\u6301\\u4EFB\\u610F\\u7684\\u53C2\\u6570\\u6570\\u91CF\\u548C\\u7C7B\\u578B\"),mdx(\"li\",{parentName:\"ol\"},\"Array.isArray - \\u5224\\u65AD\\u662F\\u5426\\u4E3A\\u6570\\u7EC4\")),mdx(\"h3\",null,\"\\u5B9E\\u4F8B\"),mdx(\"h4\",null,\"\\u5C5E\\u6027\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Array.prototype.length - \\u7A7A\\u6570\\u7EC4\\uFF0C\\u503C\\u4E3A 0\"),mdx(\"li\",{parentName:\"ol\"},\"Array.prototype.constructor - \\u6240\\u6709\\u7684\\u6570\\u7EC4\\u5B9E\\u4F8B\\u90FD\\u7EE7\\u627F\\u4E86\\u8FD9\\u4E2A\\u5C5E\\u6027\\uFF0C\\u503C\\u4E3A Array\")),mdx(\"h4\",null,\"\\u5B9E\\u4F8B\\u65B9\\u6CD5\"),mdx(\"h5\",null,\"\\u4FEE\\u6539\\u5668\\u65B9\\u6CD5 - \\u6539\\u53D8\\u8C03\\u7528\\u5B83\\u4EEC\\u7684\\u5BF9\\u8C61\\u81EA\\u8EAB\\u7684\\u503C\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.copyWithin //\\u5C06\\u6570\\u7EC4 copy \\u5230\\u53E6\\u4E00\\u4E2A\\u6570\\u7EC4\\uFF0C\\u5E76\\u8986\\u76D6\\u539F\\u503C\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.fill //\\u586B\\u5145\\u6570\\u7EC4\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.pop //\\u5220\\u9664\\u6570\\u7EC4\\u6700\\u540E\\u4E00\\u4E2A\\u503C\\uFF0C\\u5E76\\u8FD4\\u56DE\\u8BE5\\u503C\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.push //\\u5411\\u6570\\u7EC4\\u6700\\u540E\\u6DFB\\u52A0\\u4E00\\u4E2A\\u65B0\\u7684\\u5143\\u7D20\\u6216\\u591A\\u4E2A\\u5143\\u7D20\\uFF0C\\u5E76\\u8FD4\\u56DE\\u6570\\u7EC4\\u7684\\u957F\\u5EA6\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.reverse //\\u98A0\\u5012\\u6570\\u7EC4\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.shift //\\u5220\\u9664\\u6570\\u7EC4\\u7B2C\\u4E00\\u4E2A\\u5143\\u7D20\\u5E76\\u8FD4\\u56DE\\u8BE5\\u5143\\u7D20\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.sort //\\u6392\\u5E8F\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.splice //\\u5728\\u6570\\u7EC4\\u4EFB\\u610F\\u4F4D\\u7F6E\\u6DFB\\u52A0\\u6216\\u5220\\u9664\\u5143\\u7D20\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.unshift //\\u5728\\u6570\\u7EC4\\u5F00\\u5934\\u6DFB\\u52A0\\u4E00\\u4E2A\\u6216\\u591A\\u4E2A\\u5143\\u7D20\\u5E76\\u8FD4\\u56DE\\u6570\\u7EC4\\u957F\\u5EA6\")),mdx(\"h5\",null,\"\\u8BBF\\u95EE\\u65B9\\u6CD5 - \\u4E0D\\u4F1A\\u6539\\u53D8\\u8C03\\u7528\\u5B83\\u4EEC\\u7684\\u5BF9\\u8C61\\u81EA\\u8EAB\\u7684\\u503C\\uFF0C\\u53EA\\u4F1A\\u8FD4\\u56DE\\u65B0\\u6570\\u7EC4\\u6216\\u671F\\u671B\\u503C\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.concat //\\u8FD4\\u56DE\\u5F53\\u524D\\u6570\\u7EC4\\u548C\\u5176\\u4ED6\\u6570\\u7EC4\\u7684\\u7EC4\\u5408\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.includes //\\u6570\\u7EC4\\u662F\\u5426\\u5305\\u542B\\u67D0\\u4E2A\\u503C\\uFF0C\\u8FD4\\u56DE true/false\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.join //\\u8FD4\\u56DE\\u6570\\u7EC4\\u6240\\u6709\\u5143\\u7D20\\u7EC4\\u6210\\u7684\\u5B57\\u7B26\\u4E32\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.slice //\\u622A\\u53D6\\u6570\\u7EC4\\u7684\\u67D0\\u4E00\\u6BB5\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.toString //\\u8F6C\\u6362\\u6210\\u5B57\\u7B26\\u4E32\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.toLocalString //\\u8F6C\\u6362\\u6210\\u672C\\u5730\\u5B57\\u7B26\\u4E32\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.indexOf //\\u8FD4\\u56DE\\u6570\\u7EC4\\u4E2D\\u7B2C\\u4E00\\u4E2A\\u4E0E\\u6307\\u5B9A\\u503C\\u76F8\\u7B49\\u7684\\u7D22\\u5F15\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.lastIndexOf //\\u8FD4\\u56DE\\u6570\\u7EC4\\u4E2D\\u6700\\u540E\\u4E00\\u4E2A\\u4E0E\\u6307\\u5B9A\\u503C\\u76F8\\u7B49\\u7684\\u7D22\\u5F15\")),mdx(\"h5\",null,\"\\u8FED\\u4EE3\\u65B9\\u6CD5\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.forEach //\\u4E3A\\u6570\\u7EC4\\u4E2D\\u6BCF\\u4E2A\\u5143\\u7D20\\u6267\\u884C\\u4E00\\u6B21\\u56DE\\u8C03\\u51FD\\u6570\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.entries //\\u8FD4\\u56DE\\u6570\\u7EC4\\u5143\\u7D20\\u7684\\u952E\\u503C\\u5BF9\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.every //\\u5982\\u679C\\u6BCF\\u4E2A\\u5143\\u7D20\\u90FD\\u6EE1\\u8DB3\\u56DE\\u8C03\\u51FD\\u6570\\u5C31\\u8FD4\\u56DE true\\uFF0C\\u5426\\u5219\\u8FD4\\u56DE false\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.some //\\u5982\\u679C\\u6570\\u7EC4\\u4E2D\\u5143\\u7D20\\u81F3\\u5C11\\u6709\\u4E00\\u4E2A\\u6EE1\\u8DB3\\u56DE\\u8C03\\u51FD\\u6570\\u5C31\\u8FD4\\u56DE true\\uFF0C\\u5426\\u5219\\u8FD4\\u56DE false\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.filter //\\u8FC7\\u6EE4\\u6570\\u7EC4\\u4E2D\\u6EE1\\u8DB3\\u56DE\\u8C03\\u51FD\\u6570\\u7684\\u5143\\u7D20\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.find //\\u67E5\\u627E\\u6570\\u7EC4\\u4E2D\\u6EE1\\u8DB3\\u56DE\\u8C03\\u51FD\\u6570\\u7684\\u5143\\u7D20\\uFF0C\\u5982\\u679C\\u6CA1\\u6709\\u5219\\u8FD4\\u56DE undefined\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.findIndex //\\u8FD4\\u56DE\\u6570\\u7EC4\\u4E2D\\u6EE1\\u8DB3\\u56DE\\u8C03\\u51FD\\u6570\\u7684\\u7D22\\u5F15\\uFF0C\\u6CA1\\u6709\\u5219\\u8FD4\\u56DE-1\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.keys //\\u8FD4\\u56DE\\u6570\\u7EC4\\u4E2D\\u7684\\u952E\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.map //\\u8FD4\\u56DE\\u4E00\\u4E2A\\u7531\\u56DE\\u8C03\\u51FD\\u6570\\u7EC4\\u6210\\u7684\\u65B0\\u6570\\u7EC4\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.reduce //\\u4ECE\\u53F3\\u5411\\u5DE6\\u4E3A\\u6BCF\\u4E2A\\u5143\\u7D20\\u6267\\u884C\\u4E00\\u6B21\\u56DE\\u8C03\\u51FD\\u6570\\uFF0C\\u5E76\\u5C06\\u4E0A\\u6B21\\u56DE\\u8C03\\u51FD\\u6570\\u7684\\u8FD4\\u56DE\\u503C\\u6682\\u5B58\\uFF0C\\u7136\\u540E\\u4F20\\u9012\\u7ED9\\u4E0B\\u4E00\\u4E2A\\u56DE\\u8C03\\u51FD\\u6570\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.reduceRight //\\u4E0E reduce \\u76F8\\u53CD\\u65B9\\u5411\"),mdx(\"li\",{parentName:\"ul\"},\"Array.prototype.values //\\u8FD4\\u56DE\\u6570\\u7EC4\\u4E2D\\u7684\\u503C\")),mdx(\"h2\",null,\"\\u6269\\u5C55\\u5B66\\u4E60\"),mdx(\"h3\",null,\"\\u56DB\\u79CD\\u5408\\u5E76\\u6570\\u7EC4\\u7684\\u65B9\\u6CD5\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"\\u5FAA\\u73AF\")),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-javascript\"}),`function push(fromArray, toArray) {\n  for (let i = 0, len = fromArray.length; i < len; i++) {\n    toArray.push(fromArray[i]);\n  }\n  return toArray;\n}\n\nvar array1 = [1, 2, 3, 4, 5];\nvar array2 = [6, 7, 8, 9, 10];\nvar array3 = [];\npush(array1, array3);\npush(array2, array3);\n`)),mdx(\"ol\",t({},{start:2}),mdx(\"li\",{parentName:\"ol\"},\"\\u89E3\\u6784\")),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-javascript\"}),`var array1 = [1, 2, 3, 4, 5];\nvar array2 = [6, 7, 8, 9, 10];\nvar array3 = [...array1, ...array2];\nvar array3 = Array.of(...array2, ...array1);\narray3; // [1,2,3,4,5,6,7,8,9,10];\n`)),mdx(\"ol\",t({},{start:3}),mdx(\"li\",{parentName:\"ol\"},\"concat\")),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-javascript\"}),`var array1 = [1, 2, 3, 4, 5];\nvar array2 = [6, 7, 8, 9, 10];\n\nvar array3 = array1.concat(array2);\n// or\nvar array3 = [].concat(array1, array2);\n`)),mdx(\"ol\",t({},{start:4}),mdx(\"li\",{parentName:\"ol\"},\"reduce\")),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-javascript\"}),`var array1 = [1,2,3,4,5];\nvar array2 = [6,7,8,9,10];\nvar array3 = array2.reduce((newArray, item) => {\n          newArray.push(item);\n          return newArray;\n ), array1);\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 15, 2018","title":"Array","tags":["javascript"],"fromNow":"4 years ago"}},"randomPost":[{"data":{"date":"November 2, 2020","title":"Linux命令export","tags":["linux"],"description":"export用于设置或显示环境变量。","fromNow":"a year ago"},"content":"\n**export**用于设置或显示环境变量。\n\n## 使用方法\n\n```shell\nexport TEST=\"test\"\n# TEST代表变量名，test代表变量值\n\nexport -n TEST\n#-n参数代表一出TEST变量\n```\n\n## 参数：\n\n- -f 　代表[变量名称]中为函数名称。\n- -n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。\n- -p 　列出所有的 shell 赋予程序的环境变量。\n","slug":"linux/Linux命令-export"},{"data":{"date":"December 2, 2021","title":"Functions","tags":["python"],"description":"随着程序的不断更新，我们会发现，函数的定义和调用是一致的。","fromNow":"12 days ago"},"content":"\n## 函数的定义\n\n函数的定义是一个特殊的可复用的代码块，它的第一行必须是函数的声明，第二行开始是函数的实现。\n\n```python\n#定义函数\ndef sumcount(n):\n    '''\n    Returns the sum of the first n integers\n    '''\n    total = 0\n    while n > 0:\n        total += n\n        n -= 1\n    return total\n#调用函数\na = sumcount(100)\n```\n\n## 标准函数\n\npython 中的标准函数是一些内置的函数，通过`import`调用。\n\n```python\nimport math\nx = math.sqrt(10)\n\nimport urllib.request\nu = urllib.request.urlopen('http://www.python.org/')\ndata = u.read()\n```\n\n## 错误和异常\n\n错误和异常是 python 中的两个主要概念，错误是指程序运行过程中发生的错误，异常是指程序运行过程中抛出的异常。例如：\n\n```python\n>>> int('N/A')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: 'N/A'\n>>>\n```\n\n## 捕获、处理异常\n\n异常可以通过`try`和`except`来捕获，也可以通过`try`和`finally`来处理。\n\n```python\nfor line in f:\n    fields = line.split()\n    try:\n        shares = int(fields[1])\n    except ValueError:\n        print(\"Couldn't parse\", line)\n    ...\n```\n","slug":"python/1.6-function"},{"data":{"date":"May 20, 2020","title":"Cypress入门","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":"\n![XBcHdy](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/XBcHdy.jpg)\n\nCypress 包含测试网站所必须的所有组件，可以快速编写测试用例。\n\n## 下载源码\n\n```shell\ngit clone github.com/ahfarmer/emoji-search\n#安装依赖\ncd emoji-search && npm install\n#启动项目\nnpm run start\n#访问http://localhost:3000\n```\n\n![65rXws](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/65rXws.jpg)\n\n## 安装 Cypress\n\n```shell\n#安装\nnpm install cypress —save-dev\n\n#启动\nnpx cypress open\n#或者\n./node_modules/.bin/cypress open\n#或者\n$(npm bin)/cypress open\n```\n\n以上命令将会在项目根目录创建`cypress`文件夹，如下： ![09GuGd](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/09GuGd.jpg)\n\n## 创建测试用例\n\n默认情况下，所有测试都存储在`cypress/integration`文件夹中，该文件夹在第一次`Cypress`启动时自动创建。在此示例中，我们将编写一个测试，该测试将：\n\n检查输入单词`lollipop`后是否在页面上仅显示一个结果\n\n检查标题类的标签是否包含正确的文本\n\n首先在`cypress/integration`目录中创建一个`sample_spec.js`文件：\n\n该文件应包含以下代码：\n\n```javascript\ndescribe('Sample test', () => {\n  it('Search lollipop emoji', () => {\n    cy.visit('http://localhost:3000/'); // launch project website\n    cy.get('input').type('lollipop'); // enter 'lollipop' in search\n    cy.get('.component-emoji-result-row').should('have.length', 1); // check if only 1 result is returned\n    cy.contains('Lollipop').should('have.class', 'title'); // check if returned element contains 'title' class\n  });\n});\n```\n\n你将会看到这样的窗口：\n\n![ZabqgO](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/ZabqgO.jpg)\n\n单击`sample_spec.js`后，将打开一个带有搜索引擎实例的窗口，您可以在其中实时预览执行的测试。结果应如下所示（请记住，带有示例性网站的项目应该正在运行）：\n\n![3NotH3](https://cdn.jsdelivr.net/gh/funnypan/pics@master/uPic/3NotH3.jpg)\n","slug":"translate/cypress测试入门"},{"data":{"date":"October 10, 2020","title":"Linux命令xargs","tags":["linux"],"description":"xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具","fromNow":"a year ago"},"content":"\nxargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。\n\n## 使用方法\n\n```shell\ncommand1 | xargs command2\n```\n\n我们使用**|**将输出传递给 xargs。这将负责运行 command2 命令，使用 command1 的输出作为其参数。\n\n## 例子\n\n让我们举一个简单的例子。您要从目录中删除某些特定文件。这些文件列在文本文件中。我们有 3 个文件：file1，file2，file3。在**todelete.txt**我们有一个要删除的文件列表，在本例中为 file1 和 file3：\n\n```shell\ncat todelete.txt\n\nfile1\nfile2\n```\n\n![nXyQfk](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/nXyQfk.png)\n\n通过 cat 命令将 todelete 内容输出并执行 rm 命令\n\n```shell\ncat todelete.txt | xargs rm\n```\n\n## 参数\n\n- -a file 从文件中读入作为 sdtin\n- -e flag ，注意有的时候可能会是-E，flag 必须是一个以空格分隔的标志，当 xargs 分析到含有 flag 这个标志的时候就停止。\n- -p 当每次执行一个 argument 的时候询问一次用户。\n- -n num 后面加次数，表示命令在执行的时候一次用的 argument 的个数，默认是用所有的。\n- -t 表示先打印命令，然后再执行。\n- -i 或者是-I，这得看 linux 支持了，将 xargs 的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。\n- -r no-run-if-empty 当 xargs 的输入为空的时候则停止 xargs，不用再去执行了。\n- -s num 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。\n- -L num 从标准输入一次读取 num 行送给 command 命令。\n- -l 同 -L。\n- -d delim 分隔符，默认的 xargs 分隔符是回车，argument 的分隔符是空格，这里修改的是 xargs 的分隔符。\n- -x exit 的意思，主要是配合-s 使用。。\n- -P 修改最大的进程数，默认是 1，为 0 时候为 as many as it can ，这个例子我没有想到，应该平时都用不到的吧。\n","slug":"linux/Linux命令-xargs"},{"data":{"date":"November 18, 2021","title":"第一个程序","tags":["python"],"description":"","fromNow":"a month ago"},"content":"\n## 运行 python\n\n> Python 程序总是在解释器中运行。解释器是一个“基于控制台的”应用程序，通常使用命令运行。\n\n```python\npython3\nPython 3.9.8 (main, Nov 10 2021, 03:55:42)\n[Clang 13.0.0 (clang-1300.0.29.3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\n## 交互模式\n\n当在终端运行`python3`后，就进入了交互模式，即 REPL。\n\n- `>>>`表示开始新的语句\n- `...`表示继续上一条语句\n- `_`表示最后的返回值\n\n```python\n>>> print('hello world')\nhello world\n>>> 37*42\n1554\n>>> for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n>>>\n```\n\n## 创建程序\n\n> python 程序以`.py`结尾，可以直接运行。\n\n```python\n# hello.py\nprint('hello world')\n```\n\n## 运行程序\n\n> python 程序运行的命令是`python hello.py`\n\n```python\n$ python hello.py\n$ python3 hello.py\n```\n\n## 样例程序\n\n> 问题：一天早上，你出去，在芝加哥西尔斯大厦旁的人行道上放了一张美元钞票。从那以后，你每天出去的账单都会翻倍。这堆钞票超过塔的高度需要多长时间？\n\n解决方法：\n\n```python\n# sears.py\nbill_thickness = 0.11 * 0.001 # Meters (0.11 mm)\nsears_height = 442 # Height (meters)\nnum_bills = 1\nday = 1\n\nwhile num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\nprint('Number of bills', num_bills)\nprint('Final height', num_bills * bill_thickness)\n```\n\n```shell\nbash % python3 sears.py\n1 1 0.00011\n2 2 0.00022\n3 4 0.00044\n4 8 0.00088\n5 16 0.00176\n6 32 0.00352\n...\n21 1048576 115.34336\n22 2097152 230.68672\nNumber of days 23\nNumber of bills 4194304\nFinal height 461.37344\n```\n\n### 语句\n\n> 每行语句以换行符结束，但是不能以分号结束。\n\n```python\na = 3 + 4\nb = a * 2\nprint(b)\n```\n\n### 注释 comment\n\n> 注释以#开始，不会被运行。\n\n```python\na = 3 + 4\n# This is a comment\nb = a * 2\nprint(b)\n```\n\n### 类型与变量 type&variable\n\n> python 属于动态类型语言，变量可以随时变化。python 变量名称可以包含字母、数字、下划线，但不能以数字或关键字开头。对大小写敏感。\n\n```python\nheight = 442           # An integer\nheight = 442.0         # Floating point\nheight = 'Really tall' # A string\n\n# 大小写敏感\nname = 'Jake'\nName = 'Elwood'\nNAME = 'Guido'\n\nwhile x < 0:   # OK\nWHILE x < 0:   # ERROR\n```\n\n### 循环 for/while\n\n```python\nwhile num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\n```\n\n### 缩进 indentation\n\n> 缩进是用来表示一组连在一起的语句:\n\n```python\nwhile num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\n```\n\n- 使用空格代替 tab 来缩进\n- 使用 4 个空格来缩进\n\n### 条件语句 if-else\n\n```python\nif a > b:\n    print('Computer says no')\nelif a == b:\n    print('Computer says yes')\nelse:\n    print('Computer says maybe')\n```\n\n### 输出语句 print\n\n```python\nprint('Hello world!') # Prints the text 'Hello world!'\n\n#用户输出\nname = input('Enter your name:')\nprint('Your name is', name)\n```\n","slug":"python/1.1-first-program"},{"data":{"date":"November 24, 2021","title":"Strings","tags":["python"],"description":"","fromNow":"21 days ago"},"content":"\n## 字符串文本\n\n> 字符串文本通常是由单引号或者双引号括起来的。通常单行单引号，多行三引号。\n\n```python\n# Single quote\na = 'Yeah but no but yeah but...'\n\n# Double quote\nb = \"computer says no\"\n\n# Triple quotes\nc = '''\nLook into my eyes, look into my eyes, the eyes, the eyes, the eyes,\nnot around the eyes,\ndon't look around the eyes,\nlook into my eyes, you're under.\n'''\n```\n\n## 字符串转义\n\n```python\n'\\n'      # 换行\n'\\r'      # 回车\n'\\t'      # 水平制表符\n'\\''      # 单引号\n'\\\"'      # 双引号\n'\\\\'      # 反斜杠\n```\n\n## 字符串运算\n\n```python\n+  # 字符串连接\n*  # 重复\n[] # 取子串\n[:] # 截取字符串的一部分\nin # 判断字符串是否包含某个字符串\nnot in # 判断字符串是否不包含某个字符串\nr/re # 匹配字符串\n% # 格式化字符串\n\n\na = \"Hello\"\nb = \"Python\"\n\nprint \"a + b 输出结果：\", a + b\nprint \"a * 2 输出结果：\", a * 2\nprint \"a[1] 输出结果：\", a[1]\nprint \"a[1:4] 输出结果：\", a[1:4]\n\nif( \"H\" in a) :\n    print \"H 在变量 a 中\"\nelse :\n    print \"H 不在变量 a 中\"\n\nif( \"M\" not in a) :\n    print \"M 不在变量 a 中\"\nelse :\n    print \"M 在变量 a 中\"\n\nprint r'\\n'\nprint R'\\n'\n```\n\n## 字符串方法\n\n```python\ns = ' Hello'\nt = s.strip() #'Hello'去除空格\nl = s.lower() #' hello' 全部转换为小写\nu = s.upper() #' HELLO' 全部转换为大写\nc = s.capitalize() #'Hello' 字符串首字母大写\nt = s.replace('H', 'J') #'Jello' 将所有的H替换为J\n\ns.endswith(suffix)     # 判断字符串是否以指定后缀结尾\ns.find(t)              # 查找字符串中指定字符或字符串的索引位置\ns.index(t)             # 查找字符串中指定字符或字符串的索引位置\ns.isalpha()            # 判断字符串是否只有字母\ns.isdigit()            # 判断字符串是否只有数字\ns.islower()            # 判断字符串是否只有小写\ns.isupper()            # 判断字符串是否只有大写\ns.join(slist)          # 将字符串s与字符串列表slist中的字符串连接\ns.lower()              # 转换字符串中所有大写字符为小写\ns.replace(old,new)     # 替换字符串中的指定字符串\ns.rfind(t)             # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.rindex(t)            # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.split([delim])       # 将字符串分割成一个列表\ns.startswith(prefix)   # 判断字符串是否以指定前缀开头\ns.strip()              # 去掉字符串左右两边的空格\ns.upper()              # 转换字符串中的小写字母为大写\n```\n\n## 字符串类型转换\n\n> 使用`str()`将任何值转换成字符串\n\n```python\nx=42\nstr(x) #'42'\n```\n\n## 其他字符类型\n\n```python\n# 字节类型\ndata = b'Hello World\\r\\n'\nlen(data)                         # 13\ndata[0:5]                         # b'Hello'\ndata.replace(b'Hello', b'Cruel')  # b'Cruel World\\r\\n'\n\n# Raw字节类型\n>>> rs = r'c:\\newdata\\test' # Raw (uninterpreted backslash)\n>>> rs\n'c:\\\\newdata\\\\test'\n\n# f-string\n>>> name = 'IBM'\n>>> shares = 100\n>>> price = 91.1\n>>> a = f'{name:>10s} {shares:10d} {price:10.2f}'\n>>> a\n'       IBM        100      91.10'\n>>> b = f'Cost = ${shares*price:0.2f}'\n>>> b\n'Cost = $9110.00'\n>>>\n```\n","slug":"python/1.3-strings"}]},"__N_SSG":true}