{"pageProps":{"data":{"date":"May 19, 2020","title":"强制类型转换","tags":["javascript"],"fromNow":"2 years ago"},"content":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,p=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&s(o,n,t[n]);if(u)for(var n of u(t))a.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)r.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&u)for(var e of u(o))t.indexOf(e)<0&&a.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,y(p(p({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 19, 2020","title":"强制类型转换","tags":["javascript"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"May 19, 2020","title":"this的指向","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20200413141906.png)\n\n## this 指向\n\nthis 总是指向函数的直接调⽤者（⽽⾮间接调⽤者）\n\n如果有 new 关键字， this 指向 new 出来的那个对象\n\n在事件中， this 指向触发这个事件的对象，特殊的是， IE 中的 attachEvent 中的 this 总是指向全局对象 Window\n\n> 创建⼀个空对象，并且 this 变量引⽤该对象，同时还继承了该函数的原型属性和⽅法被加⼊到 this 引⽤的对象中新创建的对象由 this 所引⽤，并且最后隐式的返回 this\n\n```javascript\nvar test = {\n  prop: 42,\n  func: function () {\n    return this.prop;\n  },\n};\n\nconsole.log(test.func()); //42，调用者是test\n//42\n\nvar fullname = 'David Jones';\nvar obj = {\n  fullname: 'Colin Brown',\n  prop: {\n    fullname: 'Aurelio Deftch',\n    getFullname: function () {\n      return this.fullname;\n    },\n  },\n};\nvar test = obj.prop.getFullname;\nconsole.log(test()); // David Jones，调用者是window，window.fullname是David Jones\nobj.prop.getFullname(); // Aurelio Deftch，调用者是obj.prop，obj.prop.fullname是Aurelio Deftch\n```\n\n## 扩展（call、bind、apply）\n\n- apply 、 call 、bind 三者都是用来改变函数的 this 对象的指向的；\n- apply 、 call 、bind 三者第一个参数都是 this 要指向的对象，也就是想指定的上下文；\n- apply 、 call 、bind 三者都可以利用后续参数传参；\n- bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。\n\n### apply、call\n\n- apply、call 是为了改变某个函数运行时的上下文（context）而存在的，即改变函数体内部的 this 指向\n- 作用一样，区别在于接受的参数不一样\n- func.call(this,args)\n- func.apply(this,[args])\n- 用法：当知道参数数量的时候用 call，不确定的时候用 apply\n\n```javascript\nfunction log() {\n  var _args = [...arguments];\n  console.log(_args);\n  args.unshift('(app)');\n\n  console.log.apply(console, args);\n}\nlog(1, 2, 3); //(app) 1 2 3\n```\n\n### bind\n\n> MDN 的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n\n```javascript\nvar bar = function () {\n  console.log(this.x);\n};\nvar foo = {\n  x: 3,\n};\nbar(); // undefined\nvar func = bar.bind(foo);\nfunc(); // 3,this指向了foo\n```\n","slug":"javascript/advance/this指向"},{"data":{"date":"October 19, 2020","title":"css-BFC","tags":["css"],"fromNow":"a year ago"},"content":"\n## 什么是 BFC\n\nBlock Formatting Context（块级格式化上下文）\n\n> Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域\n\n## 布局规则\n\n- 内部的 Box 会在垂直方向一个接一个地放置\n- Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠\n- 每个盒子（块盒与行盒）的 margin box 的左边，与包含块 border box 的左边相接触，即使存在浮动也是如此\n- BFC 的区域不会与 float box 重叠\n- BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响外面的元素。反之也是如此\n- 计算 BFC 的高度时，浮动元素也参与计算\n\n## 如何创建 BFC\n\n- 根元素或其他包含他的元素\n- 浮动元素（元素的 float 不是 none）\n- 绝对定位元素（元素具有 position 为 absolute 或 fixed）\n- 内联块（元素具有 display: inline-block）\n- 表格单元格（元素具有 display: table-cell ，HTML 表格单元格默认属性）\n- 表格标题（元素具有 display: table-caption，HTML 表格标题默认属性）\n- 具有 overflow 且值不是 visible 的块元素\n- 弹性盒子（flex 或 inline-flex）\n- ` css display: flow-root`\n- `css column-span: all`\n\n## BFC 作用\n\n- 利用 BFC 避免 margin 重叠\n- 自适应两栏布局\n- 清除浮动\n","slug":"interview/css/BFC"},{"data":{"date":"May 8, 2018","title":"Symbol","tags":["javascript"],"fromNow":"4 years ago"},"content":"","slug":"javascript/base/Symbol"},{"data":{"date":"May 9, 2018","title":"String","tags":["javascript"],"fromNow":"4 years ago"},"content":"\n## String\n\n### 方法\n\n- String.fromCharCode() //通过一串 Unicode 创建字符串。\n- String.fromCodePoint() //通过一串 码点 创建字符串。\n- String.raw() //通过模板字符串创建字符串。\n\n### 实例方法\n\n- charAt(i)\n- charCodeAt(i)\n- codePointAt(i)\n- concat(str)\n- endsWith(str)\n- includes(str)\n- indexOf(str)\n- lastIndexOf(str)\n- localeCompare()\n- match(regex)\n- normalize()\n- padEnd()\n- padStart()\n- repeat()\n- replace(str1, str2)\n- search(str)\n- slice(begin, end)\n- split(separator)\n- startsWith(str)\n- substring()\n- toLocaleLowerCase()\n- toLocaleUpperCase()\n- toLowerCase()\n- toString()\n- toUpperCase()\n- trim()\n- trimEnd()\n- trimStart()\n- valueOf()\n\n### charAt\n\n> 返回指定位置的字符,且返回的字符长度为 1，**_js 没有一种有别于字符串类型的字符数据类型_**\n\n```javascript\nstring.charAt(index);\n\n'porhub'.charAt(0); //'p'\n'porhub'.charAt(1); //'o'\n'porhub'.charAt(2); //'r'\n```\n\n### charCodeAt\n\n> 返回在指定的位置的字符的 Unicode 编码\n\n**字符串中第一个字符的下标是 0。如果 index 是负数，或大于等于字符串的长度，则 charCodeAt() 返回 NaN。**\n\n```javascript\nstring.charCodeAt(index);\n\n'porhub'.charCodeAt(0); //112\n'porhub'.charCodeAt(1); //111\n'porhub'.charCodeAt(2); //114\n```\n\n### codePointAt\n\n> ES2015 引入的，用于处理 2 UTF-16 字符的，比如中文，在 ES2015 之前 charCodeAt 只能处理单个字符，处理双字符必须一个个处理然后拼接。\n\n```javascript\nstring.codePointAt(index);\n\n//ES2015之前\n'𠮷'.charCodeAt(0).toString(16); //d842\n'𠮷'.charCodeAt(1).toString(16); //dfb7\n('\\ud842\\udfb7'); //𠮷\n\n//ES2015\n'𠮷'.codePointAt(0); //20bb7\n('\\u{20bb7}'); //𠮷\n```\n\n### concat\n\n> 类似 Array 的 concat\n\n```javascript\nstringObject.concat(stringX,stringX,...,stringX)\n\n\"browser\".concat(\"porhub\");\n```\n\n通常使用 + 拼接来得更方便，或者使用 ES2015 的``字符扩展。\n\n### endWith\n\n> 用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false。\n\n```javascript\nstr.endsWith(searchString, position);\n\n'JavaScript'.endsWith('Script'); //true\n'JavaScript'.endsWith('script'); //false\n'JavaScript'.endsWith('Script', 5); //false\n'JavaScript'.endsWith('as', 5); //true\n```\n\n### includes\n\n> 用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false\n\n```javascript\nstr.includes(searchString, position);\n\n'JavaScript'.includes('Script'); //true\n'JavaScript'.includes('script'); //false\n'JavaScript'.includes('nice'); //true\n'JavaScript'.includes('nice', 3); //false\n```\n\n### indexOf\n\n> 用于返回字符串中出现某个字符的初始位置，如果没有找到，返回-1.\n\n```javascript\nstr.indexOf(searchString, startPosition);\n\n'JavaScript'.indexOf('a'); //1\n'JavaScript'.indexOf('a', 2); //3\n```\n\n### lastIndexOf\n\n> 用于返回某个字符最后出现的位置，如果没有，返回-1\n\n```javascript\nstr.lastIndexOf(searchString, startPosition);\n\n'JavaScript'.lastIndexOf('a'); //3\n'JavaScript'.lastIndexOf('a', 1); //1\n```\n\n### padEnd\n\n> 用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。\n\n```javascript\nstr.padEnd(targetLength, string);\n\n'abc'.padEnd(10); // \"abc       \"\n'abc'.padEnd(10, 'foo'); // \"abcfoofoof\"\n'abc'.padEnd(6, '123456'); // \"abc123\"\n'abc'.padEnd(1); // \"abc\"\n```\n\n### padStart\n\n> 用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的\n\n```javascript\nstr.padStart(targetLength, string);\n\n'abc'.padStart(10); // \"       abc\"\n'abc'.padStart(10, 'foo'); // \"foofoofabc\"\n'abc'.padStart(6, '123465'); // \"123abc\"\n'abc'.padStart(8, '0'); // \"00000abc\"\n'abc'.padStart(1); // \"abc\"\n```\n\n### repeat\n\n> 构造并返回一个包含被连接在一起的指定数量的新字符串。\n\n```javascript\nstr.repeat(count);\n\n'abc'.repeat(-1); // RangeError: repeat count must be positive and less than inifinity\n'abc'.repeat(0); // \"\"\n'abc'.repeat(1); // \"abc\"\n'abc'.repeat(2); // \"abcabc\"\n'abc'.repeat(3.5); // \"abcabcabc\" 参数count将会被自动转换成整数.\n'abc'.repeat(1 / 0); // RangeError: repeat count must be positive and less than inifinity\n```\n\n### slice\n\n> 截取字符串的一部分，并返回一个新的字符串\n\n```javascript\nstr.slice(startPosition, endPosition);\n\n'abc'.slice(0, 1); //a\n'abc'.slice(0, -1); //ab\n```\n\n### split\n\n> 将字符串切割成数组\n\n```javascript\nstr.split(separator, limit);\n\n'abc'.split(); //\"[a,b,c]\";\n'a,b,c'.split(',', 1); //[a]\n```\n\n### startWith\n\n> 判断字符串是否以给定的字符串开始，返回 true/false\n\n```javascript\nstr.startsWith(searchString, poistion);\n\n'abc'.startsWith('a'); //true\n'abc'.startsWith('a', 1); //false\n```\n\n### substring\n\n> 根据开始索引到结束索引截取字符串\n\n```javascript\nstr.substring(startPosition, endPosition);\n\n'abc'.substring(0, 1); //a\n'abc'.substring(-1); //abc\n```\n\n1. 如果 startPosition 等于 indexEnd，substring 返回一个空字符串。\n2. 如果省略 indexEnd，substring 提取字符一直到字符串末尾。\n3. 如果任一参数小于 0 或为 NaN，则被当作 0。\n4. 如果任一参数大于 stringName.length，则被当作 stringName.length。\n5. 如果 startPosition 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。见下面的例子。\n\n### toLocaleLowerCase/toLocaleUpperCase/toUpperCase/toLowerCase\n\n> 将字符串转换成小写/大写\n\n```javascript\nstr.toLocaleLowerCase() /\n  str.toLocaleUpperCase() /\n  str.toUpperCase() /\n  str.toLowerCase();\n\n'ABC'.toLocaleLowerCase(); //abc\n'abc'.toLocaleUpperCase(); //ABC\n```\n\n### toString\n\n> 将\\*转换成字符串\n\n```javascript\nvar x = new String('Hello world');\n\nalert(x.toString()); // 输出 \"Hello world\"\n```\n\n### trim/trimStart/trimEnd\n\n> 移除空白字符/起始位置空白字符/结尾位置空白字符\n\n```javascript\nstr.trim() / str.trimStart() / str.trimEnd();\n\n'Testing'.trim(); //'Testing'\n' Testing'.trim(); //'Testing'\n' Testing '.trim(); //'Testing'\n'Testing '.trim(); //'Testing'\n```\n\n### valueOf\n\n> 返回 str 的原始值，等同于 String.prototype.toString\n\n```javascript\nstr.valueOf();\n\nx = new String('Hello world');\nalert(x.valueOf()); // Displays \"Hello world\"\n```\n\n### 扩展学习\n\n```javascript\n1 +\n  '5'[(1, 3, 5)] + //\"15\"\n  1; //\"1,3,51\"\n10 + true; // 11\n15 + {}; // \"15[object Object]\"\n8 + null; // 8\n'queen' + null; // \"queennull\"\n12 + undefined; // NaN\n```\n\n[See examples in jsbin](http://jsbin.com/fiwemir/2/edit?js,console)\n","slug":"javascript/base/String"},{"data":{"date":"May 19, 2020","title":"继承","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## 构造继承\n\n## 原型继承\n\n## 实例继承\n\n## 拷⻉继承\n\n## 原型 prototype 机制或 apply 和 call ⽅法去实现较简单，建议使⽤构造函数与原型混合⽅式\n\n```javascript\nfunction Parent() {\n  this.name = 'wang';\n}\nfunction Child() {\n  this.age = 28;\n}\nChild.prototype = new Parent(); //继承了Parent，通过原型\nvar demo = new Child();\nalert(demo.age);\nalert(demo.name); //得到被继承的属性\n```\n","slug":"javascript/advance/js的继承"},{"data":{"date":"November 20, 2021","title":"Numbers","tags":["python"],"description":"关于数学运算","fromNow":"25 days ago"},"content":"\n## Numbers 类型\n\n> python 有 4 种数字类型\n\n- Boolean\n- Integer\n- Float\n- Complex\n\n### Boolean\n\n布尔值，只有 True 和 False 两个值，可以用来表示真假。\n\n```python\na=True\nb=False\n```\n\n在数学运算种，布尔值的值只有 0 和 1，0 表示 False，1 表示 True。\n\n```python\nc=4+True #5\nd=False\nif d==0:\n    print('d is zero')\nelse:\n    print('d is not zero')\n```\n\n### Integer\n\n```python\na = 37\nb = -299392993727716627377128481812241231\nc = 0x7fa8      # Hexadecimal\nd = 0o253       # Octal\ne = 0b10001111  # Binary\n```\n\n### Float\n\n```python\n>>> a = 2.1 + 4.2\n>>> a == 6.3\nFalse\n>>> a\n6.300000000000001\n>>>\n```\n\n### 比较 Comparisons\n\npython 有如下比较运算符：\n\n```python\nx < y      Less than\nx <= y     Less than or equal\nx > y      Greater than\nx >= y     Greater than or equal\nx == y     Equal to\nx != y     Not equal to\n\n#布尔值操作\nif b >= a and b <= c:\n    print('b is between a and c')\n\nif not (b < a or b > c):\n    print('b is still between a and c')\n```\n\n### 数字转换\n\n使用类型名转换数字，如下：\n\n```python\na = int(3.14)\nb = float(3)\n```\n","slug":"python/1.2-numbers"}]},"__N_SSG":true}