{"pageProps":{"data":{"date":"May 11, 2018","title":"Null","tags":["javascript"],"fromNow":"4 years ago"},"content":{"compiledSource":"var f=Object.defineProperty,i=Object.defineProperties;var s=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var a=(e,n,u)=>n in e?f(e,n,{enumerable:!0,configurable:!0,writable:!0,value:u}):e[n]=u,t=(e,n)=>{for(var u in n||(n={}))l.call(n,u)&&a(e,u,n[u]);if(p)for(var u of p(n))d.call(n,u)&&a(e,u,n[u]);return e},r=(e,n)=>i(e,s(n));var c=(e,n)=>{var u={};for(var o in e)l.call(e,o)&&n.indexOf(o)<0&&(u[o]=e[o]);if(e!=null&&p)for(var o of p(e))n.indexOf(o)<0&&d.call(e,o)&&(u[o]=e[o]);return u};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(u){var o=u,{components:e}=o,n=c(o,[\"components\"]);return mdx(MDXLayout,r(t(t({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Null \\u548C Undefined \\u4E00\\u6837\\uFF0C\\u53EA\\u6709\\u4E00\\u4E2A\\u503C\\uFF0C\\u5C31\\u662F null\"),mdx(\"p\",null,\"null \\u8868\\u793A\\u7A7A\\u5BF9\\u8C61\\u6307\\u9488\\uFF0C\\u4F7F\\u7528 typeof null \\u4F1A\\u8FD4\\u56DE object\"),mdx(\"p\",null,\"null \\u4E0E undefined \\u7684\\u533A\\u522B\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-javascript\"}),`typeof null; //object\ntypeof undefined; //undefined\n\nnull == undefined;\nnull !== undefined;\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 11, 2018","title":"Null","tags":["javascript"],"fromNow":"4 years ago"}},"randomPost":[{"data":{"date":"May 19, 2020","title":"类型判断","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## typeof\n\n> 用于判断操作数的数据类型，适用于除 null、object 的其他 5 种类型的判断。\n\n1. 对于基本类型，除 null 以外，均可以返回正确的结果。\n2. 对于引用类型，除 function 以外，一律返回 object 类型。\n3. 对于 null ，返回 object 类型。\n4. 对于 function 返回 function 类型。\n\n```javascript\ntypeof undefined; // \"undefined\";\ntypeof 1; // \"number\";\ntypeof '1'; // \"string\";\ntypeof true; // \"boolean\";\ntypeof Symbol(); // \"symbol\";\ntypeof { a: 1 }; // \"object\";\n\ntypeof null === 'object'; // true\ntypeof function () {} === 'function'; // true\n```\n\n## instanceof\n\n> 用于判断是对象的那个子类型\n\n```javascript\n[1, 2] instanceof Array; // true\n(function foo() {} instanceof Function); // true\nnew Date(2018) instanceof Date; // true\nnew Number(1) instanceof Number; // true\n1 instanceof Number; // false\n```\n\na instanceof b，instanceof 会去查找 a 的原型链(这里不展开讨论)上是否有 b 的 prototype 属性；如果有，就返回 true，否则返回 false。即判断 a 的原型链上是否有 a.\\_proto\\_\\_ === b.prototype 返回 true\n\n## constructor\n\n> 不仅可以用于对象子类型的判断，还可以用于基本类型的判断，返回创建实例对象的 Object 构造函数的引用，原始数据类型，constructor 只读，基本类型指向对应的内置对象的构造函数\n\n```javascript\n({ a: 1 }.constructor === Object); // true\n[1, 2].constructor === Array; // true\nnew Date(2018).constructor === Date; // true\n(function foo() {}.constructor === Function); // true\n'1'.constructor === String; // true\n(1).constructor === Number; // true\ntrue.constructor === Boolean; // true\n```\n\n## prototype\n\n> Object.prototype.toString.call('...')，通用方法判断对象类型。 Object.prototype 表示 Object 的原型对象，toString 返回表示该对象的字符串，call 用于指定 this\n\n```javascript\nObject.prototype.toString.call('1'); // \"[object String]\"\nObject.prototype.toString.call(1); // \"[object Number]\"\nObject.prototype.toString.call(true); // \"[object Boolean]\"\nObject.prototype.toString.call([1, 2, 3]); // \"[object Array]\"\nObject.prototype.toString.call(function foo() {}); // \"[object Function]\"\nObject.prototype.toString.call(null); //\"[object Null]\"\nObject.prototype.toString.call(undefined); //\"[object Undefined]\"\n```\n","slug":"javascript/advance/类型判断"},{"data":{"date":"July 30, 2017","title":"css的小技巧","tags":["css"],"fromNow":"4 years ago"},"content":"\n1. 使用 CSS 复位\n\n不同浏览器有不同的自带初始样式，通常可以使用 normalize.css、tinyreset.css 进行通配初始化。\n\n```css\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n```\n\n2. 继承 box-sizing\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n```\n\n3. 使用 unset 而不是重置所有属性\n4. 使用 :not() 选择器来决定表单是否显示边框\n5. 为 body 元素添加行高\n6. 為表單元素設置:focus\n7. 垂直居中任何元素\n8. 逗号分隔的列表\n9. 使用负的 nth-child 来选择元素\n10. 使用 SVG 图标\n11. 使用 “形似猫头鹰” 的选择器\n12. 使用 max-height 来建立纯 CSS 的滑块\n13. 创造格子等宽的表格\n14. 利用 Flexbox 去除多余的外边距\n15. 利用属性选择器来选择空链接\n16. 给 “默认” 链接定义样式\n17. 一致的垂直节奏\n18. 内在比例盒\n19. 为破碎图象定义样式\n20. 用 rem 来调整全局大小；用 em 来调整局部大小\n21. 隐藏没有静音、自动播放的影片\n22. 使用选择器 :root 来控制字体弹性\n23. 为更好的移动体验，为表单元素设置字体大小\n24. 使用指针事件來控制鼠标事件\n","slug":"css/小技巧-ChicksTricks"},{"data":{"date":"November 2, 2020","title":"Linux命令export","tags":["linux"],"description":"export用于设置或显示环境变量。","fromNow":"a year ago"},"content":"\n**export**用于设置或显示环境变量。\n\n## 使用方法\n\n```shell\nexport TEST=\"test\"\n# TEST代表变量名，test代表变量值\n\nexport -n TEST\n#-n参数代表一出TEST变量\n```\n\n## 参数：\n\n- -f 　代表[变量名称]中为函数名称。\n- -n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。\n- -p 　列出所有的 shell 赋予程序的环境变量。\n","slug":"linux/Linux命令-export"},{"data":{"date":"November 19, 2019","title":"安装nvm和nodejs","tags":["server"],"fromNow":"2 years ago"},"content":"\n## 通过 nvm 安装 nodejs\n\n## 安装 nvm\n\n```bash\ncurl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n```\n\n或者\n\n```bash\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n```\n\n然后：\n\n```bash\nsource ~/.bashrc\n```\n\n## 安装 nodejs\n\n```bash\nnvm install stable\n```\n","slug":"server/安装nvm和nodejs"},{"data":{"date":"July 12, 2017","title":"三角形绘制方法","tags":["css"],"description":"在做UI（页面重构）的时候，免不了和各种小图标打交道，这其中最多的应该是三角形以及箭头","fromNow":"4 years ago"},"content":"\n在做 UI（页面重构）的时候，免不了和各种小图标打交道，这其中最多的应该是三角形以及箭头，一般情况下可以通过伪类使用 unicode 解决大部分问题。\n\n现在我们来总结下几种使用 css 绘制三角形的方法，dom 结构如下：\n\n```html\n<div class=\"triangle\"></div>\n```\n\n## 最简单最方便的办法 background\n\n```\n代码忽略\n```\n\n## unicode\n\n```css\n.triangle:after {\n  display: block;\n  content: '\\25B2';\n  color: '#fd5353';\n  font-size: 20px;\n}\n```\n\n> 注意，伪类必须加上 content 属性，否则不生效\n\n[unicode 图表](http://www.w3cplus.com/solution/css3content/images/html.png)\n\n## border\n\n```css\n.triangle {\n  width: 0;\n  height: 0;\n  border-left: 50px solid transparent;\n  border-right: 50px solid transparent;\n  border-bottom: 100px solid red;\n}\n```\n\n使用 border 绘制三角形是什么原理？事实上，宽度相等的 border 是以 45 度对接的，如下图：\n\n![image](https://i.stack.imgur.com/hZefy.png)\n\n那么没有了上 border 就是如下图：\n\n![image](https://i.stack.imgur.com/uV9Q5.png)\n\n再设置 div 的宽度为 0，就是如下图：\n\n![image](https://i.stack.imgur.com/K1A7G.png)\n\n再设置 div 的高度为 0，如下图：\n\n![image](https://i.stack.imgur.com/NsmsW.png)\n\n最后设置左右 border 的颜色为透明，如下图：\n\n![image](https://i.stack.imgur.com/B42zY.png)\n\n再来个动图：\n\n![image](https://i.stack.imgur.com/vYvqa.gif)\n\n通过这种原理，我们可以做更多的图形，比如五角星、六角星等，更多图形请移步[shapesofcss](https://css-tricks.com/examples/ShapesOfCSS/)\n\n## 使用 css3 transform rotate\n\n![image](https://i.stack.imgur.com/mEaS1.jpg)\n\n```css\n.triangle {\n  width: 30%;\n  padding-bottom: 21.27%; /* = width / 1.41 */\n  position: relative;\n\n  //划重点\n  overflow: hidden;\n}\n\n.triangle: before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: #0079c6;\n\n  //划重点\n  transform-origin: 0 100%;\n  transform: rotate(45deg);\n}\n```\n\n> 为什么是 1.41，因为正方形的对角线长度是约等于 1.414。\n\n## 使用 clip-path\n\n```css\n.triangle {\n  width: 200px;\n  height: 200px;\n  background: #fd5353;\n  clip-path: polygon(50% 0, 0 100%, 100% 100%);\n}\n```\n\nclip-path 不支持安卓 4.4 以下，其余均需使用浏览器前缀-webkit，[caniuse](http://caniuse.com/#feat=css-clip-path)\n\n详细请移步 [clip-path](https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path)\n","slug":"css/css三角形绘制方法总结"},{"data":{"date":"October 11, 2020","title":"Linux命令nohup","tags":["linux"],"description":"用于忽略 SIGHUP (挂断信号) 在系统后台不挂断地运行命令，退出终端不会影响程序的运行","fromNow":"a year ago"},"content":"\n**nohup**用于忽略 SIGHUP (\"signal hang up\" 译：挂断信号) 在系统后台不挂断地运行命令，退出终端不会影响程序的运行。\n\nnohup 命令在默认情况下（非重定向时），会输出一个名叫 nohup.out 的文件到当前目录下，如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。\n\n## 使用方法\n\n```shell\nnohup <command>\n```\n\n停止运行\n\n```shell\n#使用如下命令找到进程pid，然后使用kill杀掉进程\nps -aux | grep <command>\n```\n\n## 参数\n\n- Command：要执行的命令。\n- Arg：一些参数，可以指定输出文件。\n- &：让命令在后台执行，终端退出后命令仍旧执行。\n\nnohup 命令可以在 Linux、macOS、WSL 和任何有 UNIX 环境的地方使用\n","slug":"linux/Linux命令-nohup"}]},"__N_SSG":true}