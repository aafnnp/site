{"pageProps":{"data":{"date":"May 19, 2020","title":"作用域","tags":["javascript"],"fromNow":"2 years ago"},"content":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var e=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,u=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&s(o,n,t[n]);if(e)for(var n of e(t))a.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var p in o)r.call(o,p)&&t.indexOf(p)<0&&(n[p]=o[p]);if(o!=null&&e)for(var p of e(o))t.indexOf(p)<0&&a.call(o,p)&&(n[p]=o[p]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var p=n,{components:o}=p,t=D(p,[\"components\"]);return mdx(MDXLayout,y(u(u({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"\\u4F5C\\u2F64\\u57DF\\u94FE\\u7684\\u4F5C\\u2F64\\u662F\\u4FDD\\u8BC1\\u6267\\u2F8F\\u73AF\\u5883\\u2FA5\\u6709\\u6743\\u8BBF\\u95EE\\u7684\\u53D8\\u91CF\\u548C\\u51FD\\u6570\\u662F\\u6709\\u5E8F\\u7684\\uFF0C\\u4F5C\\u2F64\\u57DF\\u94FE\\u7684\\u53D8\\u91CF\\u53EA\\u80FD\\u5411\\u4E0A\\u8BBF\\u95EE\\uFF0C\\u53D8\\u91CF\\u8BBF\\u95EE\\u5230 window \\u5BF9\\u8C61\\u5373\\u88AB\\u7EC8\\u2F4C\\uFF0C\\u4F5C\\u2F64\\u57DF\\u94FE\\u5411\\u4E0B\\u8BBF\\u95EE\\u53D8\\u91CF\\u662F\\u4E0D\\u88AB\\u5141\\u8BB8\\u7684\\u7B80\\u5355\\u7684\\u8BF4\\uFF0C\\u4F5C\\u2F64\\u57DF\\u5C31\\u662F\\u53D8\\u91CF\\u4E0E\\u51FD\\u6570\\u7684\\u53EF\\u8BBF\\u95EE\\u8303\\u56F4\\uFF0C\\u5373\\u4F5C\\u2F64\\u57DF\\u63A7\\u5236\\u7740\\u53D8\\u91CF\\u4E0E\\u51FD\\u6570\\u7684\\u53EF\\u2EC5\\u6027\\u548C\\u2F63\\u547D\\u5468\\u671F\"))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 19, 2020","title":"作用域","tags":["javascript"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"May 19, 2020","title":"执行上下文","tags":["javascript"],"fromNow":"2 years ago"},"content":"","slug":"javascript/advance/执行上下文"},{"data":{"date":"October 12, 2020","title":"Linux命令ping","tags":["linux"],"description":"ping命令用于检测主机","fromNow":"a year ago"},"content":"\nLinux ping 命令用于检测主机。\n\n执行 ping 指令会使用 ICMP 传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。\n\n如下是 ping baidu.com：\n\n![XimNX7](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/XimNX7.png)\n\n**ping**发出请求到对应的主机，主机返回结果。\n\n默认情况**ping**会每秒发出请求，直到使用**ctrl+c**中断，也可以使用-c times 指定接收包的次数，如：\n\n```shell\nping -c 2 baidu.com\n```\n\n当结束**ping**命令时，屏幕上会打印出统计结果，其中包括丢包率以及速率\n\n```shell\nping -i 3 -s 1024 -t 255 baidu.com\n\n# -i 3 发送周期为 3秒 -s 设置发送包的大小 -t 设置TTL值为 255\n```\n\n## 参数\n\n- -d 使用 Socket 的 SO_DEBUG 功能。\n- -c<完成次数> 设置完成要求回应的次数。\n- -f 极限检测。\n- -i<间隔秒数> 指定收发信息的间隔时间。\n- -I<网络界面> 使用指定的网络接口送出数据包。\n- -l<前置载入> 设置在送出要求信息之前，先行发出的数据包。\n- -n 只输出数值。\n- -p<范本样式> 设置填满数据包的范本样式。\n- -q 不显示指令执行过程，开头和结尾的相关信息除外。\n- -r 忽略普通的 Routing Table，直接将数据包送到远端主机上。\n- -R 记录路由过程。\n- -s<数据包大小> 设置数据包的大小。\n- -t<存活数值> 设置存活数值 TTL 的大小。\n- -v 详细显示指令的执行过程。\n","slug":"linux/Linux命令-ping"},{"data":{"date":"July 30, 2017","title":"css的小技巧","tags":["css"],"fromNow":"4 years ago"},"content":"\n1. 使用 CSS 复位\n\n不同浏览器有不同的自带初始样式，通常可以使用 normalize.css、tinyreset.css 进行通配初始化。\n\n```css\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n```\n\n2. 继承 box-sizing\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n```\n\n3. 使用 unset 而不是重置所有属性\n4. 使用 :not() 选择器来决定表单是否显示边框\n5. 为 body 元素添加行高\n6. 為表單元素設置:focus\n7. 垂直居中任何元素\n8. 逗号分隔的列表\n9. 使用负的 nth-child 来选择元素\n10. 使用 SVG 图标\n11. 使用 “形似猫头鹰” 的选择器\n12. 使用 max-height 来建立纯 CSS 的滑块\n13. 创造格子等宽的表格\n14. 利用 Flexbox 去除多余的外边距\n15. 利用属性选择器来选择空链接\n16. 给 “默认” 链接定义样式\n17. 一致的垂直节奏\n18. 内在比例盒\n19. 为破碎图象定义样式\n20. 用 rem 来调整全局大小；用 em 来调整局部大小\n21. 隐藏没有静音、自动播放的影片\n22. 使用选择器 :root 来控制字体弹性\n23. 为更好的移动体验，为表单元素设置字体大小\n24. 使用指针事件來控制鼠标事件\n","slug":"css/小技巧-ChicksTricks"},{"data":{"date":"January 19, 2020","title":"使用js获取位置","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":"\n![quick-tip-detecting-your-location-with-javascript](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190121163457.png)\n\n首先，我们使用 caniuse-cmd 查看下 geolocation 的兼容性,几乎所有的现代浏览器都支持 geolocation\n\nGeolocation 通过使用 GPS、WIFI、IP 地址检测自己的位置信息，开发人员可使用这些信息给用户提供更好的搜索建议，比如附近的便利店，并实现互动。\n\n本地资源（location sources） JavaScript 提供了一个简单，但功能强大的工具来定位设备的地理定位 API 的形式。它包括一个小的一组易于使用的方法，可以获得设备的位置：\n\nGPS-主要在移动设备，精确到 10 米 WIFI-几乎所有的联网设备 IP-仅限于区域，备选方案采用哪种方案取决于浏览器支持，一般情况下 WIFI 快于 GPS 快于 IP\n\n使用 geolocation api 通过使用 caniuse-cmd，我们知道大部分浏览器支持 geolocation，但我们需要做好判断，请确保可以正常使用 geolocation\n\n```javascript\nif (navigator.geolocation) {\n  // 支持geolocation\n} else {\n  // 不支持geolocation\n}\n```\n\nnavigator.geolocation 有如下几个方法：\n\n- Geolocation.getCurrentPosition() //获取当前位置\n- Geolocation.watchPosition() //监测定位\n- Geolocation.clearWatch() //清除监测\n\ngetCurrentPosition() and watchPosition() methods 的工作方式是基本相同的。这两方法目的基本相同，都是用来去获取 device 的位置信息吧， 都是以一个异步的工作形式来获取位置信息的， 他们也都依赖于一个 attempt call 的结果\n\n```javascript\nnavigator.geolocation.getCurrentPosition(\n\n    // 位置获取成功\n    function(position) {\n\n        position = {\n            coords: {\n                latitude - //纬度.\n                longitude - //经度.\n                altitude - //高度.\n                accuracy - //精确度.\n                altitudeAccuracy - //高度的准确性.\n                heading - //.\n                speed - //.\n            }\n            timestamp - //时间戳.\n        }\n\n    },\n\n    // 位置获取失败\n    function(error){\n\n    }\n);\n```\n\n如上，使用 geolocation api 很简单，只需要正确调用方法，等待返回坐标即可。\n\n用户权限由于 geolocation api 会暴露用户信息，所以当应用程序访问的时候，将以弹窗请求用户操作，如下\n\n主机安全另一个保护措施是使用 HTTPS 连接。由于一个新的网络安全策略，谷歌浏览器（桌面版和手机版）不再允许非安全的主机上运行的 geolocation api。使用 https 可以最大限度的减少数据信息的盗用或被滥用的风险。\n\n这里查看更多关于这个问题。\n\n```javascript\n一个简单的Demo;\nfindMeButton.on('click', function () {\n  navigator.geolocation.getCurrentPosition(function (position) {\n    // Get the coordinates of the current position.\n    var lat = position.coords.latitude;\n    var lng = position.coords.longitude;\n\n    // Create a new map and place a marker at the device location.\n    var map = new GMaps({\n      el: '#map',\n      lat: lat,\n      lng: lng,\n    });\n\n    map.addMarker({\n      lat: lat,\n      lng: lng,\n    });\n  });\n});\n```\n\n[在线 demo](https://jsfiddle.net/dannymarkov/ubrvm4ao/ 'https://jsfiddle.net/dannymarkov/ubrvm4ao/')\n\n翻译自[Detecting Your Location With JavaScript](http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/ 'http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/')\n","slug":"translate/使用js获取位置"},{"data":{"date":"May 11, 2018","title":"Null","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nNull 和 Undefined 一样，只有一个值，就是 null\n\nnull 表示空对象指针，使用 typeof null 会返回 object\n\nnull 与 undefined 的区别\n\n```javascript\ntypeof null; //object\ntypeof undefined; //undefined\n\nnull == undefined;\nnull !== undefined;\n```\n","slug":"javascript/base/Null"},{"data":{"date":"April 2, 2021","title":"变量、基本数据类型、字符串插值","tags":["swift"],"description":"swift 提供的数据类型包括：整形 Int、浮点数 Double 和 Float、布尔类型 Bool 以及字符串类型 String、Optional、Array、Dictionary、Struct、Class 等。","fromNow":"8 months ago"},"content":"\n## 变量\n\n变量是一种使用方便的占位符，用于引用计算机内存地址。\n\nswift 每个变量指定了特定的类型，类型决定变量占用内存的大小，也决定可存储值的范围。\n\n变量名可以由字母、数字和下划线组成，以字母或下划线开始，且区分大小写。\n\n变量名也可以使用简单的 Unicode 字符\n\n变量和常量可以使用 print 函数输出，在字符串中可以使用括号与反斜线插入变量\n\n```swift\n// 变量声明\nvar variableName = <initial value>\n\n//实例\nimport Cocoa\n\nvar a = 42\nprint(a) //输出42\n\nvar b:float\nb = 3.1415926\nprint(b) //输出3.1415926\n\nvar _var = \"hello swift\"\nvar 你好 = \"世界\"\nprint(_var) // hello swift\nprint(你好) //世界\n\nvar name = \"manon\"\n\nprint(\"\\(name)\") //manon\n```\n\n标准 Swift 字符串使用双引号，但不能包含换行符，如果您想要多行字符串，使用三个双引号开始和结束，如下所示：\n\n```swift\nvar str1 = \"\"\"\nThis goes\nover multiple\nlines\n\"\"\"\nprint(str1) // \"This goes\\nover multiple\\nlines\"\n```\n\n如果不希望显示`\\`，应该如下写：\n\n```swift\nvar str2 = \"\"\"\nThis goes \\\nover multiple \\\nlines\n\"\"\"\nprint(str2) //\"This goes nover multiple nlines\"\n```\n\n## 浮点和布尔值\n\nSwift 中的另外两种基本数据类型是双精度和布尔值。\n\n```swift\nvar pi = 3.141\nvar awesome = true\n```\n\n## 字符串插值\n\n> 将变量放置在字符串中\n\n```swift\nvar score = 85\nvar str = \"Your score was \\(score)\"\n\nvar results = \"The test results are here: \\(str)\"\n```\n\n## 常量\n\n> 常量一旦赋值，不能再次赋值，否则会报错。\n\n```swift\n//声明\nlet _const = <initial value>\nlet _const:Float = 3.1415926\n\n// 命名\n和变量命名相同\n// 输出\n和变量命名相同\n```\n\n## 类型声明\n\n在创建变量或常量的时候可以声明数据类型，如果没有，swift 将推导其数据类型，如下：\n\n```swift\nlet str = \"Hello, playground\" //swift推导str为String\n\n// 主动声明类型\nlet album: String = \"Reputation\"\nlet year: Int = 1989\nlet height: Double = 1.78\nlet taylorRocks: Bool = true\n```\n\n## 扩展\n\n字符串是一系列字符的集合，比如`hello world`，它的数据类型为 String\n\n```swift\nimport Cocoa\n//创建字符串\nvar str1 = \"hello world\"\nprint(str1)\n\n//空字符串\nvar str2 = \"\"\nvar str3 = \" manon\"\nif str2.isEmpty() {\n\tprint(\"str2 是空字符串\")\n}else{\n\tprint(\"str2 不是空字符串\")\n}\n\n// 连接字符串\n\nvar str4 = str1 + str3\nprint(str4) //\"hello world manon\"\nprint('str1和str3连接：\\(str4)')\n\n// 字符串长度\nprint(str4.count)\n\n// 字符串比较\nif str1==str2{\n\tprint(\"\\(str1) 与 \\(str2)是相等的\")\n}else{\n\tprint(\"\\(str1) 与 \\(str2)是不相等的\")\n}\n```\n\n字符串函数及运算符\n\n- isEmpty `判断字符串是否为空，返回布尔值`\n- hasPrefix `检查字符串是否有特定的前缀`\n- hasSuffix `检查字符串是否有特定的后缀`\n- Int `转换字符串数字为整型`\n- count `计算字符串的长度`\n- utf8、utf16 `遍历String的utf8属性访问utf8、utf16编码`\n- unicodeScalars `遍历String的unicodeScalars属性访问Unicode标量编码`\n- +、+=、==、<、！= `字符串操作符`\n","slug":"swift/100days/day01"}]},"__N_SSG":true}