{"pageProps":{"data":{"date":"May 19, 2020","title":"闭包","tags":["javascript"],"fromNow":"2 years ago"},"content":{"compiledSource":"var u=Object.defineProperty,m=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;var c=(e,a,r)=>a in e?u(e,a,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[a]=r,p=(e,a)=>{for(var r in a||(a={}))l.call(a,r)&&c(e,r,a[r]);if(t)for(var r of t(a))n.call(a,r)&&c(e,r,a[r]);return e},i=(e,a)=>m(e,h(a));var s=(e,a)=>{var r={};for(var o in e)l.call(e,o)&&a.indexOf(o)<0&&(r[o]=e[o]);if(e!=null&&t)for(var o of t(e))a.indexOf(o)<0&&n.call(e,o)&&(r[o]=e[o]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var o=r,{components:e}=o,a=s(o,[\"components\"]);return mdx(MDXLayout,i(p(p({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u4EC0\\u4E48\\u662F\\u95ED\\u5305\"),mdx(\"p\",null,\"\\u4F5C\\u7528\\uFF1A\\u80FD\\u591F\\u5728\\u51FD\\u6570\\u5B9A\\u4E49\\u7684\\u4F5C\\u7528\\u57DF\\u5916\\uFF0C\\u4F7F\\u7528\\u51FD\\u6570\\u5B9A\\u4E49\\u4F5C\\u7528\\u57DF\\u5185\\u7684\\u5C40\\u90E8\\u53D8\\u91CF\\uFF0C\\u5E76\\u4E14\\u4E0D\\u4F1A\\u6C61\\u67D3\\u5168\\u5C40\\u3002\"),mdx(\"p\",null,\"\\u539F\\u7406\\uFF1A\\u57FA\\u4E8E\\u8BCD\\u6CD5\\u4F5C\\u7528\\u57DF\\u94FE\\u548C\\u5783\\u573E\\u56DE\\u6536\\u673A\\u5236\\uFF0C\\u901A\\u8FC7\\u7EF4\\u6301\\u51FD\\u6570\\u4F5C\\u7528\\u57DF\\u7684\\u5F15\\u7528\\uFF0C\\u8BA9\\u51FD\\u6570\\u4F5C\\u7528\\u57DF\\u53EF\\u4EE5\\u5728\\u5F53\\u524D\\u4F5C\\u7528\\u57DF\\u5916\\u88AB\\u8BBF\\u95EE\\u5230\"),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-javascript\"}),`function foo() {\n  var a = 'hzfe';\n  function bar() {\n    console.log(a);\n  }\n  return bar;\n}\n\nvar baz = foo();\nbaz(); // hzfe\n`)),mdx(\"p\",null,\"\\u5728\\u8FD9\\u4E2A\\u4F8B\\u5B50\\u4E2D\\uFF0C\\u51FD\\u6570 bar \\u4F5C\\u4E3A\\u8FD4\\u56DE\\u503C\\u8FD4\\u56DE\\u540E\\uFF0C\\u5728\\u81EA\\u5DF1\\u5B9A\\u4E49\\u7684\\u8BCD\\u6CD5\\u4F5C\\u7528\\u57DF\\u4EE5\\u5916\\u7684\\u5730\\u65B9\\u6267\\u884C\\u3002\\u4E00\\u822C\\u6765\\u8BF4\\uFF0C\\u5728\\u51FD\\u6570 foo \\u6267\\u884C\\u540E\\uFF0C\\u901A\\u5E38\\u4F1A\\u671F\\u5F85\\u51FD\\u6570 foo \\u7684\\u6574\\u4E2A\\u5185\\u90E8\\u4F5C\\u7528\\u57DF\\u88AB\\u5F15\\u64CE\\u56DE\\u6536\\u673A\\u5236\\u9500\\u6BC1\\u3002\\u800C\\u95ED\\u5305\\u53EF\\u4EE5\\u963B\\u6B62\\u8FD9\\u4EF6\\u4E8B\\u60C5\\u7684\\u53D1\\u751F\\u3002\\u4E8B\\u5B9E\\u4E0A\\u5185\\u90E8\\u4F5C\\u7528\\u57DF\\u4F9D\\u7136\\u5B58\\u5728\\uFF0C\\u56E0\\u4E3A\\u51FD\\u6570 bar \\u672C\\u8EAB\\u5728\\u4F7F\\u7528\\uFF0C\\u6240\\u4EE5\\u5E76\\u4E0D\\u4F1A\\u88AB\\u56DE\\u6536\\u3002\"),mdx(\"p\",null,\"\\u5728 JavaScript \\u4E2D\\uFF0C\\u6BCF\\u5F53\\u521B\\u5EFA\\u4E00\\u4E2A\\u51FD\\u6570\\uFF0C\\u95ED\\u5305\\u5C31\\u4F1A\\u5728\\u51FD\\u6570\\u521B\\u5EFA\\u7684\\u540C\\u65F6\\u88AB\\u521B\\u5EFA\\u51FA\\u6765\\u3002\"),mdx(\"h2\",null,\"\\u95ED\\u5305\\u7684\\u5E94\\u7528\"),mdx(\"p\",null,\"\\u65E0\\u8BBA\\u4F55\\u65F6\\u4F55\\u5730\\uFF0C\\u5982\\u679C\\u5C06\\u51FD\\u6570\\u4F5C\\u4E3A\\u8FD4\\u56DE\\u503C\\uFF0C\\u5C31\\u4F1A\\u770B\\u5230\\u95ED\\u5305\\u5728\\u8FD9\\u4E9B\\u51FD\\u6570\\u4E2D\\u7684\\u5E94\\u7528\\u3002\\u5728\\u5B9A\\u65F6\\u5668\\uFF0C\\u4E8B\\u4EF6\\u76D1\\u542C\\u5668\\uFF0Cajax \\u8BF7\\u6C42\\uFF0C\\u8DE8\\u7A97\\u53E3\\u901A\\u4FE1\\uFF0Cweb workers \\u6216\\u8005\\u4EFB\\u4F55\\u5176\\u4ED6\\u7684\\u5F02\\u6B65/\\u540C\\u6B65\\u4EFB\\u52A1\\u4E2D\\uFF0C\\u53EA\\u8981\\u4F7F\\u7528\\u4E86\\u56DE\\u8C03\\u51FD\\u6570\\uFF0C\\u5B9E\\u9645\\u4E0A\\u5C31\\u662F\\u4F7F\\u7528\\u95ED\\u5305\\u3002\\u4F7F\\u7528\\u95ED\\u5305\\u7684\\u4F8B\\u5B50\\u53EF\\u4EE5\\u53C2\\u8003\\u5B9E\\u73B0\\u8282\\u6D41\\u9632\\u6296\\u51FD\\u6570\\u3002\"),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-javascript\"}),`var a = 'hzfe';\n(function IIFE() {\n  console.log(a);\n})();\n`)),mdx(\"p\",null,\"\\u901A\\u5E38\\u8BA4\\u4E3A\\u7ACB\\u5373\\u6267\\u884C\\u51FD\\u6570\\uFF08IIFE\\uFF09\\u662F\\u5178\\u578B\\u7684\\u89C2\\u5BDF\\u95ED\\u5305\\u7684\\u5178\\u578B\\u4F8B\\u5B50\\uFF0C\\u4F46\\u4E25\\u683C\\u6765\\u8BF4\\u5E76\\u4E0D\\u662F\\u3002\\u867D\\u7136\\u521B\\u5EFA\\u4E86\\u95ED\\u5305\\uFF0C\\u4F46\\u6CA1\\u6709\\u4F53\\u73B0\\u51FA\\u95ED\\u5305\\u7684\\u4F5C\\u7528\\u3002\\u56E0\\u4E3A\\u51FD\\u6570\\u5E76\\u4E0D\\u662F\\u5728\\u5B83\\u672C\\u8EAB\\u7684\\u8BCD\\u6CD5\\u4F5C\\u7528\\u57DF\\u4EE5\\u5916\\u6267\\u884C\\u7684\\u3002 \\u5B83\\u5728\\u5B9A\\u4E49\\u65F6\\u6240\\u5728\\u7684\\u4F5C\\u7528\\u57DF\\u4E2D\\u6267\\u884C\\uFF0C\\u800C\\u975E\\u5916\\u90E8\\u4F5C\\u7528\\u57DF\\u3002\"),mdx(\"h2\",null,\"\\u6269\\u5C55\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",p({parentName:\"li\"},{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\"}),\"\\u95ED\\u5305 MDN\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",p({parentName:\"li\"},{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/Closed_Overlay_Requires_Arguments\"}),\"\\u5783\\u573E\\u56DE\\u6536\\u673A\\u5236\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",p({parentName:\"li\"},{href:\"https://www.imooc.com/article/2907\"}),\"\\u4F60\\u4E0D\\u77E5\\u9053\\u7684 JavaScript\"))))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 19, 2020","title":"闭包","tags":["javascript"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"April 8, 2021","title":"函数、参数、错误","tags":["swift"],"description":"一般来说，一个函数是可以通过外部代码调用的一个“子程序”（或在递归的情况下由内部函数调用）。像程序本身一样，一个函数由称为函数体的一系列语句组成。值可以传递给一个函数，函数将返回一个值。","fromNow":"8 months ago"},"content":"\n## 创建函数\n\nSwift 函数从 func 关键字开始，然后是函数名，然后`{}`。函数的所有主体——都放在大括号内。\n\n```swift\n// 创建函数\nfunc printHelp() {\n    let message = \"\"\"\n\t\tWelcome to MyApp!\n\n\t\tRun this app inside a directory of images and\n\t\tMyApp will resize them all into thumbnails\n\t\t\"\"\"\n    print(message)\n}\n// 调用函数printHelp\nprintHelp()\n```\n\n## 接收参数\n\n函数接收参数，比如内置的`print`函数，参数定义数据类型表示接收的参数类型。\n\n```swift\nprint(\"hello world\") // hello world即为参数\n```\n\n创建函数打印平方值\n\n```swift\nfunc square(number: Int) {\n    print(number * number)\n}\n// Int 表示参数只接受Int类型\nsquare(number: 8) // 64\n```\n\n## 返回值\n\n除了接收数据，函数还可以返回数据。通过`-> <数据类型>`告诉 swift 将返回什么数据类型的值。\n\n```swift\nfunc square(number: Int) -> Int {\n    return number * number\n}\n// -> Int 表示将返回Int类型的值\nlet result = square(number: 8)\nprint(result) // 64\n```\n\n## 参数标签\n\n每一个函数的形式参数都包含形式参数标签和形式参数名两部分\n\n- 形式参数标签用在调用函数的时候\n- 形式参数名用在函数的实现当中\n- 在调用函数的时候，每一个形式参数前边都会有一个形式参数标签\n- 默认情况下，形式参数使用它们的形式参数名作为形式参数标签\n- 如果不想要形式参数标签，可以在形式参数名称前加上`_`\n\n```swift\n//这里的info1和info2就是形式参数标签\n//name和age是形式参数名称\nfunc personalInfo(info1 name : String, info2 age : Int) { //在函数的实现中使用形式参数名称 print(\"姓名：(name)，年龄：(age)\")\n}\n//在函数调用的时候使用形式参数标签\npersonalInfo(info1: \"norman\", info2: 23)\n\n//下面是默认写法\n//此时，name和age既是形式参数标签，也是形式参数名称\nfunc personalInfo(name : String, age : Int) { //在函数内部实现的时候，name和age是形式参数名称 print(\"姓名：(name)，年龄：(age)\")\n}\n//在函数调用的时候，name和age是形式参数标签\npersonalInfo(name: \"norman\", age: 24)\n\n//如果不想要形式参数标签，可以在形式参数名称前面加 _\nfunc personalInfo(_ name : String, _ age : Int) { print(\"姓名：(name)，年龄：(age)\")\n}\n//在函数调用的时候，没有形式参数标签\npersonalInfo(\"norman\", 24)\n```\n\n## 默认参数\n\nswift 允许设置参数默认值，如：\n\n```swift\nfunc greet(_ person: String, nicely: Bool = true) {\n    if nicely == true {\n        print(\"Hello, \\(person)!\")\n    } else {\n        print(\"Oh no, it's \\(person) again...\")\n    }\n}\n\n// 调用\ngreet(\"Taylor\")\ngreet(\"Taylor\", nicely: false)\n```\n\n## 变量参数\n\n当参数不确定，或者参数有多个，在类型后使用`...`，swift 会将传入的值转换为数组，因此可以在函数内部使用循环语句处理。如：\n\n```swift\nfunc square(numbers: Int...) {\n    for number in numbers {\n        print(\"\\(number) squared is \\(number * number)\")\n    }\n}\n\nsquare(numbers: 1, 2, 3, 4, 5)\n```\n\n## io 参数\n\n一般默认在函数中定义的参数都是常量参数，也就是这个参数你只可以查询使用，不能改变它的值。\n\n如果想要声明一个变量参数，可以在参数定义前加 inout 关键字，这样就可以改变这个参数的值了。\n\n比如，如果你想将一个数字翻倍——即直接更改值，而不是返回一个新的值——你可以写一个这样的函数：\n\n```swift\nfunc doubleInPlace(number: inout Int) {\n    number *= 2\n}\n\nvar myNum = 10\ndoubleInPlace(number: &myNum)\n```\n\n## 函数总结\n\n- 函数允许我们重复使用代码，而不需要重复声明。\n- 函数可以接受参数——只需告诉 Swift 每个参数的类型。\n- 函数可以返回值，同样，您只需指定要返回的类型。如果您想返回一些内容，可以使用元组。\n- 可以在内部和外部对参数使用不同的名称，也可以完全忽略外部名称。\n- 参数可以具有默认值，这有助于在通常使用特定值时编写更少的代码。\n- 可变参数函数接受零个或多个特定参数，Swift 将输入转换为数组。\n- 函数可以抛出错误，但必须使用 try 和 handle errors 来调用它们。\n- 可以使用 inout 来更改函数内部的变量，但通常最好是返回一个新值。\n","slug":"swift/100days/day05"},{"data":{"date":"May 7, 2018","title":"Undefined","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nUndefined 类型只有一个值-undefined，即声明变量但未赋值，这个变量的值就是 undefined。\n\n```javascript\nvar a;\nconsole.log(a == undefined); //true\nconsole.log(typeof a); //\"undefined\"\n```\n\n> 对未初始化的变量和未声明的变量执行 typeof 都会返回 undefined\n","slug":"javascript/base/Undefined"},{"data":{"date":"May 6, 2021","title":"从零开始配置React开发环境","tags":["react","javascript"],"description":"学会使用 webpack 和 Babel 从零配置React开发环境","fromNow":"7 months ago"},"content":"\n![D0Xewe](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/D0Xewe.jpg)\n\n## 为什么要创建自己的配置？\n\n通过一步步创建自己的配置可以学习到`webpack`和`babel`、`eslint`等这些工具的知识。\n\n随着开发时间及项目的增长，需要集成更多的工具到项目中，比如：\n\n- webpack loaders（less、sass）\n- 服务器渲染\n- ES next\n- mobx、redux 等\n- jest、cypress 等\n\n## 初始化项目\n\n```shell\n#创建并进入目录\nmkdir react-config-tutorial && cd react-config-tutorial\n\n#初始化npm项目\nnpm init -y\n\n#安装react\nnpm install react react-dom\n```\n\n## 配置 webpack\n","slug":"react/从零开始配置react开发环境"},{"data":{"date":"January 19, 2020","title":"使用js获取位置","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":"\n![quick-tip-detecting-your-location-with-javascript](https://cdn.jsdelivr.net/gh/funnypan/pics@master/images/20190121163457.png)\n\n首先，我们使用 caniuse-cmd 查看下 geolocation 的兼容性,几乎所有的现代浏览器都支持 geolocation\n\nGeolocation 通过使用 GPS、WIFI、IP 地址检测自己的位置信息，开发人员可使用这些信息给用户提供更好的搜索建议，比如附近的便利店，并实现互动。\n\n本地资源（location sources） JavaScript 提供了一个简单，但功能强大的工具来定位设备的地理定位 API 的形式。它包括一个小的一组易于使用的方法，可以获得设备的位置：\n\nGPS-主要在移动设备，精确到 10 米 WIFI-几乎所有的联网设备 IP-仅限于区域，备选方案采用哪种方案取决于浏览器支持，一般情况下 WIFI 快于 GPS 快于 IP\n\n使用 geolocation api 通过使用 caniuse-cmd，我们知道大部分浏览器支持 geolocation，但我们需要做好判断，请确保可以正常使用 geolocation\n\n```javascript\nif (navigator.geolocation) {\n  // 支持geolocation\n} else {\n  // 不支持geolocation\n}\n```\n\nnavigator.geolocation 有如下几个方法：\n\n- Geolocation.getCurrentPosition() //获取当前位置\n- Geolocation.watchPosition() //监测定位\n- Geolocation.clearWatch() //清除监测\n\ngetCurrentPosition() and watchPosition() methods 的工作方式是基本相同的。这两方法目的基本相同，都是用来去获取 device 的位置信息吧， 都是以一个异步的工作形式来获取位置信息的， 他们也都依赖于一个 attempt call 的结果\n\n```javascript\nnavigator.geolocation.getCurrentPosition(\n\n    // 位置获取成功\n    function(position) {\n\n        position = {\n            coords: {\n                latitude - //纬度.\n                longitude - //经度.\n                altitude - //高度.\n                accuracy - //精确度.\n                altitudeAccuracy - //高度的准确性.\n                heading - //.\n                speed - //.\n            }\n            timestamp - //时间戳.\n        }\n\n    },\n\n    // 位置获取失败\n    function(error){\n\n    }\n);\n```\n\n如上，使用 geolocation api 很简单，只需要正确调用方法，等待返回坐标即可。\n\n用户权限由于 geolocation api 会暴露用户信息，所以当应用程序访问的时候，将以弹窗请求用户操作，如下\n\n主机安全另一个保护措施是使用 HTTPS 连接。由于一个新的网络安全策略，谷歌浏览器（桌面版和手机版）不再允许非安全的主机上运行的 geolocation api。使用 https 可以最大限度的减少数据信息的盗用或被滥用的风险。\n\n这里查看更多关于这个问题。\n\n```javascript\n一个简单的Demo;\nfindMeButton.on('click', function () {\n  navigator.geolocation.getCurrentPosition(function (position) {\n    // Get the coordinates of the current position.\n    var lat = position.coords.latitude;\n    var lng = position.coords.longitude;\n\n    // Create a new map and place a marker at the device location.\n    var map = new GMaps({\n      el: '#map',\n      lat: lat,\n      lng: lng,\n    });\n\n    map.addMarker({\n      lat: lat,\n      lng: lng,\n    });\n  });\n});\n```\n\n[在线 demo](https://jsfiddle.net/dannymarkov/ubrvm4ao/ 'https://jsfiddle.net/dannymarkov/ubrvm4ao/')\n\n翻译自[Detecting Your Location With JavaScript](http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/ 'http://tutorialzine.com/2016/06/quick-tip-detecting-your-location-with-javascript/')\n","slug":"translate/使用js获取位置"},{"data":{"date":"January 8, 2021","title":"基于Docker镜像的更新","tags":["docker"],"fromNow":"a year ago"},"content":"\n1. 停止镜像\n\n```shell\ndocker stop <ID or name>\n```\n\n2. 移除镜像\n\n```shell\ndocker rm <ID or name>\n```\n\n3. 拉取最新镜像\n\n```shell\ndocker pull <image name>\n```\n\n4. 启动镜像\n\n```shell\ndocker run <image name> ...options\n```\n\n## 更多\n","slug":"docker/Docker更改镜像"},{"data":{"date":"October 13, 2020","title":"Linux命令cd","tags":["linux"],"description":"cd命令用于切换当前工作目录","fromNow":"a year ago"},"content":"\n**cd**命令用于切换当前工作目录。\n\n> ~ 也表示为 home 目录 的意思， . 则是表示目前所在的目录， .. 则表示目前目录位置的上一层目录\n\n## 使用方法\n\n```shell\n#切换到某个目录\ncd foldername\n\n#当前所在目录\ncd .\n\n#切换到上一层目录\ncd ..\n\n#切换到home目录\ncd ~\n\n#切换到根目录\ncd /\n```\n","slug":"linux/Linux命令-cd"}]},"__N_SSG":true}