{"pageProps":{"data":{"date":"May 19, 2020","title":"强制类型转换","tags":["javascript"],"fromNow":"2 years ago"},"content":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,p=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&s(o,n,t[n]);if(u)for(var n of u(t))a.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)r.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&u)for(var e of u(o))t.indexOf(e)<0&&a.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,y(p(p({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 19, 2020","title":"强制类型转换","tags":["javascript"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"May 19, 2020","title":"事件循环","tags":["javascript"],"description":"事件循环是每个前端开发必须理解的概念","fromNow":"2 years ago"},"content":"\n![w2fi5V](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/w2fi5V.jpg)\n\n众所周知 JS 是⻔⾮阻塞单线程语⾔，因为在最初 JS 就是为了和浏览器交互⽽诞⽣的。如果 JS 是⻔多线程的语⾔话，我们在多个线程中处理 DOM 就可能会发⽣问题（⼀个线程中新加节点，另⼀个线程中删除节点），当然可以引⼊读写锁解决这个问题。\n","slug":"javascript/advance/event_loop"},{"data":{"date":"November 24, 2021","title":"Strings","tags":["python"],"description":"","fromNow":"21 days ago"},"content":"\n## 字符串文本\n\n> 字符串文本通常是由单引号或者双引号括起来的。通常单行单引号，多行三引号。\n\n```python\n# Single quote\na = 'Yeah but no but yeah but...'\n\n# Double quote\nb = \"computer says no\"\n\n# Triple quotes\nc = '''\nLook into my eyes, look into my eyes, the eyes, the eyes, the eyes,\nnot around the eyes,\ndon't look around the eyes,\nlook into my eyes, you're under.\n'''\n```\n\n## 字符串转义\n\n```python\n'\\n'      # 换行\n'\\r'      # 回车\n'\\t'      # 水平制表符\n'\\''      # 单引号\n'\\\"'      # 双引号\n'\\\\'      # 反斜杠\n```\n\n## 字符串运算\n\n```python\n+  # 字符串连接\n*  # 重复\n[] # 取子串\n[:] # 截取字符串的一部分\nin # 判断字符串是否包含某个字符串\nnot in # 判断字符串是否不包含某个字符串\nr/re # 匹配字符串\n% # 格式化字符串\n\n\na = \"Hello\"\nb = \"Python\"\n\nprint \"a + b 输出结果：\", a + b\nprint \"a * 2 输出结果：\", a * 2\nprint \"a[1] 输出结果：\", a[1]\nprint \"a[1:4] 输出结果：\", a[1:4]\n\nif( \"H\" in a) :\n    print \"H 在变量 a 中\"\nelse :\n    print \"H 不在变量 a 中\"\n\nif( \"M\" not in a) :\n    print \"M 不在变量 a 中\"\nelse :\n    print \"M 在变量 a 中\"\n\nprint r'\\n'\nprint R'\\n'\n```\n\n## 字符串方法\n\n```python\ns = ' Hello'\nt = s.strip() #'Hello'去除空格\nl = s.lower() #' hello' 全部转换为小写\nu = s.upper() #' HELLO' 全部转换为大写\nc = s.capitalize() #'Hello' 字符串首字母大写\nt = s.replace('H', 'J') #'Jello' 将所有的H替换为J\n\ns.endswith(suffix)     # 判断字符串是否以指定后缀结尾\ns.find(t)              # 查找字符串中指定字符或字符串的索引位置\ns.index(t)             # 查找字符串中指定字符或字符串的索引位置\ns.isalpha()            # 判断字符串是否只有字母\ns.isdigit()            # 判断字符串是否只有数字\ns.islower()            # 判断字符串是否只有小写\ns.isupper()            # 判断字符串是否只有大写\ns.join(slist)          # 将字符串s与字符串列表slist中的字符串连接\ns.lower()              # 转换字符串中所有大写字符为小写\ns.replace(old,new)     # 替换字符串中的指定字符串\ns.rfind(t)             # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.rindex(t)            # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.split([delim])       # 将字符串分割成一个列表\ns.startswith(prefix)   # 判断字符串是否以指定前缀开头\ns.strip()              # 去掉字符串左右两边的空格\ns.upper()              # 转换字符串中的小写字母为大写\n```\n\n## 字符串类型转换\n\n> 使用`str()`将任何值转换成字符串\n\n```python\nx=42\nstr(x) #'42'\n```\n\n## 其他字符类型\n\n```python\n# 字节类型\ndata = b'Hello World\\r\\n'\nlen(data)                         # 13\ndata[0:5]                         # b'Hello'\ndata.replace(b'Hello', b'Cruel')  # b'Cruel World\\r\\n'\n\n# Raw字节类型\n>>> rs = r'c:\\newdata\\test' # Raw (uninterpreted backslash)\n>>> rs\n'c:\\\\newdata\\\\test'\n\n# f-string\n>>> name = 'IBM'\n>>> shares = 100\n>>> price = 91.1\n>>> a = f'{name:>10s} {shares:10d} {price:10.2f}'\n>>> a\n'       IBM        100      91.10'\n>>> b = f'Cost = ${shares*price:0.2f}'\n>>> b\n'Cost = $9110.00'\n>>>\n```\n","slug":"python/1.3-strings"},{"data":{"date":"April 12, 2021","title":"什么是React","tags":["react","javascript"],"description":"React是一个JavaScript库，致力于使UI开发变得简单","fromNow":"8 months ago"},"content":"\n![xCOR7k](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/xCOR7k.jpg)\n\nReact 最初是由 Facebook 开发的，旨在解决他们面临的前端问题：\n\n1. DOM 操作是极其昂贵的\n\n2. 当时没有专门处理前端库的库（Angular）\n\n3. 使用大量 jQuery 会导致代码混乱而且难以理解\n\n2013 年，React 以开源库的形式发布，从那时起，它就受到了社区的广泛喜爱。\n\n为什么开发人员喜欢 React？总结有几个原因：\n\n启动 React 很简单，运行 React 并不容易，因为它使用 JavaScript 渲染视图。你需要了解 Webpack 及其配置，需要了解 babel、eslint 等。但是 Facebook 为我们提供了`create-react-app`，可以快速开始 react 开发。\n\n从本质上讲，这是极简主义的，React 只处理一件事：UI。我们可以将 React 视为 MVC 框架中的`V`。\n\n强大的社区支持为了增强 React 的功能，开源贡献者已经建立了一个令人惊叹的库生态系统，使我们能够开发更强大的应用程序。\n\n最重要的是，React 的学习曲线很小，可为提供令人难以置信的强大功能，UI 灵活，可重用和可控制。\n\nReact 中必须掌握的核心概念：\n\n- 组件`component`\n- jsx\n- 状态`state`\n- 属性`props`\n\n## 入门\n\n创建一个简单的 React 应用\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Simple React.js application</title>\n  </head>\n  <body>\n    <h2>Simple React.js application</h2>\n\n    <div id=\"show_button_container\"></div>\n\n    <script\n      src=\"https://unpkg.com/react@16/umd/react.development.js\"\n      crossorigin\n    ></script>\n    <script\n      src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"\n      crossorigin\n    ></script>\n\n    <script>\n      'use strict';\n      const e = React.createElement;\n\n      class ShowButton extends React.Component {\n        render() {\n          return e('button', { onClick: () => alert('Hello there!') }, 'Show');\n        }\n      }\n\n      const domContainer = document.querySelector('#show_button_container');\n      ReactDOM.render(e(ShowButton), domContainer);\n    </script>\n  </body>\n</html>\n```\n","slug":"react/什么是react"},{"data":{"date":"September 19, 2019","title":"安装jenkins","tags":["server"],"fromNow":"2 years ago"},"content":"\n基于 centos 7.2\n\n## 安装 java 环境\n\n```bash\nsudo yum install java-1.8.0-openjdk-devel\n```\n\n## 加入软件源\n\n```bash\ncurl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo\n```\n\n## 加入软件 key\n\n```bash\nsudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n```\n\n## 安装\n\n```bash\nsudo yum install jenkins\n```\n\n## 启动 jenkins\n\n```bash\nsudo systemctl start jenkins\n```\n\n## 检查 jenkins 状态\n\n```bash\nsystemctl status jenkins\n```\n\n## 加入开机启动\n\n```bash\nsudo systemctl enable jenkins\n```\n\n## 访问\n\n```bash\nhttp://your_ip_or_domain:8080\n```\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621160854.png)\n\n```bash\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n## 安装默认插件\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161025.png)\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161045.png)\n\n## 注册用户\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161123.png)\n\n## 完成\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190621161155.png)\n","slug":"server/安装jenkins"},{"data":{"date":"May 10, 2018","title":"Boolean","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nBoolean 有两个值 true/false。\n\n| 数据类型  | 转换为 true 的值 | 转换为 false 的值 |\n| --------- | ---------------- | ----------------- |\n| Boolean   | true             | false             |\n| String    | 任意飞空字符串   | 空字符串          |\n| Number    | 任何非零值       | 0 和 NaN          |\n| Object    | 任何对象         | null              |\n| Undefined |                  | undefined         |\n","slug":"javascript/base/Boolean"},{"data":{"date":"May 19, 2020","title":"类型判断","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## typeof\n\n> 用于判断操作数的数据类型，适用于除 null、object 的其他 5 种类型的判断。\n\n1. 对于基本类型，除 null 以外，均可以返回正确的结果。\n2. 对于引用类型，除 function 以外，一律返回 object 类型。\n3. 对于 null ，返回 object 类型。\n4. 对于 function 返回 function 类型。\n\n```javascript\ntypeof undefined; // \"undefined\";\ntypeof 1; // \"number\";\ntypeof '1'; // \"string\";\ntypeof true; // \"boolean\";\ntypeof Symbol(); // \"symbol\";\ntypeof { a: 1 }; // \"object\";\n\ntypeof null === 'object'; // true\ntypeof function () {} === 'function'; // true\n```\n\n## instanceof\n\n> 用于判断是对象的那个子类型\n\n```javascript\n[1, 2] instanceof Array; // true\n(function foo() {} instanceof Function); // true\nnew Date(2018) instanceof Date; // true\nnew Number(1) instanceof Number; // true\n1 instanceof Number; // false\n```\n\na instanceof b，instanceof 会去查找 a 的原型链(这里不展开讨论)上是否有 b 的 prototype 属性；如果有，就返回 true，否则返回 false。即判断 a 的原型链上是否有 a.\\_proto\\_\\_ === b.prototype 返回 true\n\n## constructor\n\n> 不仅可以用于对象子类型的判断，还可以用于基本类型的判断，返回创建实例对象的 Object 构造函数的引用，原始数据类型，constructor 只读，基本类型指向对应的内置对象的构造函数\n\n```javascript\n({ a: 1 }.constructor === Object); // true\n[1, 2].constructor === Array; // true\nnew Date(2018).constructor === Date; // true\n(function foo() {}.constructor === Function); // true\n'1'.constructor === String; // true\n(1).constructor === Number; // true\ntrue.constructor === Boolean; // true\n```\n\n## prototype\n\n> Object.prototype.toString.call('...')，通用方法判断对象类型。 Object.prototype 表示 Object 的原型对象，toString 返回表示该对象的字符串，call 用于指定 this\n\n```javascript\nObject.prototype.toString.call('1'); // \"[object String]\"\nObject.prototype.toString.call(1); // \"[object Number]\"\nObject.prototype.toString.call(true); // \"[object Boolean]\"\nObject.prototype.toString.call([1, 2, 3]); // \"[object Array]\"\nObject.prototype.toString.call(function foo() {}); // \"[object Function]\"\nObject.prototype.toString.call(null); //\"[object Null]\"\nObject.prototype.toString.call(undefined); //\"[object Undefined]\"\n```\n","slug":"javascript/advance/类型判断"}]},"__N_SSG":true}