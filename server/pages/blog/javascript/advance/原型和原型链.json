{"pageProps":{"data":{"date":"May 19, 2020","title":"原型和原型链","tags":["javascript"],"fromNow":"2 years ago"},"content":{"compiledSource":"var y=Object.defineProperty,c=Object.defineProperties;var l=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var s=(e,p,t)=>p in e?y(e,p,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[p]=t,r=(e,p)=>{for(var t in p||(p={}))a.call(p,t)&&s(e,t,p[t]);if(o)for(var t of o(p))i.call(p,t)&&s(e,t,p[t]);return e},d=(e,p)=>c(e,l(p));var m=(e,p)=>{var t={};for(var n in e)a.call(e,n)&&p.indexOf(n)<0&&(t[n]=e[n]);if(e!=null&&o)for(var n of o(e))p.indexOf(n)<0&&i.call(e,n)&&(t[n]=e[n]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:e}=n,p=m(n,[\"components\"]);return mdx(MDXLayout,d(r(r({},layoutProps),p),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"img\",r({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/Dyv0vb.jpg\",alt:\"Dyv0vb\"}))),mdx(\"p\",null,\"\\u6BCF\\u4E2A\\u5BF9\\u8C61\\u90FD\\u4F1A\\u5728\\u5176\\u5185\\u90E8\\u521D\\u59CB\\u5316\\u2F00\\u4E2A\\u5C5E\\u6027\\uFF0C\\u5C31\\u662F\",mdx(\"inlineCode\",{parentName:\"p\"},\"prototype\"),\"(\\u539F\\u578B)\\uFF0C\\u5F53\\u6211\\u4EEC\\u8BBF\\u95EE\\u2F00\\u4E2A\\u5BF9\\u8C61\\u7684\\u5C5E\\u6027\\u65F6\\uFF0C\\u5982\\u679C\\u8FD9\\u4E2A\\u5BF9\\u8C61\\u5185\\u90E8\\u4E0D\\u5B58\\u5728\\u8FD9\\u4E2A\\u5C5E\\u6027\\uFF0C\\u90A3\\u4E48\\u4ED6\\u5C31\\u4F1A\\u53BB\",mdx(\"inlineCode\",{parentName:\"p\"},\"prototype\"),\" \\u2FA5\\u627E\\u8FD9\\u4E2A\\u5C5E\\u6027\\uFF0C\\u8FD9\\u4E2A\",mdx(\"inlineCode\",{parentName:\"p\"},\"prototype\"),\"\\u2F1C\\u4F1A\\u6709\\u2F83\\u2F30\\u7684\",mdx(\"inlineCode\",{parentName:\"p\"},\"prototype\"),\"\\uFF0C\\u4E8E\\u662F\\u5C31\\u8FD9\\u6837\\u2F00\\u76F4\\u627E\\u4E0B\\u53BB\\uFF0C\\u4E5F\\u5C31\\u662F\\u6211\\u4EEC\\u5E73\\u65F6\\u6240\\u8BF4\\u7684\\u539F\\u578B\\u94FE\\u7684\\u6982\\u5FF5\\u5173\\u7CFB\\uFF1A\",mdx(\"inlineCode\",{parentName:\"p\"},\"instance.constructor.prototype = instance.__proto__\"),\" \\u7279\\u70B9\\uFF1A JavaScript \\u5BF9\\u8C61\\u662F\\u901A\\u8FC7\\u5F15\\u2F64\\u6765\\u4F20\\u9012\\u7684\\uFF0C\\u6211\\u4EEC\\u521B\\u5EFA\\u7684\\u6BCF\\u4E2A\\u65B0\\u5BF9\\u8C61\\u5B9E\\u4F53\\u4E2D\\u5E76\\u6CA1\\u6709\\u2F00\\u4EFD\\u5C5E\\u4E8E\\u2F83\\u2F30\\u7684\\u539F\\u578B\\u526F\\u672C\\u3002\\u5F53\\u6211\\u4EEC\\u4FEE\\u6539\\u539F\\u578B\\u65F6\\uFF0C\\u4E0E\\u4E4B\\u76F8\\u5173\\u7684\\u5BF9\\u8C61\\u4E5F\\u4F1A\\u7EE7\\u627F\\u8FD9\\u2F00\\u6539\\u53D8\\u5F53\\u6211\\u4EEC\\u9700\\u8981\\u2F00\\u4E2A\\u5C5E\\u6027\\u7684\\u65F6\\uFF0C Javascript \\u5F15\\u64CE\\u4F1A\\u5148\\u770B\\u5F53\\u524D\\u5BF9\\u8C61\\u4E2D\\u662F\\u5426\\u6709\\u8FD9\\u4E2A\\u5C5E\\u6027\\uFF0C \\u5982\\u679C\\u6CA1\\u6709\\u7684\\u5C31\\u4F1A\\u67E5\\u627E\\u4ED6\\u7684\",mdx(\"inlineCode\",{parentName:\"p\"},\"Prototype\"),\"\\u5BF9\\u8C61\\u662F\\u5426\\u6709\\u8FD9\\u4E2A\\u5C5E\\u6027\\uFF0C\\u5982\\u6B64\\u9012\\u63A8\\u4E0B\\u53BB\\uFF0C\\u2F00\\u76F4\\u68C0\\u7D22\\u5230\",mdx(\"inlineCode\",{parentName:\"p\"},\"Object\"),\"\\u5185\\u5EFA\\u5BF9\\u8C61\"),mdx(\"h2\",null,\"\\u539F\\u578B\\uFF1A\"),mdx(\"p\",null,\"JavaScript \\u7684\\u6240\\u6709\\u5BF9\\u8C61\\u4E2D\\u90FD\\u5305\\u542B\\u4E86\\u2F00\\u4E2A \",\"[\",mdx(\"strong\",{parentName:\"p\"},\"proto\"),\"]\",\" \\u5185\\u90E8\\u5C5E\\u6027\\uFF0C\\u8FD9\\u4E2A\\u5C5E\\u6027\\u6240\\u5BF9\\u5E94\\u7684\\u5C31\\u662F\\u8BE5\\u5BF9\\u8C61\\u7684\\u539F\\u578B\"),mdx(\"p\",null,\"JavaScript \\u7684\\u51FD\\u6570\\u5BF9\\u8C61\\uFF0C\\u9664\\u4E86\\u539F\\u578B \",\"[\",mdx(\"strong\",{parentName:\"p\"},\"proto\"),\"]\",\" \\u4E4B\\u5916\\uFF0C\\u8FD8\\u9884\\u7F6E\\u4E86 prototype \\u5C5E\\u6027\\u5F53\\u51FD\\u6570\\u5BF9\\u8C61\\u4F5C\\u4E3A\\u6784\\u9020\\u51FD\\u6570\\u521B\\u5EFA\\u5B9E\\u4F8B\\u65F6\\uFF0C\\u8BE5 prototype \\u5C5E\\u6027\\u503C\\u5C06\\u88AB\\u4F5C\\u4E3A\\u5B9E\\u4F8B\\u5BF9\\u8C61\\u7684\\u539F\\u578B\",\"[\",mdx(\"strong\",{parentName:\"p\"},\"proto\"),\"]\",\" \\u3002\"),mdx(\"h2\",null,\"\\u539F\\u578B\\u94FE\\uFF1A\"),mdx(\"p\",null,\"\\u5F53\\u2F00\\u4E2A\\u5BF9\\u8C61\\u8C03\\u2F64\\u7684\\u5C5E\\u6027/\\u2F45\\u6CD5\\u2F83\\u8EAB\\u4E0D\\u5B58\\u5728\\u65F6\\uFF0C\\u5C31\\u4F1A\\u53BB\\u2F83\\u2F30 \",\"[\",mdx(\"strong\",{parentName:\"p\"},\"proto\"),\"]\",\" \\u5173\\u8054\\u7684\\u524D\\u8F88 prototype \\u5BF9\\u8C61\\u4E0A\\u53BB\\u627E\\u5982\\u679C\\u6CA1\\u627E\\u5230\\uFF0C\\u5C31\\u4F1A\\u53BB\\u8BE5 prototype \\u539F\\u578B \",\"[\",mdx(\"strong\",{parentName:\"p\"},\"proto\"),\"]\",\" \\u5173\\u8054\\u7684\\u524D\\u8F88 prototype \\u53BB\\u627E\\u3002\\u4F9D\\u6B21\\u7C7B\\u63A8\\uFF0C\\u76F4\\u5230\\u627E\\u5230\\u5C5E\\u6027/\\u2F45\\u6CD5\\u6216 undefined \\u4E3A\\u2F4C\\u3002\\u4ECE\\u2F7D\\u5F62\\u6210\\u4E86\\u6240\\u8C13\\u7684\\u201C\\u539F\\u578B\\u94FE\\u201D\"),mdx(\"h2\",null,\"\\u539F\\u578B\\u7279\\u70B9\\uFF1A\"),mdx(\"p\",null,\"JavaScript \\u5BF9\\u8C61\\u662F\\u901A\\u8FC7\\u5F15\\u2F64\\u6765\\u4F20\\u9012\\u7684\\uFF0C\\u5F53\\u4FEE\\u6539\\u539F\\u578B\\u65F6\\uFF0C\\u4E0E\\u4E4B\\u76F8\\u5173\\u7684\\u5BF9\\u8C61\\u4E5F\\u4F1A\\u7EE7\\u627F\\u8FD9\\u2F00\\u6539\\u53D8\"))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 19, 2020","title":"原型和原型链","tags":["javascript"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"March 11, 2019","title":"Promise","tags":["javascript"],"fromNow":"3 years ago"},"content":"\n## Promise\n\n> 用于一个异步操作的最终完成或失败及其结果\n\n## 状态\n\n1. pending，初识状态\n2. fulfilled，操作成功\n3. rejected，操作失败\n\n## 流程\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190830101852.png)\n\n## 语法\n\n```javascript\nnew Promise((resolve, reject) => {\n  /*executor*/\n});\n```\n\n> Promise 执行时立即调用 executor 函数（通常是一些异步操作），resovle 将 Promise 的状态改为 fulfilled，reject 将 Promise 的状态改为 rejected，如果 catch 到了错误，将忽略 executor 内的返回值，Promise 的状态被改成 rejected\n\n## 属性\n\n1. Promise.length //1\n2. Promise.prototype //Promise 的构造器的原型\n\n## 方法\n\n1. Promise.all //Promise.all 方法常被用于处理多个 promise 对象的状态集合\n2. Promise.race //当 iterable 参数里的任意一个子 promise 被成功或失败后，父 promise 马上也会用子 promise 的成功返回值或失败详情作为参数调用父 promise 绑定的相应句柄，并返回该 promise 对象。\n3. Promise.reject //返回一个状态为失败的 Promise 对象，并将给定的失败信息传递给对应的处理方法\n4. Promise.resolve //返回的 Promise 对象状态为 fulfilled\n\n## 原型\n\n1. Promise.prototype.constructor //返回被创建的实例函数. 默认为 Promise 函数.\n2. Promise.prototype.catch //添加一个拒绝(rejection) 回调到当前 promise, 返回一个新的 promise\n3. Promise.prototype.then //添加解决(fulfillment)和拒绝(rejection)回调到当前 promise, 返回一个新的 promise, 将以回调的返回值来 resolve.\n4. Promise.prototype.finally //添加一个事件处理回调于当前 promise 对象，并且在原 promise 对象解析完毕后，返回一个新的 promise 对象。回调会在当前 promise 运行完毕后被调用，无论当前 promise 的状态是完成(fulfilled)还是失败(rejected)\n\n## 使用\n\n```javascript\nconst P=new Promise((resolve,reject)=>{\n    if(/*success*/){\n        resolve()\n    }else{\n        reject()\n    }\n})\n```\n","slug":"apis/Promise"},{"data":{"date":"October 30, 2020","title":"Linux命令tar","tags":["linux"],"description":"tar用于linux的文件和目录创建档案，利用tar命令，可以把一大堆的文件和目录全部打包成一个文件","fromNow":"a year ago"},"content":"\n**tar**用于 linux 的文件和目录创建档案，利用 tar 命令，可以把一大堆的文件和目录全部打包成一个文件\n\n## 使用方法\n\n```shell\ntar -cf archive.tar file1 file2\n#c参数代表创建压缩文档，f参数用于写入归档文件。\n\ntar -xf archive.tar\n#x参数代表解压压缩文档\n\ntar -xf archive.tar -C directory\n#C参数代表解压到某个目录\n\ntar -tf archive.tar\n#t参数代表列出压缩文档的内容\n```\n","slug":"linux/Linux命令-tar"},{"data":{"date":"October 9, 2020","title":"Linux命令gzip","tags":["linux"],"description":"“gzip”命令的快速指南，用于压缩文件","fromNow":"a year ago"},"content":"\n“gzip”命令的快速指南，用于压缩文件\n\ngzip 命令可以在 Linux、macOS、WSL 和任何有 UNIX 环境的地方使用。\n\n您可以使用 gzip 命令使用名为[LZ77](https://en.wikipedia.org/wiki/LZ77_and_LZ78)的 gzip 压缩协议压缩文件。\n\n## 使用方法\n\n```shell\ngzip filename\n```\n\n这将压缩文件，并向其附加一个.gz 扩展名，原始文件将被删除。为了防止出现这种情况，可以使用`-C`选项并使用输出重定向将输出写入文件名.gz 文件：\n\n```shell\ngzip -c filename > filename.gz\n```\n\n-C 选项指定输出将转到标准输出流，保留原始文件不变\n\n同时也可以使用-K 选项\n\n```shell\ngzip -k filename\n```\n\n压缩越多，压缩（和解压缩）所需的时间就越长。级别范围从 1（最快、最差的压缩）到 9（最慢、更好的压缩），默认值为 6。您可以使用-`<NUMBER>`选项选择特定级别：\n\n```shell\ngzip -1 filename\n```\n\n压缩多文件\n\n```shell\ngzip filename1 filename2\n```\n\n使用-r 选项递归地压缩目录中的所有文件：\n\n```shell\ngzip -r a_folder\n```\n\n-v 选项打印压缩百分比信息。下面是一个与-k（keep）选项一起使用的示例：\n\n![fvzBBf](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/fvzBBf.png)\n\ngzip 还可以用于解压缩文件，使用-d 选项：\n\n```shell\ngzip -d filename.gz\n```\n","slug":"linux/Linux命令-gzip"},{"data":{"date":"November 2, 2020","title":"Linux命令export","tags":["linux"],"description":"export用于设置或显示环境变量。","fromNow":"a year ago"},"content":"\n**export**用于设置或显示环境变量。\n\n## 使用方法\n\n```shell\nexport TEST=\"test\"\n# TEST代表变量名，test代表变量值\n\nexport -n TEST\n#-n参数代表一出TEST变量\n```\n\n## 参数：\n\n- -f 　代表[变量名称]中为函数名称。\n- -n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。\n- -p 　列出所有的 shell 赋予程序的环境变量。\n","slug":"linux/Linux命令-export"},{"data":{"date":"April 5, 2021","title":"循环","tags":["swift"],"description":"取得成功的秘诀就是开始","fromNow":"8 months ago"},"content":"\nSwift 有三种循环：\n\n- for\n- while\n- repeat\n\n## for 循环\n\n> 用来重复执行一系列语句直到达成特定条件，如下图：\n\n![sgvlgu](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/sgvlgu.png)\n\n```swift\n// 语法\nfor init; condition; increment{\n   // do something\n}\n\n// example\nlet albums = [\"Red\", \"1989\", \"Reputation\"]\nfor album in albums {\n    print(\"\\(album) is on Apple Music\")\n}\n```\n\n## while 循环\n\n> while 循环从计算单一条件开始。如果条件为 true，会重复运行一系列语句，直到条件变为 false。\n\n![WOrVgL](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/WOrVgL.png)\n\n```swift\n// 语法\nwhile condition{\n   // do something\n}\n// example\nvar number = 1\n\nwhile number <= 20 {\n    print(number)\n    number += 1\n}\n\nprint(\"Ready or not, here I come!\")\n```\n\n## repeat 循环\n\n> repeat...while 循环不像 for 和 while 循环在循环体开始执行前先判断条件语句，而是在循环执行结束时判断条件是否符合。 `repeat...while无论条件是否符合，循环会执行至少一次`\n\n![bF7YMc](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/bF7YMc.png)\n\n```swift\n// 语法\nrepeat{\n   statement(s);\n}while( condition );\n\n// example\nvar number = 1\n\nrepeat {\n    print(number)\n    number += 1\n} while number <= 20\n\nprint(\"Ready or not, here I come!\")\n```\n\n## 退出循环\n\n使用`break`退出循环语句，比如在 while 循环中：\n\n```swift\nwhile countDown >= 0 {\n    print(countDown)\n\n    if countDown == 4 {\n        print(\"I'm bored. Let's go now!\")\n\t\t// 当countDown等于4的时候会退出循环\n        break\n    }\n\n    countDown -= 1\n}\n```\n\n## 退出多重循环\n\n在嵌套循环中，想要同时打破内循环和外循环是很常见的。举个例子，我们可以编写一些代码来计算从 1 到 10 的乘法表，如下所示:\n\n```swift\nfor i in 1...10 {\n    for j in 1...10 {\n        let product = i * j\n        print (\"\\(i) * \\(j) is \\(product)\")\n    }\n}\n```\n\n如果需要退出这个双重循环，需要做两步，首先，给外循环加上 label:`outerLoop`\n\n```swift\nouterLoop: for i in 1...10 {\n    for j in 1...10 {\n        let product = i * j\n        print (\"\\(i) * \\(j) is \\(product)\")\n    }\n}\n```\n\n第二步，在内循环执行`break outerLoop`\n\n```swift\nouterLoop: for i in 1...10 {\n    for j in 1...10 {\n        let product = i * j\n        print (\"\\(i) * \\(j) is \\(product)\")\n\n        if product == 50 {\n            print(\"It's a bullseye!\")\n            break outerLoop\n        }\n    }\n}\n```\n\n## 跳过条件 - continue\n\n> `break`退出循环。但是，如果只想跳过当前条件，继续下一个条件，应该使用`continue`。比如如下跳过奇数：\n\n```swift\nfor i in 1...10 {\n    if i % 2 == 1 {\n        continue\n    }\n\n    print(i)\n}\n```\n","slug":"swift/100days/day04"},{"data":{"date":"May 19, 2020","title":"面试题-手写instanceof","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## 实现 instanceof\n\n> 核心考察点 [getPrototypeOf](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf)\n\n```javascript\nfunction _instanceof(left, right) {\n  if (left !== 'object' || left === null) return false;\n  const proto = Object.getPrototypeOf(left);\n  while (true) {\n    if (proto === null) return false;\n    if (proto === right.prototype) return true;\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n_instanceof(111, Number); //true\n_instanceof(new String('11'), String); //true\n```\n","slug":"interview/js/instanceof"}]},"__N_SSG":true}