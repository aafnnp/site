{"pageProps":{"data":{"date":"December 2, 2021","title":"Functions","tags":["python"],"description":"随着程序的不断更新，我们会发现，函数的定义和调用是一致的。","fromNow":"12 days ago"},"content":{"compiledSource":"var d=Object.defineProperty,m=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var l=(e,n,t)=>n in e?d(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,r=(e,n)=>{for(var t in n||(n={}))o.call(n,t)&&l(e,t,n[t]);if(p)for(var t of p(n))i.call(n,t)&&l(e,t,n[t]);return e},s=(e,n)=>m(e,c(n));var u=(e,n)=>{var t={};for(var a in e)o.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(e!=null&&p)for(var a of p(e))n.indexOf(a)<0&&i.call(e,a)&&(t[a]=e[a]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var a=t,{components:e}=a,n=u(a,[\"components\"]);return mdx(MDXLayout,s(r(r({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u51FD\\u6570\\u7684\\u5B9A\\u4E49\"),mdx(\"p\",null,\"\\u51FD\\u6570\\u7684\\u5B9A\\u4E49\\u662F\\u4E00\\u4E2A\\u7279\\u6B8A\\u7684\\u53EF\\u590D\\u7528\\u7684\\u4EE3\\u7801\\u5757\\uFF0C\\u5B83\\u7684\\u7B2C\\u4E00\\u884C\\u5FC5\\u987B\\u662F\\u51FD\\u6570\\u7684\\u58F0\\u660E\\uFF0C\\u7B2C\\u4E8C\\u884C\\u5F00\\u59CB\\u662F\\u51FD\\u6570\\u7684\\u5B9E\\u73B0\\u3002\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-python\"}),`#\\u5B9A\\u4E49\\u51FD\\u6570\ndef sumcount(n):\n    '''\n    Returns the sum of the first n integers\n    '''\n    total = 0\n    while n > 0:\n        total += n\n        n -= 1\n    return total\n#\\u8C03\\u7528\\u51FD\\u6570\na = sumcount(100)\n`)),mdx(\"h2\",null,\"\\u6807\\u51C6\\u51FD\\u6570\"),mdx(\"p\",null,\"python \\u4E2D\\u7684\\u6807\\u51C6\\u51FD\\u6570\\u662F\\u4E00\\u4E9B\\u5185\\u7F6E\\u7684\\u51FD\\u6570\\uFF0C\\u901A\\u8FC7\",mdx(\"inlineCode\",{parentName:\"p\"},\"import\"),\"\\u8C03\\u7528\\u3002\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-python\"}),`import math\nx = math.sqrt(10)\n\nimport urllib.request\nu = urllib.request.urlopen('http://www.python.org/')\ndata = u.read()\n`)),mdx(\"h2\",null,\"\\u9519\\u8BEF\\u548C\\u5F02\\u5E38\"),mdx(\"p\",null,\"\\u9519\\u8BEF\\u548C\\u5F02\\u5E38\\u662F python \\u4E2D\\u7684\\u4E24\\u4E2A\\u4E3B\\u8981\\u6982\\u5FF5\\uFF0C\\u9519\\u8BEF\\u662F\\u6307\\u7A0B\\u5E8F\\u8FD0\\u884C\\u8FC7\\u7A0B\\u4E2D\\u53D1\\u751F\\u7684\\u9519\\u8BEF\\uFF0C\\u5F02\\u5E38\\u662F\\u6307\\u7A0B\\u5E8F\\u8FD0\\u884C\\u8FC7\\u7A0B\\u4E2D\\u629B\\u51FA\\u7684\\u5F02\\u5E38\\u3002\\u4F8B\\u5982\\uFF1A\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-python\"}),`>>> int('N/A')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: 'N/A'\n>>>\n`)),mdx(\"h2\",null,\"\\u6355\\u83B7\\u3001\\u5904\\u7406\\u5F02\\u5E38\"),mdx(\"p\",null,\"\\u5F02\\u5E38\\u53EF\\u4EE5\\u901A\\u8FC7\",mdx(\"inlineCode\",{parentName:\"p\"},\"try\"),\"\\u548C\",mdx(\"inlineCode\",{parentName:\"p\"},\"except\"),\"\\u6765\\u6355\\u83B7\\uFF0C\\u4E5F\\u53EF\\u4EE5\\u901A\\u8FC7\",mdx(\"inlineCode\",{parentName:\"p\"},\"try\"),\"\\u548C\",mdx(\"inlineCode\",{parentName:\"p\"},\"finally\"),\"\\u6765\\u5904\\u7406\\u3002\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-python\"}),`for line in f:\n    fields = line.split()\n    try:\n        shares = int(fields[1])\n    except ValueError:\n        print(\"Couldn't parse\", line)\n    ...\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"December 2, 2021","title":"Functions","tags":["python"],"description":"随着程序的不断更新，我们会发现，函数的定义和调用是一致的。","fromNow":"12 days ago"}},"randomPost":[{"data":{"date":"February 19, 2020","title":"数组去重","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":"\n## 3 种数组去重方法\n\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20200413152655.png)\n\n## Set\n\n```javascript\nconst arr=[1,2,🤩,🤩,🤩,2,1]\nconsole.log([...new Set(arr)])\n```\n\n## filter\n\n```javascript\nconst arr=[1,2,🤩,🤩,🤩,2,1]\narr.filter((item,index)=>arr.indexOf(item)===index)\n```\n\n## reduce\n\n```javascript\nconst arr=[1,2,🤩,🤩,🤩,2,1]\narr.reduce((unique,item)=>unique.includes(item)?unique:[...unique,item],[])\n```\n","slug":"translate/数组去重"},{"data":{"date":"November 20, 2021","title":"如何在 vue 中使用 Debounce、Throttle","tags":["vue","javascript"],"description":"如input、resize、scroll、intersection observer 等事件可能发生得非常频繁，例如每秒发生几次，因此调用一个动作，比如对每个事件发出读取请求，并不是一个明智的方法。","fromNow":"25 days ago"},"content":"\n## 为什么要使用 debounce 和 throttle\n\n防抖和节流就是针对响应跟不上触发频率这类问题的两种解决方案。在给 DOM 绑定事件时，有些事件我们是无法控制触发频率的。 如鼠标移动事件 onmousemove, 滚动滚动条事件 onscroll，窗口大小改变事件 onresize，瞬间的操作都会导致这些事件会被高频触发。 如果事件的回调函数较为复杂，就会导致响应跟不上触发，出现页面卡顿，假死现象。 在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发。\n\n## 在 watcher 中使用 debounce\n\n1. 在`created`生命周期将`this.debounce`绑定到`this`上，这样`this.debounce`就可以在`created`生命周期中使用。\n2. 在`watch`函数中，使用`this.debounce`调用`debounce`函数，并传入`this.debounce`的回调函数。\n3. 在事件销毁前，使用`this.debounce`调用`clear`函数，清除定时器。\n\n```html\n<template>\n  <input v-model=\"value\" type=\"text\" />\n  <p>{{ value }}</p>\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    data() {\n      return {\n        value: '',\n      };\n    },\n    watch: {\n      value(...args) {\n        this.debouncedWatch(...args);\n      },\n    },\n    created() {\n      this.debouncedWatch = debounce((newValue, oldValue) => {\n        console.log('New value:', newValue);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedWatch.cancel();\n    },\n  };\n</script>\n```\n\n## 使用 debounce 处理事件\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    created() {\n      this.debouncedHandler = debounce((event) => {\n        console.log('New value:', event.target.value);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedHandler.cancel();\n    },\n  };\n</script>\n```\n\n为什么不适用`debounce`或`throttle`直接绑定函数呢？比如：\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    methods: {\n      // Don't do this!\n      debouncedHandler: debounce(function (event) {\n        console.log('New value:', event.target.value);\n      }, 500),\n    },\n  };\n</script>\n```\n\n**使用`export default { ... }`从组件导出的 options 对象，包括方法，将被组件的所有实例重用。如果网页中有 2 个或更多的组件实例，那么所有的组件都将使用相同的`debounce`或`throttle`的函数方法。**\n\n## 总结\n\n在 `vue` 中使用 `debounce` 和 `throttle` 函数，应该在 `created` 和 `beforeUnmount` 生命周期中使用，而不是在 `watch` 中使用。\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  export default {\n    created() {\n      this.debouncedCallback = debounce((...args) => {\n        // The debounced\n        callback;\n      }, 500);\n    },\n    watch: {\n      value(...args) {\n        this.debouncedCallback(...args);\n      },\n    },\n  };\n</script>\n```\n","slug":"vue/debounce-throttle"},{"data":{"date":"April 12, 2021","title":"什么是React","tags":["react","javascript"],"description":"React是一个JavaScript库，致力于使UI开发变得简单","fromNow":"8 months ago"},"content":"\n![xCOR7k](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/xCOR7k.jpg)\n\nReact 最初是由 Facebook 开发的，旨在解决他们面临的前端问题：\n\n1. DOM 操作是极其昂贵的\n\n2. 当时没有专门处理前端库的库（Angular）\n\n3. 使用大量 jQuery 会导致代码混乱而且难以理解\n\n2013 年，React 以开源库的形式发布，从那时起，它就受到了社区的广泛喜爱。\n\n为什么开发人员喜欢 React？总结有几个原因：\n\n启动 React 很简单，运行 React 并不容易，因为它使用 JavaScript 渲染视图。你需要了解 Webpack 及其配置，需要了解 babel、eslint 等。但是 Facebook 为我们提供了`create-react-app`，可以快速开始 react 开发。\n\n从本质上讲，这是极简主义的，React 只处理一件事：UI。我们可以将 React 视为 MVC 框架中的`V`。\n\n强大的社区支持为了增强 React 的功能，开源贡献者已经建立了一个令人惊叹的库生态系统，使我们能够开发更强大的应用程序。\n\n最重要的是，React 的学习曲线很小，可为提供令人难以置信的强大功能，UI 灵活，可重用和可控制。\n\nReact 中必须掌握的核心概念：\n\n- 组件`component`\n- jsx\n- 状态`state`\n- 属性`props`\n\n## 入门\n\n创建一个简单的 React 应用\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Simple React.js application</title>\n  </head>\n  <body>\n    <h2>Simple React.js application</h2>\n\n    <div id=\"show_button_container\"></div>\n\n    <script\n      src=\"https://unpkg.com/react@16/umd/react.development.js\"\n      crossorigin\n    ></script>\n    <script\n      src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"\n      crossorigin\n    ></script>\n\n    <script>\n      'use strict';\n      const e = React.createElement;\n\n      class ShowButton extends React.Component {\n        render() {\n          return e('button', { onClick: () => alert('Hello there!') }, 'Show');\n        }\n      }\n\n      const domContainer = document.querySelector('#show_button_container');\n      ReactDOM.render(e(ShowButton), domContainer);\n    </script>\n  </body>\n</html>\n```\n","slug":"react/什么是react"},{"data":{"date":"November 20, 2021","title":"Numbers","tags":["python"],"description":"关于数学运算","fromNow":"25 days ago"},"content":"\n## Numbers 类型\n\n> python 有 4 种数字类型\n\n- Boolean\n- Integer\n- Float\n- Complex\n\n### Boolean\n\n布尔值，只有 True 和 False 两个值，可以用来表示真假。\n\n```python\na=True\nb=False\n```\n\n在数学运算种，布尔值的值只有 0 和 1，0 表示 False，1 表示 True。\n\n```python\nc=4+True #5\nd=False\nif d==0:\n    print('d is zero')\nelse:\n    print('d is not zero')\n```\n\n### Integer\n\n```python\na = 37\nb = -299392993727716627377128481812241231\nc = 0x7fa8      # Hexadecimal\nd = 0o253       # Octal\ne = 0b10001111  # Binary\n```\n\n### Float\n\n```python\n>>> a = 2.1 + 4.2\n>>> a == 6.3\nFalse\n>>> a\n6.300000000000001\n>>>\n```\n\n### 比较 Comparisons\n\npython 有如下比较运算符：\n\n```python\nx < y      Less than\nx <= y     Less than or equal\nx > y      Greater than\nx >= y     Greater than or equal\nx == y     Equal to\nx != y     Not equal to\n\n#布尔值操作\nif b >= a and b <= c:\n    print('b is between a and c')\n\nif not (b < a or b > c):\n    print('b is still between a and c')\n```\n\n### 数字转换\n\n使用类型名转换数字，如下：\n\n```python\na = int(3.14)\nb = float(3)\n```\n","slug":"python/1.2-numbers"},{"data":{"date":"May 6, 2021","title":"从零开始配置React开发环境","tags":["react","javascript"],"description":"学会使用 webpack 和 Babel 从零配置React开发环境","fromNow":"7 months ago"},"content":"\n![D0Xewe](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/D0Xewe.jpg)\n\n## 为什么要创建自己的配置？\n\n通过一步步创建自己的配置可以学习到`webpack`和`babel`、`eslint`等这些工具的知识。\n\n随着开发时间及项目的增长，需要集成更多的工具到项目中，比如：\n\n- webpack loaders（less、sass）\n- 服务器渲染\n- ES next\n- mobx、redux 等\n- jest、cypress 等\n\n## 初始化项目\n\n```shell\n#创建并进入目录\nmkdir react-config-tutorial && cd react-config-tutorial\n\n#初始化npm项目\nnpm init -y\n\n#安装react\nnpm install react react-dom\n```\n\n## 配置 webpack\n","slug":"react/从零开始配置react开发环境"},{"data":{"date":"October 12, 2020","title":"Linux命令gunzip","tags":["linux"],"description":"“gunzip”命令的快速指南，用于解压缩gzip文件。","fromNow":"a year ago"},"content":"\n“gunzip”命令的快速指南，用于解压缩 gzip 文件。\n\n**gunzip**命令基本上等同于**gzip**命令，但默认情况-d 选项始终处于启用状态。\n\n## 使用方法\n\n```shell\ngunzip filename.gz\n```\n\n这将**gunzip**并删除**.gz**扩展名，将结果放入文件名文件中。如果该文件存在，它将覆盖该文件。\n\n可以使用-c 选项使用输出重定向将其提取到其他文件名：\n\n```shell\ngunzip -c filename.gz > anotherfilename\n```\n\ngunzip 命令可以在 Linux、macOS、WSL 和任何有 UNIX 环境的地方使用\n\n## 参数\n\n- -a 或--ascii 　使用 ASCII 文字模式。\n- -c 或--stdout 或--to-stdout 　把解压后的文件输出到标准输出设备。\n- -f 或-force 　强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接。\n- -h 或--help 　在线帮助。\n- -l 或--list 　列出压缩文件的相关信息。\n- -L 或--license 　显示版本与版权信息。\n- -n 或--no-name 　解压缩时，若压缩文件内含有远来的文件名称及时间戳记，则将其忽略不予处理。\n- -N 或--name 　解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上。\n- -q 或--quiet 　不显示警告信息。\n- -r 或--recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。\n- -S<压缩字尾字符串>或--suffix<压缩字尾字符串> 　更改压缩字尾字符串。\n- -t 或--test 　测试压缩文件是否正确无误。\n- -v 或--verbose 　显示指令执行过程。\n- -V 或--version 显示版本信息。\n","slug":"linux/Linux命令-gunzip"}]},"__N_SSG":true}