{"pageProps":{"data":{"date":"December 6, 2021","title":"Collections of python","tags":["python"],"description":"集合包括列表、字典、集合。","fromNow":"9 days ago"},"content":{"compiledSource":"var O=Object.defineProperty,u=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var t=(e,p,r)=>p in e?O(e,p,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[p]=r,s=(e,p)=>{for(var r in p||(p={}))i.call(p,r)&&t(e,r,p[r]);if(n)for(var r of n(p))o.call(p,r)&&t(e,r,p[r]);return e},c=(e,p)=>u(e,d(p));var l=(e,p)=>{var r={};for(var a in e)i.call(e,a)&&p.indexOf(a)<0&&(r[a]=e[a]);if(e!=null&&n)for(var a of n(e))p.indexOf(a)<0&&o.call(e,a)&&(r[a]=e[a]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var a=r,{components:e}=a,p=l(a,[\"components\"]);return mdx(MDXLayout,c(s(s({},layoutProps),p),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u603B\\u89C8\"),mdx(\"p\",null,\"\\u7A0B\\u5E8F\\u5458\\u7ECF\\u5E38\\u4F1A\\u7528\\u5230\\u7684\\u96C6\\u5408\\uFF0C\\u5217\\u8868\\u3001\\u5B57\\u5178\\u3001\\u96C6\\u5408\\u3002\\u6BD4\\u5982\\uFF1A\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"\\u80A1\\u7968\\u6C60\"),mdx(\"li\",{parentName:\"ul\"},\"\\u80A1\\u7968\\u4EF7\\u683C\")),mdx(\"p\",null,\"\\u6709\\u591A\\u79CD\\u9009\\u62E9\\u6765\\u5904\\u7406\\u8FD9\\u4E00\\u7CFB\\u5217\\u6570\\u636E\\uFF1A\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"\\u5217\\u8868\\u3002\\u8868\\u793A\\u4E00\\u7EC4\\u6709\\u5E8F\\u7684\\u6570\\u636E\"),mdx(\"li\",{parentName:\"ul\"},\"\\u5B57\\u5178\\u3002\\u8868\\u793A\\u4E00\\u7EC4\\u952E\\u503C\\u5BF9\\u7684\\u6570\\u636E\"),mdx(\"li\",{parentName:\"ul\"},\"\\u96C6\\u5408\\u3002\\u8868\\u793A\\u4E00\\u7EC4\\u65E0\\u5E8F\\u7684\\u6570\\u636E\")),mdx(\"h2\",null,\"\\u5217\\u8868\"),mdx(\"p\",null,\"\\u5F53\\u6570\\u636E\\u7684\\u987A\\u5E8F\\u5F88\\u91CD\\u8981\\u65F6\\uFF0C\\u4F7F\\u7528\\u5217\\u8868\\u3002\\u8BB0\\u4F4F\\u5217\\u8868\\u53EF\\u4EE5\\u5BB9\\u7EB3\\u4EFB\\u4F55\\u7C7B\\u578B\\u7684\\u5BF9\\u8C61\\u3002\\u4F8B\\u5982\\uFF0C\\u5143\\u7EC4\\u5217\\u8868\\u3002\"),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-python\"}),`portfolio = [\n    ('GOOG', 100, 490.1),\n    ('IBM', 50, 91.3),\n    ('CAT', 150, 83.44)\n]\n\nportfolio[0]            # ('GOOG', 100, 490.1)\nportfolio[2]            # ('CAT', 150, 83.44)\n\n# \\u5217\\u8868\\u6784\\u9020\nrecords=[] #\\u521D\\u59CB\\u5316\\u4E00\\u4E2A\\u7A7A\\u5217\\u8868\n\nrecords.append(('foo', 1, 2)) #\\u6DFB\\u52A0\\u5143\\u7D20\nrecords.append(('bar', 'hello')) #\\u6DFB\\u52A0\\u5143\\u7D20\n\n#\\u4ECE\\u6587\\u4EF6\\u8BFB\\u53D6\\u6570\\u636E\\u5E76\\u5199\\u5165\\u5217\\u8868\nwith open('data.csv', 'w') as f:\n    next(f) #\\u8DF3\\u8FC7\\u7B2C\\u4E00\\u884C\n    for line in f:\n        row = line.strip().split(',')\n        records.append((row[0], row[1], row[2]))\n`)),mdx(\"h2\",null,\"\\u5B57\\u5178\"),mdx(\"p\",null,\"\\u5982\\u679C\\u4F60\\u60F3\\u8981\\u5FEB\\u901F\\u968F\\u673A\\u67E5\\u627E(\\u6309\\u952E\\u540D) \\uFF0C\\u5B57\\u5178\\u662F\\u5F88\\u6709\\u7528\\u7684\\u3002\\u4F8B\\u5982\\uFF0C\\u80A1\\u7968\\u4EF7\\u683C\\u5B57\\u5178:\"),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-python\"}),`prices = {\n   'GOOG': 513.25,\n   'CAT': 87.22,\n   'IBM': 93.37,\n   'MSFT': 44.12\n}\n\nprices['IBM']           # 93.37\nprices['MSFT']          # 44.12\n\n# \\u5B57\\u5178\\u6784\\u9020\nprices = {} #\\u521D\\u59CB\\u5316\\u4E00\\u4E2A\\u7A7A\\u5B57\\u5178\n\nprices['GOOG'] = 513.25 #\\u6DFB\\u52A0\\u5143\\u7D20\nprices['CAT'] = 87.22 #\\u6DFB\\u52A0\\u5143\\u7D20\n\n#\\u4ECE\\u6587\\u4EF6\\u8BFB\\u53D6\\u6570\\u636E\\u5E76\\u5199\\u5165\\u5B57\\u5178\nwith open('data.csv', 'w') as f:\n    next(f) #\\u8DF3\\u8FC7\\u7B2C\\u4E00\\u884C\n    for line in f:\n        row = line.strip().split(',')\n        prices[row[0]] = row[1]\n\n# \\u5B57\\u5178\\u67E5\\u627E\nif 'GOOG' in prices:\n    print('GOOG is in prices')\n\nname = prices.get('GOOG', 'N/A') #N/A\\u8868\\u793A\\u9ED8\\u8BA4\\u503C\n\nprices.get('GOOG', 0) # 513.25\nprices.get('SCOX', 0) # 0\n\n# \\u590D\\u5408\\u952E - \\u4EFB\\u4F55\\u7C7B\\u578B\\u7684\\u6570\\u636E\\u90FD\\u53EF\\u4EE5\\u4F5C\\u4E3A\\u5B57\\u5178\\u7684\\u952E\\u3002\\u4F8B\\u5982\\uFF0C\\u5143\\u7EC4:\n\nholidays = {\n    (1, 1): 'New Year\\\\'s Day',\n    (7, 4): 'Independence Day',\n    (12, 25): 'Christmas'\n}\nholidays[(1, 1)] # 'New Year\\\\'s Day'\n`)),mdx(\"h2\",null,\"\\u96C6\\u5408\"),mdx(\"p\",null,\"\\u96C6\\u5408\\u662F\\u4E00\\u79CD\\u7279\\u6B8A\\u7684\\u5B57\\u5178\\uFF0C\\u8868\\u793A\\u4E00\\u7EC4\\u65E0\\u5E8F\\u7684\\u6570\\u636E\\uFF0C\\u6570\\u636E\\u4E0D\\u91CD\\u590D\\u3002\"),mdx(\"pre\",null,mdx(\"code\",s({parentName:\"pre\"},{className:\"language-python\"}),`tech_stocks = {'GOOG', 'IBM', 'CAT'}\ntech_stocks = set(['GOOG', 'IBM', 'CAT'])\n\nnames = ['IBM', 'AAPL', 'GOOG', 'IBM', 'GOOG', 'YHOO']\n\nunique = set(names)\n# unique = set(['IBM', 'AAPL','GOOG','YHOO'])\n\nunique.add('CAT')        # Add an item\nunique.remove('YHOO')    # Remove an item\n\ns1 = { 'a', 'b', 'c'}\ns2 = { 'c', 'd' }\ns1 | s2                 # Set union { 'a', 'b', 'c', 'd' }\ns1 & s2                 # Set intersection { 'c' }\ns1 - s2                 # Set difference { 'a', 'b' }\n\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"December 6, 2021","title":"Collections of python","tags":["python"],"description":"集合包括列表、字典、集合。","fromNow":"9 days ago"}},"randomPost":[{"data":{"date":"May 19, 2020","title":"理解函数的执行过程","tags":["javascript"],"fromNow":"2 years ago"},"content":"","slug":"javascript/advance/理解函数的执行过程"},{"data":{"date":"December 10, 2021","title":"Formatting","tags":["python"],"description":"输出格式化","fromNow":"5 days ago"},"content":"\n当输出数据时，我们希望能够按照一定的格式输出，这个时候就可以使用 format()函数。比如：\n\n```python\n      Name      Shares        Price\n----------  ----------  -----------\n        AA         100        32.20\n       IBM          50        91.10\n       CAT         150        83.44\n      MSFT         200        51.23\n        GE          95        40.37\n      MSFT          50        65.10\n       IBM         100        70.44\n```\n\n## 字符输出格式化\n\n在`python 3.6+`使用`f-strings`格式化字符串，如下：\n\n```python\nname = 'IBM'\nshares = 100\nprice = 91.1\nf'{name:>10s} {shares:>10d} {price:>10.2f}'\n#'       IBM        100      91.10'\n\n# 通常配合 print()函数使用，如下：\nprint(f'{name:>10s} {shares:>10d} {price:>10.2f}')\n```\n\n## 格式化代码\n\n格式代码(在`{}`中`:` 之后)类似于 c `printf ()`。常见代码包括:\n\n```python\nd       # 整数\nb       # 十六进制\nx       # 十六进制\nf       # 浮点数\ne       # 指数\ng       # 指数或浮点数\ns       # 字符串\nc       # 字符\n```\n\n常用的修饰符调整字段宽度和十进制精度。这是一个部分列表:\n\n```python\n:>10d   # 宽度为10，十进制精度无限制\n:<10d   # 宽度为10，十进制精度无限制\n:^10d   # 宽度为10，十进制精度无限制\n:0.2f   # 宽度为无限制，十进制精度为2\n```\n\n## 字典格式化\n\n使用`format_map`函数可以将字典中的键和值对应输出，如下：\n\n```python\ns = {\n    'name': 'IBM',\n    'shares': 100,\n    'price': 91.1\n}\n'{name:>10s} {shares:10d} {price:10.2f}'.format_map(s)\n#'       IBM        100      91.10'\n```\n\n## format()函数\n\n```python\n'{name:>10s} {shares:10d} {price:10.2f}'.format(name='IBM', shares=100, price=91.1)\n#'       IBM        100      91.10'\n'{:10s} {:10d} {:10.2f}'.format('IBM', 100, 91.1)\n#'       IBM        100      91.10'\n```\n\n## C 语言格式化\n\n使用`%`可以格式化字符串，如下：\n\n```python\n'The value is %d' % 3\n#'The value is 3'\n'%5d %-5d %10d' % (3,4,5)\n#'    3 4              5'\n'%0.2f' % (3.1415926,)\n#'3.14'\n```\n","slug":"python/2.3-formatting"},{"data":{"date":"December 1, 2021","title":"File Management","tags":["python"],"description":"大多数程序需要操作文件，比如读写文件，创建文件夹，删除文件等等。","fromNow":"13 days ago"},"content":"\n## 文件读写\n\n打开文件\n\n```python\nf=open('test.txt','rt')\ng=open('test.txt','wt')\n```\n\n读取所有内容\n\n```python\ndata=f.read()\ndata=f.read([maxbytes])\n```\n\n写入内容\n\n```python\ng.write('hello world')\n```\n\n关闭文件\n\n```python\nf.close()\ng.close()\n```\n\n文件应当在使用完毕后关闭，否则会导致内存泄漏。使用 with 语句可以自动关闭文件。\n\n离开 with 语句后，文件会自动关闭。\n\n```python\nwith open(filename, 'rt') as file:\n    # Use the file `file`\n    ...\n    # No need to close explicitly\n...statements\n```\n\n使用`with`语句读取挣个文件\n\n```python\nwith open('foo.txt', 'rt') as file:\n    data = file.read()\n```\n\n使用`with`语句按行读取文件\n\n```python\nwith open('foo.txt', 'rt') as file:\n    for line in file:\n```\n\n使用`with`语句写入文件\n\n```python\nwith open('outfile', 'wt') as out:\n    out.write('Hello World\\n')\n```\n\n重定向`print`函数\n\n```python\nwith open('foo.txt', 'wt') as file:\n    print('hello world', file=file)\n```\n","slug":"python/1.5-file"},{"data":{"date":"October 13, 2020","title":"Linux命令mkdir","tags":["linux"],"description":"用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计","fromNow":"a year ago"},"content":"\n**mkdir**命令用于创建目录，如果在目录名的前面没有加任何路径名，则在当前目录下创建由 dirname 指定的目录；如果给出了一个已经存在的路径，将会在该目录下创建一个指定的目录。在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。\n\n## 使用方法\n\n```shell\n#创建单个文件\nmkdir folder\n\n#创建多个文件\nmkdir folder1 folder2\n\n#使用-p参数创建文件夹，如果不存在即创建，如果不加-p，而且folder不存在，将会报错\nmkdir -p folder/data\n```\n","slug":"linux/Linux命令-mkdir"},{"data":{"date":"October 10, 2020","title":"Linux命令xargs","tags":["linux"],"description":"xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具","fromNow":"a year ago"},"content":"\nxargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。\n\n## 使用方法\n\n```shell\ncommand1 | xargs command2\n```\n\n我们使用**|**将输出传递给 xargs。这将负责运行 command2 命令，使用 command1 的输出作为其参数。\n\n## 例子\n\n让我们举一个简单的例子。您要从目录中删除某些特定文件。这些文件列在文本文件中。我们有 3 个文件：file1，file2，file3。在**todelete.txt**我们有一个要删除的文件列表，在本例中为 file1 和 file3：\n\n```shell\ncat todelete.txt\n\nfile1\nfile2\n```\n\n![nXyQfk](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/nXyQfk.png)\n\n通过 cat 命令将 todelete 内容输出并执行 rm 命令\n\n```shell\ncat todelete.txt | xargs rm\n```\n\n## 参数\n\n- -a file 从文件中读入作为 sdtin\n- -e flag ，注意有的时候可能会是-E，flag 必须是一个以空格分隔的标志，当 xargs 分析到含有 flag 这个标志的时候就停止。\n- -p 当每次执行一个 argument 的时候询问一次用户。\n- -n num 后面加次数，表示命令在执行的时候一次用的 argument 的个数，默认是用所有的。\n- -t 表示先打印命令，然后再执行。\n- -i 或者是-I，这得看 linux 支持了，将 xargs 的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。\n- -r no-run-if-empty 当 xargs 的输入为空的时候则停止 xargs，不用再去执行了。\n- -s num 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。\n- -L num 从标准输入一次读取 num 行送给 command 命令。\n- -l 同 -L。\n- -d delim 分隔符，默认的 xargs 分隔符是回车，argument 的分隔符是空格，这里修改的是 xargs 的分隔符。\n- -x exit 的意思，主要是配合-s 使用。。\n- -P 修改最大的进程数，默认是 1，为 0 时候为 as many as it can ，这个例子我没有想到，应该平时都用不到的吧。\n","slug":"linux/Linux命令-xargs"},{"data":{"date":"May 19, 2020","title":"面试题-手写instanceof","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## 实现 instanceof\n\n> 核心考察点 [getPrototypeOf](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf)\n\n```javascript\nfunction _instanceof(left, right) {\n  if (left !== 'object' || left === null) return false;\n  const proto = Object.getPrototypeOf(left);\n  while (true) {\n    if (proto === null) return false;\n    if (proto === right.prototype) return true;\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n_instanceof(111, Number); //true\n_instanceof(new String('11'), String); //true\n```\n","slug":"interview/js/instanceof"}]},"__N_SSG":true}