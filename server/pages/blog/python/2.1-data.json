{"pageProps":{"data":{"date":"December 3, 2021","title":"Data Types and Data Structures","tags":["python"],"description":"以元组和字典的形式介绍数据结构。","fromNow":"12 days ago"},"content":{"compiledSource":"var m=Object.defineProperty,d=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var t=(e,a,p)=>a in e?m(e,a,{enumerable:!0,configurable:!0,writable:!0,value:p}):e[a]=p,n=(e,a)=>{for(var p in a||(a={}))l.call(a,p)&&t(e,p,a[p]);if(o)for(var p of o(a))s.call(a,p)&&t(e,p,a[p]);return e},i=(e,a)=>d(e,N(a));var c=(e,a)=>{var p={};for(var r in e)l.call(e,r)&&a.indexOf(r)<0&&(p[r]=e[r]);if(e!=null&&o)for(var r of o(e))a.indexOf(r)<0&&s.call(e,r)&&(p[r]=e[r]);return p};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(p){var r=p,{components:e}=r,a=c(r,[\"components\"]);return mdx(MDXLayout,i(n(n({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u539F\\u59CB\\u6570\\u636E\\u7C7B\\u578B\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"\\u6574\\u5F62\\uFF1A\",mdx(\"inlineCode\",{parentName:\"li\"},\"int\")),mdx(\"li\",{parentName:\"ul\"},\"\\u6D6E\\u70B9\\u578B\\uFF1A\",mdx(\"inlineCode\",{parentName:\"li\"},\"float\")),mdx(\"li\",{parentName:\"ul\"},\"\\u5B57\\u7B26\\u4E32\\uFF1A\",mdx(\"inlineCode\",{parentName:\"li\"},\"str\"))),mdx(\"h2\",null,\"\\u65E0\\u7C7B\\u578B\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`email_address = None\n`)),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"None\"),\" \\u662F\\u4E00\\u4E2A\\u7279\\u6B8A\\u7684\\u503C\\uFF0C\\u8868\\u793A\\u7A7A\\u503C\\u3002\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`if email_address:\n    print('email address provided.')\n`)),mdx(\"h2\",null,\"\\u5143\\u7EC4\"),mdx(\"p\",null,\"\\u5143\\u7EC4\\u662F\\u4E00\\u79CD\\u6709\\u5E8F\\u7684\\u6570\\u636E\\u96C6\\u5408\\uFF0C\\u5143\\u7EC4\\u4E2D\\u7684\\u5143\\u7D20\\u53EF\\u4EE5\\u662F\\u4E0D\\u540C\\u7684\\u6570\\u636E\\u7C7B\\u578B\\u3002\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`s = ('a', 'b', 'c')\n`)),mdx(\"p\",null,\"\\u6709\\u65F6\\u5019\",mdx(\"inlineCode\",{parentName:\"p\"},\"()\"),\"\\u53EF\\u4EE5\\u7701\\u7565\\uFF0C\\u4F46\\u662F\\u4E0D\\u5EFA\\u8BAE\\u8FD9\\u6837\\u505A\\u3002\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`s = 'a', 'b', 'c'\n`)),mdx(\"p\",null,\"\\u901A\\u8FC7\\u7D22\\u5F15\\u8BBF\\u95EE\\u5143\\u7EC4\\u4E2D\\u7684\\u5143\\u7D20\\uFF0C\\u7D22\\u5F15\\u4ECE 0 \\u5F00\\u59CB\\u3002\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`s = ('GOOG', 100, 490.10, 'Google Inc.')\nname = s[0] # GOOG\nprice = s[2] # 490.10\nshares = s[1] # 100\n`)),mdx(\"p\",null,\"\\u65E0\\u6CD5\\u4FEE\\u6539\\u5143\\u7EC4\\u4E2D\\u7684\\u5143\\u7D20\\u3002\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`s[1] = 200\n# TypeError: 'tuple' object does not support item assignment\n`)),mdx(\"p\",null,\"\\u5143\\u7EC4\\u53EF\\u4EE5\\u88AB\\u91CD\\u65B0\\u8D4B\\u503C\\uFF0C\\u4F46\\u662F\\u4E0D\\u80FD\\u6539\\u53D8\\u5143\\u7EC4\\u7684\\u957F\\u5EA6\\u3002\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`s = ('GOO', 200, 490.10, 'Google Inc.')\n`)),mdx(\"h2\",null,\"\\u5143\\u7EC4\\u7684\\u5305\\u88C5\\u548C\\u62C6\\u5305\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`s = ('GOOG', 100, 490.10, 'Google Inc.')\nname, shares, price, company = s\n`)),mdx(\"h2\",null,\"\\u5143\\u7EC4\\u548C\\u5217\\u8868\"),mdx(\"p\",null,\"\\u5143\\u7EC4\\u901A\\u5E38\\u7531\\u4E0D\\u540C\\u7684\\u6570\\u636E\\uFF0C\\u800C\\u5217\\u8868\\u662F\\u76F8\\u540C\\u7C7B\\u578B\\u7684\\u6570\\u636E\\u961F\\u5217\\u3002\\u5143\\u7EC4\\u8868\\u793A\\u7684\\u662F\\u7ED3\\u6784\\uFF0C\\u800C\\u5217\\u8868\\u8868\\u793A\\u7684\\u662F\\u987A\\u5E8F\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"\\u90FD\\u662F\\u5E8F\\u5217\"),mdx(\"li\",{parentName:\"ul\"},\"\\u90FD\\u53EF\\u4EE5\\u5B58\\u50A8\\u4EFB\\u4F55\\u6570\\u636E\\u7C7B\\u578B\"),mdx(\"li\",{parentName:\"ul\"},\"\\u53EF\\u4EE5\\u901A\\u8FC7\\u7D22\\u5F15\\u8BBF\\u95EE\")),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`record = ('GOOG', 100, 490.1)       # \\u4E00\\u4E9B\\u4E0D\\u540C\\u7684\\u6570\\u636E\n\nsymbols = [ 'GOOG', 'AAPL', 'IBM' ]  # \\u4E00\\u4E9B\\u76F8\\u540C\\u7C7B\\u578B\\u7684\\u6570\\u636E\n`)),mdx(\"h2\",null,\"\\u5B57\\u5178\"),mdx(\"p\",null,\"\\u5B57\\u5178\\u662F\\u4E00\\u79CD\\u53EF\\u53D8\\u7684\\u6570\\u636E\\u7ED3\\u6784\\uFF0C\\u5B83\\u662F\\u4E00\\u79CD\\u6620\\u5C04\\uFF0C\\u4E5F\\u5C31\\u662F\\u4E00\\u79CD\\u952E\\u503C\\u5BF9\\u7684\\u96C6\\u5408\\u3002\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-python\"}),`s = {\n    'name': 'GOOG',\n    'shares': 100,\n    'price': 490.1\n}\n\ns['name'] # GOOG\ns['shares'] # 100\ns['price'] # 490.1\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"December 3, 2021","title":"Data Types and Data Structures","tags":["python"],"description":"以元组和字典的形式介绍数据结构。","fromNow":"12 days ago"}},"randomPost":[{"data":{"date":"December 2, 2021","title":"Functions","tags":["python"],"description":"随着程序的不断更新，我们会发现，函数的定义和调用是一致的。","fromNow":"12 days ago"},"content":"\n## 函数的定义\n\n函数的定义是一个特殊的可复用的代码块，它的第一行必须是函数的声明，第二行开始是函数的实现。\n\n```python\n#定义函数\ndef sumcount(n):\n    '''\n    Returns the sum of the first n integers\n    '''\n    total = 0\n    while n > 0:\n        total += n\n        n -= 1\n    return total\n#调用函数\na = sumcount(100)\n```\n\n## 标准函数\n\npython 中的标准函数是一些内置的函数，通过`import`调用。\n\n```python\nimport math\nx = math.sqrt(10)\n\nimport urllib.request\nu = urllib.request.urlopen('http://www.python.org/')\ndata = u.read()\n```\n\n## 错误和异常\n\n错误和异常是 python 中的两个主要概念，错误是指程序运行过程中发生的错误，异常是指程序运行过程中抛出的异常。例如：\n\n```python\n>>> int('N/A')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: 'N/A'\n>>>\n```\n\n## 捕获、处理异常\n\n异常可以通过`try`和`except`来捕获，也可以通过`try`和`finally`来处理。\n\n```python\nfor line in f:\n    fields = line.split()\n    try:\n        shares = int(fields[1])\n    except ValueError:\n        print(\"Couldn't parse\", line)\n    ...\n```\n","slug":"python/1.6-function"},{"data":{"date":"May 10, 2018","title":"Boolean","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nBoolean 有两个值 true/false。\n\n| 数据类型  | 转换为 true 的值 | 转换为 false 的值 |\n| --------- | ---------------- | ----------------- |\n| Boolean   | true             | false             |\n| String    | 任意飞空字符串   | 空字符串          |\n| Number    | 任何非零值       | 0 和 NaN          |\n| Object    | 任何对象         | null              |\n| Undefined |                  | undefined         |\n","slug":"javascript/base/Boolean"},{"data":{"date":"November 20, 2021","title":"如何在 vue 中使用 Debounce、Throttle","tags":["vue","javascript"],"description":"如input、resize、scroll、intersection observer 等事件可能发生得非常频繁，例如每秒发生几次，因此调用一个动作，比如对每个事件发出读取请求，并不是一个明智的方法。","fromNow":"25 days ago"},"content":"\n## 为什么要使用 debounce 和 throttle\n\n防抖和节流就是针对响应跟不上触发频率这类问题的两种解决方案。在给 DOM 绑定事件时，有些事件我们是无法控制触发频率的。 如鼠标移动事件 onmousemove, 滚动滚动条事件 onscroll，窗口大小改变事件 onresize，瞬间的操作都会导致这些事件会被高频触发。 如果事件的回调函数较为复杂，就会导致响应跟不上触发，出现页面卡顿，假死现象。 在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发。\n\n## 在 watcher 中使用 debounce\n\n1. 在`created`生命周期将`this.debounce`绑定到`this`上，这样`this.debounce`就可以在`created`生命周期中使用。\n2. 在`watch`函数中，使用`this.debounce`调用`debounce`函数，并传入`this.debounce`的回调函数。\n3. 在事件销毁前，使用`this.debounce`调用`clear`函数，清除定时器。\n\n```html\n<template>\n  <input v-model=\"value\" type=\"text\" />\n  <p>{{ value }}</p>\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    data() {\n      return {\n        value: '',\n      };\n    },\n    watch: {\n      value(...args) {\n        this.debouncedWatch(...args);\n      },\n    },\n    created() {\n      this.debouncedWatch = debounce((newValue, oldValue) => {\n        console.log('New value:', newValue);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedWatch.cancel();\n    },\n  };\n</script>\n```\n\n## 使用 debounce 处理事件\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    created() {\n      this.debouncedHandler = debounce((event) => {\n        console.log('New value:', event.target.value);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedHandler.cancel();\n    },\n  };\n</script>\n```\n\n为什么不适用`debounce`或`throttle`直接绑定函数呢？比如：\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    methods: {\n      // Don't do this!\n      debouncedHandler: debounce(function (event) {\n        console.log('New value:', event.target.value);\n      }, 500),\n    },\n  };\n</script>\n```\n\n**使用`export default { ... }`从组件导出的 options 对象，包括方法，将被组件的所有实例重用。如果网页中有 2 个或更多的组件实例，那么所有的组件都将使用相同的`debounce`或`throttle`的函数方法。**\n\n## 总结\n\n在 `vue` 中使用 `debounce` 和 `throttle` 函数，应该在 `created` 和 `beforeUnmount` 生命周期中使用，而不是在 `watch` 中使用。\n\n```html\n<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  export default {\n    created() {\n      this.debouncedCallback = debounce((...args) => {\n        // The debounced\n        callback;\n      }, 500);\n    },\n    watch: {\n      value(...args) {\n        this.debouncedCallback(...args);\n      },\n    },\n  };\n</script>\n```\n","slug":"vue/debounce-throttle"},{"data":{"date":"July 30, 2017","title":"css的小技巧","tags":["css"],"fromNow":"4 years ago"},"content":"\n1. 使用 CSS 复位\n\n不同浏览器有不同的自带初始样式，通常可以使用 normalize.css、tinyreset.css 进行通配初始化。\n\n```css\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n```\n\n2. 继承 box-sizing\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n```\n\n3. 使用 unset 而不是重置所有属性\n4. 使用 :not() 选择器来决定表单是否显示边框\n5. 为 body 元素添加行高\n6. 為表單元素設置:focus\n7. 垂直居中任何元素\n8. 逗号分隔的列表\n9. 使用负的 nth-child 来选择元素\n10. 使用 SVG 图标\n11. 使用 “形似猫头鹰” 的选择器\n12. 使用 max-height 来建立纯 CSS 的滑块\n13. 创造格子等宽的表格\n14. 利用 Flexbox 去除多余的外边距\n15. 利用属性选择器来选择空链接\n16. 给 “默认” 链接定义样式\n17. 一致的垂直节奏\n18. 内在比例盒\n19. 为破碎图象定义样式\n20. 用 rem 来调整全局大小；用 em 来调整局部大小\n21. 隐藏没有静音、自动播放的影片\n22. 使用选择器 :root 来控制字体弹性\n23. 为更好的移动体验，为表单元素设置字体大小\n24. 使用指针事件來控制鼠标事件\n","slug":"css/小技巧-ChicksTricks"},{"data":{"date":"October 9, 2020","title":"Linux命令gzip","tags":["linux"],"description":"“gzip”命令的快速指南，用于压缩文件","fromNow":"a year ago"},"content":"\n“gzip”命令的快速指南，用于压缩文件\n\ngzip 命令可以在 Linux、macOS、WSL 和任何有 UNIX 环境的地方使用。\n\n您可以使用 gzip 命令使用名为[LZ77](https://en.wikipedia.org/wiki/LZ77_and_LZ78)的 gzip 压缩协议压缩文件。\n\n## 使用方法\n\n```shell\ngzip filename\n```\n\n这将压缩文件，并向其附加一个.gz 扩展名，原始文件将被删除。为了防止出现这种情况，可以使用`-C`选项并使用输出重定向将输出写入文件名.gz 文件：\n\n```shell\ngzip -c filename > filename.gz\n```\n\n-C 选项指定输出将转到标准输出流，保留原始文件不变\n\n同时也可以使用-K 选项\n\n```shell\ngzip -k filename\n```\n\n压缩越多，压缩（和解压缩）所需的时间就越长。级别范围从 1（最快、最差的压缩）到 9（最慢、更好的压缩），默认值为 6。您可以使用-`<NUMBER>`选项选择特定级别：\n\n```shell\ngzip -1 filename\n```\n\n压缩多文件\n\n```shell\ngzip filename1 filename2\n```\n\n使用-r 选项递归地压缩目录中的所有文件：\n\n```shell\ngzip -r a_folder\n```\n\n-v 选项打印压缩百分比信息。下面是一个与-k（keep）选项一起使用的示例：\n\n![fvzBBf](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/fvzBBf.png)\n\ngzip 还可以用于解压缩文件，使用-d 选项：\n\n```shell\ngzip -d filename.gz\n```\n","slug":"linux/Linux命令-gzip"},{"data":{"date":"May 8, 2018","title":"Symbol","tags":["javascript"],"fromNow":"4 years ago"},"content":"","slug":"javascript/base/Symbol"}]},"__N_SSG":true}