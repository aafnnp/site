{"pageProps":{"data":{"date":"December 1, 2021","title":"File Management","tags":["python"],"description":"大多数程序需要操作文件，比如读写文件，创建文件夹，删除文件等等。","fromNow":"13 days ago"},"content":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var i=(e,p,a)=>p in e?c(e,p,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[p]=a,o=(e,p)=>{for(var a in p||(p={}))r.call(p,a)&&i(e,a,p[a]);if(n)for(var a of n(p))l.call(p,a)&&i(e,a,p[a]);return e},d=(e,p)=>m(e,h(p));var s=(e,p)=>{var a={};for(var t in e)r.call(e,t)&&p.indexOf(t)<0&&(a[t]=e[t]);if(e!=null&&n)for(var t of n(e))p.indexOf(t)<0&&l.call(e,t)&&(a[t]=e[t]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var t=a,{components:e}=t,p=s(t,[\"components\"]);return mdx(MDXLayout,d(o(o({},layoutProps),p),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u6587\\u4EF6\\u8BFB\\u5199\"),mdx(\"p\",null,\"\\u6253\\u5F00\\u6587\\u4EF6\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-python\"}),`f=open('test.txt','rt')\ng=open('test.txt','wt')\n`)),mdx(\"p\",null,\"\\u8BFB\\u53D6\\u6240\\u6709\\u5185\\u5BB9\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-python\"}),`data=f.read()\ndata=f.read([maxbytes])\n`)),mdx(\"p\",null,\"\\u5199\\u5165\\u5185\\u5BB9\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-python\"}),`g.write('hello world')\n`)),mdx(\"p\",null,\"\\u5173\\u95ED\\u6587\\u4EF6\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-python\"}),`f.close()\ng.close()\n`)),mdx(\"p\",null,\"\\u6587\\u4EF6\\u5E94\\u5F53\\u5728\\u4F7F\\u7528\\u5B8C\\u6BD5\\u540E\\u5173\\u95ED\\uFF0C\\u5426\\u5219\\u4F1A\\u5BFC\\u81F4\\u5185\\u5B58\\u6CC4\\u6F0F\\u3002\\u4F7F\\u7528 with \\u8BED\\u53E5\\u53EF\\u4EE5\\u81EA\\u52A8\\u5173\\u95ED\\u6587\\u4EF6\\u3002\"),mdx(\"p\",null,\"\\u79BB\\u5F00 with \\u8BED\\u53E5\\u540E\\uFF0C\\u6587\\u4EF6\\u4F1A\\u81EA\\u52A8\\u5173\\u95ED\\u3002\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-python\"}),`with open(filename, 'rt') as file:\n    # Use the file \\`file\\`\n    ...\n    # No need to close explicitly\n...statements\n`)),mdx(\"p\",null,\"\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"p\"},\"with\"),\"\\u8BED\\u53E5\\u8BFB\\u53D6\\u6323\\u4E2A\\u6587\\u4EF6\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-python\"}),`with open('foo.txt', 'rt') as file:\n    data = file.read()\n`)),mdx(\"p\",null,\"\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"p\"},\"with\"),\"\\u8BED\\u53E5\\u6309\\u884C\\u8BFB\\u53D6\\u6587\\u4EF6\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-python\"}),`with open('foo.txt', 'rt') as file:\n    for line in file:\n`)),mdx(\"p\",null,\"\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"p\"},\"with\"),\"\\u8BED\\u53E5\\u5199\\u5165\\u6587\\u4EF6\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-python\"}),`with open('outfile', 'wt') as out:\n    out.write('Hello World\\\\n')\n`)),mdx(\"p\",null,\"\\u91CD\\u5B9A\\u5411\",mdx(\"inlineCode\",{parentName:\"p\"},\"print\"),\"\\u51FD\\u6570\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-python\"}),`with open('foo.txt', 'wt') as file:\n    print('hello world', file=file)\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"December 1, 2021","title":"File Management","tags":["python"],"description":"大多数程序需要操作文件，比如读写文件，创建文件夹，删除文件等等。","fromNow":"13 days ago"}},"randomPost":[{"data":{"date":"December 16, 2020","title":"安装Certbot","tags":["server"],"fromNow":"a year ago"},"content":"\n![Fkz8eJ](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/Fkz8eJ.jpg)\n\n## 前置条件\n\n- Centos 8/Ubuntu 18.04/Debain 10\n- 域名 xxx.com\n- 域名解析到对应服务器\n\n## Centos 8 安装 Certbot\n\n### 加入 EPEL 软件源\n\n```shell\nsudo yum install epel-release\nsudo yum -y update\n```\n\n### 下载并安装特定于 Certbot 和 web 服务器的包\n\n```shell\nsudo curl -O https://dl.eff.org/certbot-auto\nsudo mv certbot-auto /usr/local/bin/certbot-auto\nchmod 0755 /usr/local/bin/certbot-auto\n```\n\n### 启动 Certbot\n\n```shell\nsudo /usr/local/bin/certbot-auto --nginx\n```\n\n### 启动 jenkins\n\n```bash\nsudo systemctl start jenkins\n```\n\n### 询问信息如下\n\n```shell\n\n# sudo /usr/local/bin/certbot-auto --nginx\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator nginx, Installer nginx\nNo names were found in your configuration files. Please enter in your domain\nname(s) (comma and/or space separated)  (Enter 'c' to cancel): www.example.com\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for www.example.com\nWaiting for verification...\nCleaning up challenges\nDeploying Certificate to VirtualHost /etc/nginx/nginx.conf\n\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n1: No redirect - Make no further changes to the webserver configuration.\n2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\nnew sites, or if you're confident your site works on HTTPS. You can undo this\nchange by editing your web server's configuration.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel): 2\nRedirecting all traffic on port 80 to ssl in /etc/nginx/nginx.conf\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\n\n### 开启防火墙\n\n```shell\nsudo firewall-cmd --zone=public --permanent --add-service=https\nsudo firewall-cmd --reload\n```\n\n## Ubuntu 18.04 安装 Certbot\n\n### 安装 Certbot 和 web 服务器\n\n```shell\nsudo apt-get update\nsudo add-apt-repository ppa:certbot/certbot\nsudo apt-get install python-certbot-nginx\nsudo certbot --nginx\n```\n\n### 开启防火墙\n\n```shell\nsudo systemctl start ufw && sudo systemctl enable ufw\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw enable\n```\n\n## Debain 10 安装 Certbot\n\n### 安装 Certbot 和 web 服务器\n\n```shell\nsudo apt install certbot python-certbot-nginx\nsudo certbot --nginx\n```\n\n### 询问信息\n\n```shell\n# sudo certbot --nginx\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator nginx, Installer nginx\nEnter email address (used for urgent renewal and security notices) (Enter 'c' to\ncancel): admin@example.com\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPlease read the Terms of Service at\nhttps://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must\nagree in order to register with the ACME server at\nhttps://acme-v02.api.letsencrypt.org/directory\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(A)gree/(C)ancel: A\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nWould you be willing to share your email address with the Electronic Frontier\nFoundation, a founding partner of the Let's Encrypt project and the non-profit\norganization that develops Certbot? We'd like to send you email about our work\nencrypting the web, EFF news, campaigns, and ways to support digital freedom.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(Y)es/(N)o: N\nNo names were found in your configuration files. Please enter in your domain\nname(s) (comma and/or space separated)  (Enter 'c' to cancel): www.rajie.wiki\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for www.example.com\nWaiting for verification...\nCleaning up challenges\nDeploying Certificate to VirtualHost /etc/nginx/sites-enabled/default\n\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n1: No redirect - Make no further changes to the webserver configuration.\n2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\nnew sites, or if you're confident your site works on HTTPS. You can undo this\nchange by editing your web server's configuration.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel): 2\nRedirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/default\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\n\n### 开启防火墙\n\n```shell\nsudo systemctl start ufw && sudo systemctl enable ufw\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw enable\n```\n","slug":"server/安装Certbot"},{"data":{"date":"May 19, 2020","title":"this的指向","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20200413141906.png)\n\n## this 指向\n\nthis 总是指向函数的直接调⽤者（⽽⾮间接调⽤者）\n\n如果有 new 关键字， this 指向 new 出来的那个对象\n\n在事件中， this 指向触发这个事件的对象，特殊的是， IE 中的 attachEvent 中的 this 总是指向全局对象 Window\n\n> 创建⼀个空对象，并且 this 变量引⽤该对象，同时还继承了该函数的原型属性和⽅法被加⼊到 this 引⽤的对象中新创建的对象由 this 所引⽤，并且最后隐式的返回 this\n\n```javascript\nvar test = {\n  prop: 42,\n  func: function () {\n    return this.prop;\n  },\n};\n\nconsole.log(test.func()); //42，调用者是test\n//42\n\nvar fullname = 'David Jones';\nvar obj = {\n  fullname: 'Colin Brown',\n  prop: {\n    fullname: 'Aurelio Deftch',\n    getFullname: function () {\n      return this.fullname;\n    },\n  },\n};\nvar test = obj.prop.getFullname;\nconsole.log(test()); // David Jones，调用者是window，window.fullname是David Jones\nobj.prop.getFullname(); // Aurelio Deftch，调用者是obj.prop，obj.prop.fullname是Aurelio Deftch\n```\n\n## 扩展（call、bind、apply）\n\n- apply 、 call 、bind 三者都是用来改变函数的 this 对象的指向的；\n- apply 、 call 、bind 三者第一个参数都是 this 要指向的对象，也就是想指定的上下文；\n- apply 、 call 、bind 三者都可以利用后续参数传参；\n- bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。\n\n### apply、call\n\n- apply、call 是为了改变某个函数运行时的上下文（context）而存在的，即改变函数体内部的 this 指向\n- 作用一样，区别在于接受的参数不一样\n- func.call(this,args)\n- func.apply(this,[args])\n- 用法：当知道参数数量的时候用 call，不确定的时候用 apply\n\n```javascript\nfunction log() {\n  var _args = [...arguments];\n  console.log(_args);\n  args.unshift('(app)');\n\n  console.log.apply(console, args);\n}\nlog(1, 2, 3); //(app) 1 2 3\n```\n\n### bind\n\n> MDN 的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n\n```javascript\nvar bar = function () {\n  console.log(this.x);\n};\nvar foo = {\n  x: 3,\n};\nbar(); // undefined\nvar func = bar.bind(foo);\nfunc(); // 3,this指向了foo\n```\n","slug":"javascript/advance/this指向"},{"data":{"date":"January 7, 2021","title":"Docker Containers","description":"Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器","tags":["docker"],"fromNow":"a year ago"},"content":"\nimage 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。\n\n```shell\n# 列出本机正在运行的容器\n$ docker container ls\n```\n\n```shell\n# 列出本机所有容器，包括终止运行的容器\n$ docker container ls --all\n```\n\n上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的 docker container kill 命令。\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用 docker container rm 命令删除。\n\n```shell\n$ docker container rm [containerID]\n```\n\n运行上面的命令之后，再使用 docker container ls --all 命令，就会发现被删除的容器文件已经消失了。\n\n## 更多\n","slug":"docker/Docker容器"},{"data":{"date":"May 11, 2018","title":"Null","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nNull 和 Undefined 一样，只有一个值，就是 null\n\nnull 表示空对象指针，使用 typeof null 会返回 object\n\nnull 与 undefined 的区别\n\n```javascript\ntypeof null; //object\ntypeof undefined; //undefined\n\nnull == undefined;\nnull !== undefined;\n```\n","slug":"javascript/base/Null"},{"data":{"date":"May 12, 2018","title":"Object","tags":["javascript"],"fromNow":"4 years ago"},"content":"\n## Object\n\n> 任何非原始类型的值（字符串，数字，布尔值，符号，null 或未定义）都是对象，数组和函数也不例外。\n\n## 内置属性\n\n1. Object.length=1\n2. Object.prototype\n\n## 静态方法\n\n1. Object.assign() **_ES2015_** //通过复制一个或多个对象来创建一个新的对象。\n2. Object.create() //使用指定的原型对象和属性创建一个新对象。\n3. Object.defineProperty() //给对象添加一个属性并指定该属性的配置。\n4. Object.defineProperties() //给对象添加多个属性并分别指定它们的配置。\n5. Object.entries() **_ES2017_** //返回给定对象自身可枚举属性的 [key, value] 数组。\n6. Object.freeze() //冻结对象：其他代码不能删除或更改任何属性。\n7. Object.getOwnPropertyDescriptor() //返回对象指定的属性配置。\n8. Object.getOwnPropertyNames() //返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。\n9. Object.getOwnPropertySymbols() //返回一个数组，它包含了指定对象自身所有的符号属性。\n10. Object.getPrototypeOf() //返回指定对象的原型对象。\n11. Object.is() **_ES2015_** //比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。\n12. Object.isExtensible() //判断对象是否可扩展。\n13. Object.isFrozen() //判断对象是否已经冻结。\n14. Object.isSealed() //判断对象是否已经密封。\n15. Object.keys() //返回一个包含所有给定对象自身可枚举属性名称的数组。\n16. Object.preventExtensions() //防止对象的任何扩展。\n17. Object.seal() //防止其他代码删除对象的属性。\n18. Object.setPrototypeOf() **_ES2015_** //设置对象的原型（即内部 [[Prototype]] 属性）。\n19. Object.values() //返回给定对象自身可枚举值的数组。\n\n## Object 实例和 Object 原型对象\n\n> JavaScript 中的所有对象都来自 Object；所有对象从 Object.prototype 继承方法和属性，尽管它们可能被覆盖。\n\n```javascript\nObject.prototype.constructor; //特定的函数，用于创建一个对象的原型。\n```\n\n## 实例方法\n\n1. Object.prototype.hasOwnProperty() //返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。\n2. Object.prototype.isPrototypeOf() //返回一个布尔值，表示指定的对象是否在本对象的原型链中。\n3. Object.prototype.propertyIsEnumerable() //判断指定属性是否可枚举，内部属性设置参见 ECMAScript [[Enumerable]] attribute 。\n4. Object.prototype.toLocaleString() //直接调用 toString()方法。\n5. Object.prototype.toString() //返回对象的字符串表示。\n6. Object.prototype.valueOf() //返回指定对象的原始值。\n\n## 创建对象\n\n```javascript\nconst person = {};\ntypeof person; //object\n```\n\n### 使用 Object 全局函数\n\n```javascript\nconst person = Object();\ntypeof person; //object\n```\n\n### 使用 Object 构造器\n\n```javascript\nconst person = new Object();\ntypeof person; //object\n```\n\n### 使用 Object.create()\n\n```javascript\nconst car = Object.create();\n```\n\n```javascript\nconst person = {\n  age: 36,\n  name: 'funny',\n  speak: () => {\n    //speak\n  },\n};\n\nconst person = Object({\n  age: 36,\n  name: 'funny',\n  speak: () => {\n    //speak\n  },\n});\n\nconst person = new Object({\n  age: 36,\n  name: 'funny',\n  speak: () => {\n    //speak\n  },\n});\n```\n\n### Object.assign\n\n```javascript\nconst copied = Object.assign({}, target1, target2, ...target);\n```\n\n> Object.assign-将一个或多个对象的所有可枚举属性复制到另一个对象中。浅拷贝，复制对象引用而非对象本身。\n\n```javascript\nconst original = {\n  name: 'Fiesta',\n  car: {\n    color: 'blue',\n  },\n};\nconst copied = Object.assign({}, original);\n\noriginal.name = 'Focus';\noriginal.car.color = 'yellow';\n\ncopied.name; //Fiesta\ncopied.car.color; //yellow\n```\n\n### Object.create\n\n```javascript\nconst newObject = Object.create(prototype);\n\nconst newObject = Object.create(prototype, newProperties);\n```\n\n> 使用指定原型创建新的对象，可以指定第二个参数来向对象添加新属性\n\n```javascript\nconst animal = {};\nconst dog = Object.create(animal);\n\nconst animal = {};\nconst dog = Object.create(animal, {\n  breed: {\n    value: 'Siberian Husky',\n  },\n});\nconsole.log(dog.breed); //'Siberian Husky'\n```\n\n### Object.defineProperty\n\n> 直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象\n\n```javascript\nconst dog = {};\nObject.defineProperty(dog, 'breed', {\n  value: 'Siberian Husky',\n});\nconsole.log(dog.breed); //'Siberian Husky'\n```\n\n扩展：[vue 原理之-神奇的 Object.defineProperty](\"https://zhuanlan.zhihu.com/p/29066270\")\n\n### Object.defineProperties\n\n> 直接在一个对象上定义新的属性或修改现有属性，并返回该对象\n\n```javascript\nconst dog = {};\nObject.defineProperties(dog, {\n  breed: {\n    value: 'Siberian Husky',\n  },\n});\nconsole.log(dog.breed); //'Siberian Husky'\n```\n\n### Object.entries()\n\n> ES2017,返回自身可枚举属性的键值对数组\n\n```javascript\nconst person = { name: 'Fred', age: 87 };\nObject.entries(person); // [['name', 'Fred'], ['age', 87]]\n\nconst people = ['Fred', 'Tony'];\nObject.entries(people); // [['0', 'Fred'], ['1', 'Tony']]\n```\n\n### Object.freeze()\n\n> 冻结对象，冻结后不能再添加或修改\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nconst myDog = Object.freeze(dog);\n\nObject.isFrozen(dog); //true\nObject.isFrozen(myDog); //true\ndog === myDog; //true\n\ndog.name = 'Roger'; //TypeError: 无法添加name属性，dog是不可扩展的\n```\n\n### Object.getOwnPropertyDescriptor()\n\n> 返回自由属性描述符\n\n```javascript\nconst dog = {};\nObject.defineProperties(dog, {\n  breed: {\n    value: 'Siberian Husky',\n  },\n});\nObject.getOwnPropertyDescriptor(dog, 'breed');\n/*\n{\n  value: 'Siberian Husky',\n  writable: false,\n  enumerable: false,\n  configurable: false\n}\n*/\n```\n\n### Object.getOwnPropertyNames()\n\n> 返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\ndog.name = 'Roger';\n\nObject.getOwnPropertyNames(dog); //[ 'breed', 'name' ]\n```\n\n### Object.getOwnPropertySymbols()\n\n> 返回一个给定对象自身的所有 Symbol 属性的数\n\n```javascript\nconst dog = {};\nconst r = Symbol('Roger');\nconst s = Symbol('Syd');\ndog[r] = {\n  name: 'Roger',\n  age: 6,\n};\ndog[s] = {\n  name: 'Syd',\n  age: 5,\n};\n\nObject.getOwnPropertySymbols(dog); //[ Symbol(Roger), Symbol(Syd) ]\n```\n\n### Object.getPrototypeOf()\n\n> 返回指定对象的原型（内部[[Prototype]]属性的\n\n```javascript\nconst animal = {};\nconst dog = Object.create(animal);\nconst prot = Object.getPrototypeOf(dog);\n\nanimal === prot; //true\n\n//如果对象没有原型，将返回null\nObject.prototype; //{}\nObject.getPrototypeOf(Object.prototype); //null\n```\n\n### Object.is()\n\n> 判断两个值是否相等\n\n- 两个值都是 undefined\n- 两个值都是 null\n- 两个值都是 true 或者都是 false\n- 两个值是由相同个数的字符按照相同的顺序组成的字符串\n- 两个值指向同一个对象\n- 两个值都是数字并且\n  - 都是正零 +0\n  - 都是负零 -0\n  - 都是 NaN\n  - 都是除零和 NaN 外的其它同一个数字\n\n```javascript\nObject.is(a, b);\n```\n\n### Object.isExtensible()\n\n> 判断一个对象是否是可扩展的，返回布尔值。任何对象都是可扩展，除非使用了 Object.freeze()、Object.seal()、Object.preventExtensions()\n\n### Object.isFrozen()\n\n> 判断一个对象是否被冻结，返回布尔值\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nconst myDog = Object.freeze(dog);\nObject.isFrozen(dog); //true\nObject.isFrozen(myDog); //true\ndog === myDog; //true\n```\n\n### Object.isSealed()\n\n> 判断一个对象是否被密封，返回布尔值\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nconst myDog = Object.seal(dog);\nObject.isSealed(dog); //true\nObject.isSealed(myDog); //true\ndog === myDog; //true\n```\n\n### Object.keys()\n\n> 返回对象的自身可枚举属性组成的数组\n\n```javascript\nconst car = {\n  color: 'Blue',\n  brand: 'Ford',\n  model: 'Fiesta',\n};\n\nObject.keys(car); //[ 'color', 'brand', 'model' ]\n```\n\n### Object.preventExtensions()\n\n> 阻止对象扩展，但可以删除属性\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nObject.preventExtensions(dog);\n\ndog.name = 'Roger'; //TypeError: Cannot add property name, object is not extensible\n\ndelete dog.name;\ndog; //{ breed: 'Siberian Husky' }\n```\n\n### Object.seal()\n\n> 与 Object.freeze（）类似，但不会使属性不可写。仅阻止添加或删除属性。与 Object.preventExtensions（）类似，但也不允许删除属性：\n\n```javascript\nconst dog = {};\ndog.breed = 'Siberian Husky';\nObject.seal(dog);\ndog.breed = 'Pug';\ndog.name = 'Roger'; //TypeError: Cannot add property name, object is not extensible\n```\n\n### Object.values()\n\n> 对象自身的所有可枚举属性值的数组\n\n```javascript\nconst person = { name: 'Fred', age: 87 };\nObject.values(person); // ['Fred', 87]\n\nconst people = ['Fred', 'Tony'];\nObject.values(people); // ['Fred', 'Tony']\n```\n\n### Object.hasOwnProperty()\n\n> 判断对象自身是否有某个值，返回布尔值\n\n```javascript\nconst person = { name: 'Fred', age: 87 };\nperson.hasOwnProperty('name'); //true\nperson.hasOwnProperty('job'); //false\n```\n\n### Object.isPrototypeOf()\n\n> 测试一个对象是否存在于另一个对象的原型链上\n\n```javascript\nconst Animal = {\n  isAnimal: true,\n};\n\nconst Mammal = Object.create(Animal);\nMammal.isMammal = true;\n\nAnimal.isPrototypeOf(Mammal); //true\n\nconst dog = Object.create(Animal);\nObject.setPrototypeOf(dog, Mammal);\n\nAnimal.isPrototypeOf(dog); //true\nMammal.isPrototypeOf(dog); //true\n```\n\n### Object.propertyIsEnumerable()\n\n> 判断对象的属性是否可枚举，返回布尔值\n\n```javascript\nconst person = { name: 'Fred' };\n\nObject.defineProperty(person, 'age', {\n  value: 87,\n  enumerable: false,\n});\n\nperson.propertyIsEnumerable('name'); //true\nperson.propertyIsEnumerable('age'); //false\n```\n\n### Object.toLocaleString()\n\n```javascript\nconst person = { name: 'Fred' };\nperson.toLocaleString(); //[object Object]\n```\n\n### Object.toString()\n\n```javascript\nconst person = { name: 'Fred' };\nperson.toString(); //[object Object]\n```\n\n### Object.valueOf()\n\n> 返回指定对象的原始值\n\n```javascript\nconst person = { name: 'Fred' };\nperson.valueOf(); //{ name: 'Fred' }\n```\n","slug":"javascript/base/Object"},{"data":{"date":"April 8, 2021","title":"函数、参数、错误","tags":["swift"],"description":"一般来说，一个函数是可以通过外部代码调用的一个“子程序”（或在递归的情况下由内部函数调用）。像程序本身一样，一个函数由称为函数体的一系列语句组成。值可以传递给一个函数，函数将返回一个值。","fromNow":"8 months ago"},"content":"\n## 创建函数\n\nSwift 函数从 func 关键字开始，然后是函数名，然后`{}`。函数的所有主体——都放在大括号内。\n\n```swift\n// 创建函数\nfunc printHelp() {\n    let message = \"\"\"\n\t\tWelcome to MyApp!\n\n\t\tRun this app inside a directory of images and\n\t\tMyApp will resize them all into thumbnails\n\t\t\"\"\"\n    print(message)\n}\n// 调用函数printHelp\nprintHelp()\n```\n\n## 接收参数\n\n函数接收参数，比如内置的`print`函数，参数定义数据类型表示接收的参数类型。\n\n```swift\nprint(\"hello world\") // hello world即为参数\n```\n\n创建函数打印平方值\n\n```swift\nfunc square(number: Int) {\n    print(number * number)\n}\n// Int 表示参数只接受Int类型\nsquare(number: 8) // 64\n```\n\n## 返回值\n\n除了接收数据，函数还可以返回数据。通过`-> <数据类型>`告诉 swift 将返回什么数据类型的值。\n\n```swift\nfunc square(number: Int) -> Int {\n    return number * number\n}\n// -> Int 表示将返回Int类型的值\nlet result = square(number: 8)\nprint(result) // 64\n```\n\n## 参数标签\n\n每一个函数的形式参数都包含形式参数标签和形式参数名两部分\n\n- 形式参数标签用在调用函数的时候\n- 形式参数名用在函数的实现当中\n- 在调用函数的时候，每一个形式参数前边都会有一个形式参数标签\n- 默认情况下，形式参数使用它们的形式参数名作为形式参数标签\n- 如果不想要形式参数标签，可以在形式参数名称前加上`_`\n\n```swift\n//这里的info1和info2就是形式参数标签\n//name和age是形式参数名称\nfunc personalInfo(info1 name : String, info2 age : Int) { //在函数的实现中使用形式参数名称 print(\"姓名：(name)，年龄：(age)\")\n}\n//在函数调用的时候使用形式参数标签\npersonalInfo(info1: \"norman\", info2: 23)\n\n//下面是默认写法\n//此时，name和age既是形式参数标签，也是形式参数名称\nfunc personalInfo(name : String, age : Int) { //在函数内部实现的时候，name和age是形式参数名称 print(\"姓名：(name)，年龄：(age)\")\n}\n//在函数调用的时候，name和age是形式参数标签\npersonalInfo(name: \"norman\", age: 24)\n\n//如果不想要形式参数标签，可以在形式参数名称前面加 _\nfunc personalInfo(_ name : String, _ age : Int) { print(\"姓名：(name)，年龄：(age)\")\n}\n//在函数调用的时候，没有形式参数标签\npersonalInfo(\"norman\", 24)\n```\n\n## 默认参数\n\nswift 允许设置参数默认值，如：\n\n```swift\nfunc greet(_ person: String, nicely: Bool = true) {\n    if nicely == true {\n        print(\"Hello, \\(person)!\")\n    } else {\n        print(\"Oh no, it's \\(person) again...\")\n    }\n}\n\n// 调用\ngreet(\"Taylor\")\ngreet(\"Taylor\", nicely: false)\n```\n\n## 变量参数\n\n当参数不确定，或者参数有多个，在类型后使用`...`，swift 会将传入的值转换为数组，因此可以在函数内部使用循环语句处理。如：\n\n```swift\nfunc square(numbers: Int...) {\n    for number in numbers {\n        print(\"\\(number) squared is \\(number * number)\")\n    }\n}\n\nsquare(numbers: 1, 2, 3, 4, 5)\n```\n\n## io 参数\n\n一般默认在函数中定义的参数都是常量参数，也就是这个参数你只可以查询使用，不能改变它的值。\n\n如果想要声明一个变量参数，可以在参数定义前加 inout 关键字，这样就可以改变这个参数的值了。\n\n比如，如果你想将一个数字翻倍——即直接更改值，而不是返回一个新的值——你可以写一个这样的函数：\n\n```swift\nfunc doubleInPlace(number: inout Int) {\n    number *= 2\n}\n\nvar myNum = 10\ndoubleInPlace(number: &myNum)\n```\n\n## 函数总结\n\n- 函数允许我们重复使用代码，而不需要重复声明。\n- 函数可以接受参数——只需告诉 Swift 每个参数的类型。\n- 函数可以返回值，同样，您只需指定要返回的类型。如果您想返回一些内容，可以使用元组。\n- 可以在内部和外部对参数使用不同的名称，也可以完全忽略外部名称。\n- 参数可以具有默认值，这有助于在通常使用特定值时编写更少的代码。\n- 可变参数函数接受零个或多个特定参数，Swift 将输入转换为数组。\n- 函数可以抛出错误，但必须使用 try 和 handle errors 来调用它们。\n- 可以使用 inout 来更改函数内部的变量，但通常最好是返回一个新值。\n","slug":"swift/100days/day05"}]},"__N_SSG":true}