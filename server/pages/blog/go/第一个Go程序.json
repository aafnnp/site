{"pageProps":{"data":{"date":"May 21, 2020","title":"Go-HelloWorld","tags":["go"],"fromNow":"2 years ago"},"content":{"compiledSource":"var c=Object.defineProperty,s=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,t=Object.prototype.propertyIsEnumerable;var i=(e,o,l)=>o in e?c(e,o,{enumerable:!0,configurable:!0,writable:!0,value:l}):e[o]=l,a=(e,o)=>{for(var l in o||(o={}))p.call(o,l)&&i(e,l,o[l]);if(r)for(var l of r(o))t.call(o,l)&&i(e,l,o[l]);return e},g=(e,o)=>s(e,u(o));var m=(e,o)=>{var l={};for(var n in e)p.call(e,n)&&o.indexOf(n)<0&&(l[n]=e[n]);if(e!=null&&r)for(var n of r(e))o.indexOf(n)<0&&t.call(e,n)&&(l[n]=e[n]);return l};const makeShortcode=e=>function(l){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",a({},l))},Gist=makeShortcode(\"Gist\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(l){var n=l,{components:e}=n,o=m(n,[\"components\"]);return mdx(MDXLayout,g(a(a({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u642D\\u5EFA\\u5F00\\u53D1\\u73AF\\u5883\"),mdx(\"p\",null,\"\\u8BA9\\u6211\\u4EEC\\u521B\\u5EFA\\u4E00\\u4E2A\\u76EE\\u5F55\\uFF0C\\u5728\\u8BE5\\u76EE\\u5F55\\u4E2D\\u7F16\\u5199\\u6211\\u4EEC\\u7684 hello world \\u7A0B\\u5E8F\\u3002\\u6253\\u5F00\\u7EC8\\u7AEF\\u5E76\\u8FD0\\u884C\\u4EE5\\u4E0B\\u547D\\u4EE4\\u3002\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-shell\"}),`mkdir ~/Documents/learngo/\n`)),mdx(\"p\",null,\"\\u4E0A\\u9762\\u7684\\u547D\\u4EE4\\u5C06 learngo \\u5728\\u5F53\\u524D\\u7528\\u6237\\u7684 Documents \\u76EE\\u5F55\\u4E2D\\u521B\\u5EFA\\u4E00\\u4E2A\\u540D\\u4E3A\\u76EE\\u5F55\\u3002\"),mdx(\"h3\",null,\"\\u4F60\\u597D\\uFF0C\\u4E16\\u754C\"),mdx(\"p\",null,\"\\u4F7F\\u7528\\u60A8\\u559C\\u6B22\\u7684\\u6587\\u672C\\u7F16\\u8F91\\u5668 main.go \\u5728 learngo \\u76EE\\u5F55\\u4E2D\\u521B\\u5EFA\\u4E00\\u4E2A\\u540D\\u4E3A\\u4EE5\\u4E0B\\u5185\\u5BB9\\u7684\\u6587\\u4EF6\\u3002\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-go\"}),`package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello World\")\n}\n`)),mdx(\"p\",null,\"\\u6309\\u7167 Go \\u4E2D\\u7684\\u7EA6\\u5B9A\\uFF0C\\u5C06\\u5305\\u542B main \\u51FD\\u6570\\u7684\\u6587\\u4EF6\\u547D\\u540D\\u4E3A main.go\\u3002\"),mdx(\"h3\",null,\"\\u8FD0\\u884C\\u7A0B\\u5E8F\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"go install\")),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-shell\"}),`cd ~/Documents/learngo/\ngo install\n#\\u6B64\\u547D\\u4EE4\\u5C06\\u7F16\\u8BD1\\u7A0B\\u5E8F\\u5E76\\u5C06\\u7F16\\u8BD1\\u597D\\u7684\\u4E8C\\u8FDB\\u5236\\u6587\\u4EF6\\u590D\\u5236\\u5230~/go/bin\\u5185\nls -al ~/go/bin/\n\n~/go/bin/learngo\n#\\u8F93\\u51FAhello world\n`)),mdx(\"ol\",a({},{start:2}),mdx(\"li\",{parentName:\"ol\"},\"go build\")),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-shell\"}),`cd ~/Documents/learngo/\ngo build\n#\\u4E0A\\u9762\\u7684\\u547D\\u4EE4\\u5C06learngo\\u5728\\u5F53\\u524D\\u76EE\\u5F55\\u4E2D\\u521B\\u5EFA\\u4E00\\u4E2A\\u4E8C\\u8FDB\\u5236\\u6587\\u4EF6\\u3002ls -al\\u5C06\\u663E\\u793Alearngo\\u5DF2\\u521B\\u5EFA\\u4E00\\u4E2A\\u540D\\u4E3A\\u7684\\u6587\\u4EF6\\u3002\n./learngo\n#\\u8F93\\u51FAHello World\n`)),mdx(\"ol\",a({},{start:3}),mdx(\"li\",{parentName:\"ol\"},\"go run\")),mdx(\"p\",null,\"cd ~/Documents/learngo/\\u5728\\u7EC8\\u7AEF\\u4E2D\\u952E\\u5165\\u547D\\u4EE4\\u4EE5\\u5C06\\u5F53\\u524D\\u76EE\\u5F55\\u66F4\\u6539\\u4E3A learngo\\u3002\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-shell\"}),`go run main.go\nHello World\n#go run\\u548Cgo build/go install\\u547D\\u4EE4\\u4E4B\\u95F4\\u7684\\u7EC6\\u5FAE\\u5DEE\\u522B\\u662F\\uFF0Cgo run\\u9700\\u8981.go\\u6587\\u4EF6\\u540D\\u4F5C\\u4E3A\\u53C2\\u6570\\u3002\n`)),mdx(\"p\",null,\"go run \\u5DE5\\u4F5C\\u539F\\u7406\\u975E\\u5E38\\u76F8\\u4F3C go build\\u3002\\u65E0\\u9700\\u5C06\\u7A0B\\u5E8F\\u7F16\\u8BD1\\u5E76\\u5B89\\u88C5\\u5230\\u5F53\\u524D\\u76EE\\u5F55\\uFF0C\\u800C\\u662F\\u5C06\\u6587\\u4EF6\\u7F16\\u8BD1\\u5230\\u4E00\\u4E2A\\u4E34\\u65F6\\u4F4D\\u7F6E\\u5E76\\u4ECE\\u8BE5\\u4F4D\\u7F6E\\u8FD0\\u884C\\u6587\\u4EF6\\u3002\\u5982\\u679C\\u60A8\\u60F3\\u77E5\\u9053 go run \\u5C06\\u6587\\u4EF6\\u7F16\\u8BD1\\u5230\\u7684\\u4F4D\\u7F6E\\uFF0C\\u8BF7 go run \\u4F7F\\u7528--work \\u53C2\\u6570\\u8FD0\\u884C\\u3002\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-shell\"}),`go run --work main.go\n`)),mdx(\"ol\",a({},{start:4}),mdx(\"li\",{parentName:\"ol\"},\"go playground\")),mdx(Gist,{gistLink:\"Manonicu/ef552d29300ffb0cd311d9cc8828bc6e\",mdxType:\"Gist\"}),mdx(\"p\",null,\"\\u6211\\u4EEC\\u5C06\\u7B80\\u8981\\u8BA8\\u8BBA\\u8BE5\\u7A0B\\u5E8F\\u7684\\u6BCF\\u4E00\\u884C\\u7684\\u4F5C\\u7528\\u3002\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"package main - \\u6BCF\\u4E2A go \\u6587\\u4EF6\\u5FC5\\u987B\\u4EE5 package name \\u5F00\\u59CB\\u3002\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},'import \"fmt\" - import \\u8BED\\u53E5\\u7528\\u4E8E\\u5BFC\\u5165\\u5176\\u4ED6\\u8F6F\\u4EF6'),mdx(\"p\",{parentName:\"li\"},\"\\u5305\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"func main\\uFF08\\uFF09- func \\u5173\\u952E\\u5B57\\u6807\\u8BB0\\u51FD\\u6570\\u7684\\u5F00\\u59CB\\u3002\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},'fmt.Println\\uFF08\"H\\u200B\\u200Bello World\"\\uFF09'))))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"May 21, 2020","title":"Go-HelloWorld","tags":["go"],"fromNow":"2 years ago"}},"randomPost":[{"data":{"date":"May 19, 2020","title":"强制类型转换","tags":["javascript"],"fromNow":"2 years ago"},"content":"","slug":"javascript/advance/强制类型转换"},{"data":{"date":"November 24, 2021","title":"Strings","tags":["python"],"description":"","fromNow":"21 days ago"},"content":"\n## 字符串文本\n\n> 字符串文本通常是由单引号或者双引号括起来的。通常单行单引号，多行三引号。\n\n```python\n# Single quote\na = 'Yeah but no but yeah but...'\n\n# Double quote\nb = \"computer says no\"\n\n# Triple quotes\nc = '''\nLook into my eyes, look into my eyes, the eyes, the eyes, the eyes,\nnot around the eyes,\ndon't look around the eyes,\nlook into my eyes, you're under.\n'''\n```\n\n## 字符串转义\n\n```python\n'\\n'      # 换行\n'\\r'      # 回车\n'\\t'      # 水平制表符\n'\\''      # 单引号\n'\\\"'      # 双引号\n'\\\\'      # 反斜杠\n```\n\n## 字符串运算\n\n```python\n+  # 字符串连接\n*  # 重复\n[] # 取子串\n[:] # 截取字符串的一部分\nin # 判断字符串是否包含某个字符串\nnot in # 判断字符串是否不包含某个字符串\nr/re # 匹配字符串\n% # 格式化字符串\n\n\na = \"Hello\"\nb = \"Python\"\n\nprint \"a + b 输出结果：\", a + b\nprint \"a * 2 输出结果：\", a * 2\nprint \"a[1] 输出结果：\", a[1]\nprint \"a[1:4] 输出结果：\", a[1:4]\n\nif( \"H\" in a) :\n    print \"H 在变量 a 中\"\nelse :\n    print \"H 不在变量 a 中\"\n\nif( \"M\" not in a) :\n    print \"M 不在变量 a 中\"\nelse :\n    print \"M 在变量 a 中\"\n\nprint r'\\n'\nprint R'\\n'\n```\n\n## 字符串方法\n\n```python\ns = ' Hello'\nt = s.strip() #'Hello'去除空格\nl = s.lower() #' hello' 全部转换为小写\nu = s.upper() #' HELLO' 全部转换为大写\nc = s.capitalize() #'Hello' 字符串首字母大写\nt = s.replace('H', 'J') #'Jello' 将所有的H替换为J\n\ns.endswith(suffix)     # 判断字符串是否以指定后缀结尾\ns.find(t)              # 查找字符串中指定字符或字符串的索引位置\ns.index(t)             # 查找字符串中指定字符或字符串的索引位置\ns.isalpha()            # 判断字符串是否只有字母\ns.isdigit()            # 判断字符串是否只有数字\ns.islower()            # 判断字符串是否只有小写\ns.isupper()            # 判断字符串是否只有大写\ns.join(slist)          # 将字符串s与字符串列表slist中的字符串连接\ns.lower()              # 转换字符串中所有大写字符为小写\ns.replace(old,new)     # 替换字符串中的指定字符串\ns.rfind(t)             # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.rindex(t)            # 从右边开始查找字符串中指定字符或字符串的索引位置\ns.split([delim])       # 将字符串分割成一个列表\ns.startswith(prefix)   # 判断字符串是否以指定前缀开头\ns.strip()              # 去掉字符串左右两边的空格\ns.upper()              # 转换字符串中的小写字母为大写\n```\n\n## 字符串类型转换\n\n> 使用`str()`将任何值转换成字符串\n\n```python\nx=42\nstr(x) #'42'\n```\n\n## 其他字符类型\n\n```python\n# 字节类型\ndata = b'Hello World\\r\\n'\nlen(data)                         # 13\ndata[0:5]                         # b'Hello'\ndata.replace(b'Hello', b'Cruel')  # b'Cruel World\\r\\n'\n\n# Raw字节类型\n>>> rs = r'c:\\newdata\\test' # Raw (uninterpreted backslash)\n>>> rs\n'c:\\\\newdata\\\\test'\n\n# f-string\n>>> name = 'IBM'\n>>> shares = 100\n>>> price = 91.1\n>>> a = f'{name:>10s} {shares:10d} {price:10.2f}'\n>>> a\n'       IBM        100      91.10'\n>>> b = f'Cost = ${shares*price:0.2f}'\n>>> b\n'Cost = $9110.00'\n>>>\n```\n","slug":"python/1.3-strings"},{"data":{"date":"October 12, 2020","title":"Linux命令gunzip","tags":["linux"],"description":"“gunzip”命令的快速指南，用于解压缩gzip文件。","fromNow":"a year ago"},"content":"\n“gunzip”命令的快速指南，用于解压缩 gzip 文件。\n\n**gunzip**命令基本上等同于**gzip**命令，但默认情况-d 选项始终处于启用状态。\n\n## 使用方法\n\n```shell\ngunzip filename.gz\n```\n\n这将**gunzip**并删除**.gz**扩展名，将结果放入文件名文件中。如果该文件存在，它将覆盖该文件。\n\n可以使用-c 选项使用输出重定向将其提取到其他文件名：\n\n```shell\ngunzip -c filename.gz > anotherfilename\n```\n\ngunzip 命令可以在 Linux、macOS、WSL 和任何有 UNIX 环境的地方使用\n\n## 参数\n\n- -a 或--ascii 　使用 ASCII 文字模式。\n- -c 或--stdout 或--to-stdout 　把解压后的文件输出到标准输出设备。\n- -f 或-force 　强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接。\n- -h 或--help 　在线帮助。\n- -l 或--list 　列出压缩文件的相关信息。\n- -L 或--license 　显示版本与版权信息。\n- -n 或--no-name 　解压缩时，若压缩文件内含有远来的文件名称及时间戳记，则将其忽略不予处理。\n- -N 或--name 　解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上。\n- -q 或--quiet 　不显示警告信息。\n- -r 或--recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。\n- -S<压缩字尾字符串>或--suffix<压缩字尾字符串> 　更改压缩字尾字符串。\n- -t 或--test 　测试压缩文件是否正确无误。\n- -v 或--verbose 　显示指令执行过程。\n- -V 或--version 显示版本信息。\n","slug":"linux/Linux命令-gunzip"},{"data":{"date":"May 19, 2020","title":"MacbookPro-前端开发环境配置","tags":["i18n"],"fromNow":"2 years ago"},"content":"\n![](https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20200427135628.png)\n\n这是一份为 Web 开发准备的 Mac 配置指南，包括推荐工具，快捷方式，技巧等\n\n- macOS Settings\n  - System preferences\n  - Finder\n  - Screenshot\n- macOS Shortcuts\n- Command-line Tools\n  - Homebrew\n  - iTerm2\n  - Git\n  - Zsh\n  - Oh My Zsh\n  - Node.js\n  - Docker\n  - tldr\n  - htop\n  - fzf\n  - ripgrep\n  - path-extractor\n  - lnav\n- MacOS Applications\n  - Visual Studio Code\n  - Rectangle\n  - GIMP\n  - LICEcap\n  - Alfred\n  - Numi\n- Tips and Tricks\n","slug":"translate/MacbookPro-前端开发环境配置"},{"data":{"date":"December 6, 2021","title":"Collections of python","tags":["python"],"description":"集合包括列表、字典、集合。","fromNow":"9 days ago"},"content":"\n## 总览\n\n程序员经常会用到的集合，列表、字典、集合。比如：\n\n- 股票池\n- 股票价格\n\n有多种选择来处理这一系列数据：\n\n- 列表。表示一组有序的数据\n- 字典。表示一组键值对的数据\n- 集合。表示一组无序的数据\n\n## 列表\n\n当数据的顺序很重要时，使用列表。记住列表可以容纳任何类型的对象。例如，元组列表。\n\n```python\nportfolio = [\n    ('GOOG', 100, 490.1),\n    ('IBM', 50, 91.3),\n    ('CAT', 150, 83.44)\n]\n\nportfolio[0]            # ('GOOG', 100, 490.1)\nportfolio[2]            # ('CAT', 150, 83.44)\n\n# 列表构造\nrecords=[] #初始化一个空列表\n\nrecords.append(('foo', 1, 2)) #添加元素\nrecords.append(('bar', 'hello')) #添加元素\n\n#从文件读取数据并写入列表\nwith open('data.csv', 'w') as f:\n    next(f) #跳过第一行\n    for line in f:\n        row = line.strip().split(',')\n        records.append((row[0], row[1], row[2]))\n```\n\n## 字典\n\n如果你想要快速随机查找(按键名) ，字典是很有用的。例如，股票价格字典:\n\n```python\nprices = {\n   'GOOG': 513.25,\n   'CAT': 87.22,\n   'IBM': 93.37,\n   'MSFT': 44.12\n}\n\nprices['IBM']           # 93.37\nprices['MSFT']          # 44.12\n\n# 字典构造\nprices = {} #初始化一个空字典\n\nprices['GOOG'] = 513.25 #添加元素\nprices['CAT'] = 87.22 #添加元素\n\n#从文件读取数据并写入字典\nwith open('data.csv', 'w') as f:\n    next(f) #跳过第一行\n    for line in f:\n        row = line.strip().split(',')\n        prices[row[0]] = row[1]\n\n# 字典查找\nif 'GOOG' in prices:\n    print('GOOG is in prices')\n\nname = prices.get('GOOG', 'N/A') #N/A表示默认值\n\nprices.get('GOOG', 0) # 513.25\nprices.get('SCOX', 0) # 0\n\n# 复合键 - 任何类型的数据都可以作为字典的键。例如，元组:\n\nholidays = {\n    (1, 1): 'New Year\\'s Day',\n    (7, 4): 'Independence Day',\n    (12, 25): 'Christmas'\n}\nholidays[(1, 1)] # 'New Year\\'s Day'\n```\n\n## 集合\n\n集合是一种特殊的字典，表示一组无序的数据，数据不重复。\n\n```python\ntech_stocks = {'GOOG', 'IBM', 'CAT'}\ntech_stocks = set(['GOOG', 'IBM', 'CAT'])\n\nnames = ['IBM', 'AAPL', 'GOOG', 'IBM', 'GOOG', 'YHOO']\n\nunique = set(names)\n# unique = set(['IBM', 'AAPL','GOOG','YHOO'])\n\nunique.add('CAT')        # Add an item\nunique.remove('YHOO')    # Remove an item\n\ns1 = { 'a', 'b', 'c'}\ns2 = { 'c', 'd' }\ns1 | s2                 # Set union { 'a', 'b', 'c', 'd' }\ns1 & s2                 # Set intersection { 'c' }\ns1 - s2                 # Set difference { 'a', 'b' }\n\n```\n","slug":"python/2.2-containers"},{"data":{"date":"May 19, 2020","title":"类型判断","tags":["javascript"],"fromNow":"2 years ago"},"content":"\n## typeof\n\n> 用于判断操作数的数据类型，适用于除 null、object 的其他 5 种类型的判断。\n\n1. 对于基本类型，除 null 以外，均可以返回正确的结果。\n2. 对于引用类型，除 function 以外，一律返回 object 类型。\n3. 对于 null ，返回 object 类型。\n4. 对于 function 返回 function 类型。\n\n```javascript\ntypeof undefined; // \"undefined\";\ntypeof 1; // \"number\";\ntypeof '1'; // \"string\";\ntypeof true; // \"boolean\";\ntypeof Symbol(); // \"symbol\";\ntypeof { a: 1 }; // \"object\";\n\ntypeof null === 'object'; // true\ntypeof function () {} === 'function'; // true\n```\n\n## instanceof\n\n> 用于判断是对象的那个子类型\n\n```javascript\n[1, 2] instanceof Array; // true\n(function foo() {} instanceof Function); // true\nnew Date(2018) instanceof Date; // true\nnew Number(1) instanceof Number; // true\n1 instanceof Number; // false\n```\n\na instanceof b，instanceof 会去查找 a 的原型链(这里不展开讨论)上是否有 b 的 prototype 属性；如果有，就返回 true，否则返回 false。即判断 a 的原型链上是否有 a.\\_proto\\_\\_ === b.prototype 返回 true\n\n## constructor\n\n> 不仅可以用于对象子类型的判断，还可以用于基本类型的判断，返回创建实例对象的 Object 构造函数的引用，原始数据类型，constructor 只读，基本类型指向对应的内置对象的构造函数\n\n```javascript\n({ a: 1 }.constructor === Object); // true\n[1, 2].constructor === Array; // true\nnew Date(2018).constructor === Date; // true\n(function foo() {}.constructor === Function); // true\n'1'.constructor === String; // true\n(1).constructor === Number; // true\ntrue.constructor === Boolean; // true\n```\n\n## prototype\n\n> Object.prototype.toString.call('...')，通用方法判断对象类型。 Object.prototype 表示 Object 的原型对象，toString 返回表示该对象的字符串，call 用于指定 this\n\n```javascript\nObject.prototype.toString.call('1'); // \"[object String]\"\nObject.prototype.toString.call(1); // \"[object Number]\"\nObject.prototype.toString.call(true); // \"[object Boolean]\"\nObject.prototype.toString.call([1, 2, 3]); // \"[object Array]\"\nObject.prototype.toString.call(function foo() {}); // \"[object Function]\"\nObject.prototype.toString.call(null); //\"[object Null]\"\nObject.prototype.toString.call(undefined); //\"[object Undefined]\"\n```\n","slug":"javascript/advance/类型判断"}]},"__N_SSG":true}