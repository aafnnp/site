{"pageProps":{"data":{"date":"September 16, 2021","title":"Basic Types","tags":["go"],"fromNow":"3 months ago"},"content":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var C=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var l=(e,n,i)=>n in e?c(e,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[n]=i,a=(e,n)=>{for(var i in n||(n={}))r.call(n,i)&&l(e,i,n[i]);if(o)for(var i of o(n))p.call(n,i)&&l(e,i,n[i]);return e},s=(e,n)=>m(e,C(n));var d=(e,n)=>{var i={};for(var t in e)r.call(e,t)&&n.indexOf(t)<0&&(i[t]=e[t]);if(e!=null&&o)for(var t of o(e))n.indexOf(t)<0&&p.call(e,t)&&(i[t]=e[t]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var t=i,{components:e}=t,n=d(t,[\"components\"]);return mdx(MDXLayout,s(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u5E03\\u5C14\\u503C\"),mdx(\"p\",null,\"\\u5E03\\u5C14\\u503C\\u5305\\u62EC \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\" \\u548C \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\"\\u3002\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-go\"}),`var b bool = true\nfmt.Printf(\"b is: '%v'\\\\n\", b)\n//b = false\nfmt.Printf(\"b is: '%v'\\\\n\", b)\nvar b2 bool\nfmt.Printf(\"zero value of bool is: '%v'\\\\n\", b2)\n//b is: 'true'\n//b is: 'false'\n//zero value of bool is: 'false'\n`)),mdx(\"p\",null,\"\\u5E03\\u5C14\\u503C\\u7684\\u5927\\u5C0F\\u662F 1 \\u5B57\\u8282\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-go\"}),`b := true\nfmt.Printf(\"size of bool is: %d\\\\n\", unsafe.Sizeof(b))\n//size of bool is: 1\n`)),mdx(\"h2\",null,\"\\u6574\\u578B\"),mdx(\"p\",null,\"Go \\u8BED\\u8A00\\u652F\\u6301\\u7684\\u6574\\u6570\\u7C7B\\u578B\\u6709 \",mdx(\"inlineCode\",{parentName:\"p\"},\"int\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"uint\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"int8\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"uint8\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"int16\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"uint16\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"int32\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"uint32\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"int64\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"uint64\"),\"\\u3002\"),mdx(\"h2\",null,\"\\u6D6E\\u70B9\\u578B\"),mdx(\"p\",null,\"Go \\u8BED\\u8A00\\u652F\\u6301\\u7684\\u6D6E\\u70B9\\u6570\\u7C7B\\u578B\\u6709 \",mdx(\"inlineCode\",{parentName:\"p\"},\"float32\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"float64\"),\"\\u3002\"),mdx(\"h2\",null,\"\\u5B57\\u7B26\\u578B\"),mdx(\"p\",null,\"Go \\u8BED\\u8A00\\u652F\\u6301\\u7684\\u5B57\\u7B26\\u578B \",mdx(\"inlineCode\",{parentName:\"p\"},\"byte\"),\"\\u3001\",mdx(\"inlineCode\",{parentName:\"p\"},\"rune\"),\"\\uFF0C\",mdx(\"inlineCode\",{parentName:\"p\"},\"byte\"),\"\\u662F\\u4E00\\u4E2A\\u5B57\\u8282\\uFF0C\",mdx(\"inlineCode\",{parentName:\"p\"},\"rune\"),\"\\u662F\\u4E00\\u4E2A\\u4EE3\\u8868\\u4E00\\u4E2A\\u5B57\\u7B26\\u7684\\u6574\\u6570\\u3002\"),mdx(\"h2\",null,\"\\u5B57\\u7B26\\u4E32\"),mdx(\"p\",null,\"Go \\u4E2D\\u7684 String \\u662F\\u4E00\\u4E2A\\u4E0D\\u53D8\\u7684\\u5B57\\u8282\\u5E8F\\u5217(8 \\u4F4D\\u5B57\\u8282\\u503C) \\uFF0C\\u8FD9\\u4E0E Python\\u3001 c # \\u3001 Java \\u6216 Swift \\u7B49\\u8BED\\u8A00\\u4E2D\\u7684 Unicode \\u5B57\\u7B26\\u4E32\\u4E0D\\u540C\\u3002\\u5B57\\u7B26\\u4E32\\u7C7B\\u578B\\u7684\\u96F6\\u503C\\u4E3A\\u7A7A\\u5B57\\u7B26\\u4E32\\u3002\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-go\"}),`var s string // empty string \"\"\n    s1 := \"string\\\\nliteral\\\\nwith\\\\tescape characters\\\\n\"\n    s2 := \\`raw string literal\nwhich doesnt't recgonize escape characters like \\\\n\n\\`\n    fmt.Printf(\"sum of strings\\\\n'%s'\\\\n\", s+s1+s2)\nsum of strings\n'string\nliteral\nwith    escape characters\nraw string literal\nwhich doesnt\\u2018t recgonize escape characters like'\n`)),mdx(\"h2\",null,\"\\u5E38\\u91CF\"),mdx(\"p\",null,\"Go \\u652F\\u6301\\u5B57\\u7B26\\u3001\\u5B57\\u7B26\\u4E32\\u3001\\u5E03\\u5C14\\u503C\\u548C\\u6570\\u503C\\u7684\\u5E38\\u91CF\\u3002\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-go\"}),`const (\n    i  int = 32       // int constant\n    s      = \"string\" // string constant\n    i2     = 33       // untyped number constant\n)\n\nvar (\n    // values that are not read-only (like slices or maps or structs) cannot be\n    // constants\n    // we can declare them as top-level variables\n    b = []byte{3, 4} // this could not be a constant\n)\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"September 16, 2021","title":"Basic Types","tags":["go"],"fromNow":"3 months ago"}},"randomPost":[{"data":{"date":"May 21, 2020","title":"第1部分：介绍和安装","tags":["go"],"fromNow":"2 years ago"},"content":"\n## Go 介绍\n\nGo 也称为 Golang，是 Google 开发的一种开源，编译和静态类型的编程语言。Go 创作背后的关键人物是 Rob Pike， Ken Thompson 和 Robert Griesemer。Go 于 2009 年 11 月公开发布。\n\nGo 是一种通用的编程语言，具有简单的语法，并具有强大的标准库作为后盾。Go 大放异彩的关键领域之一是创建高可用性和可伸缩性的 Web 应用程序。Go 还可以用于创建命令行应用程序，桌面应用程序甚至移动应用程序。\n\n## Go 优点\n\n当大量其他语言（例如 python，ruby，nodejs ...）执行相同的工作时，为什么选择 Go 作为服务器端编程语言。\n\n这是我选择 Go 时发现的一些优点。\n\n### 简单语法\n\n语法简单明了，并且该语言不会因不必要的功能而肿。这使得编写可读性和可维护性的代码变得容易。\n\n### 易于编写并发程序\n\n并发是语言的固有部分。结果，编写多线程程序简直是小菜一碟。这是通过 Goroutines 和渠道实现的，我们将在接下来的教程中对其进行讨论。\n\n### 编译语言\n\nGo 是一种编译语言。源代码被编译为本地二进制文件。解释语言（例如，nodejs 中使用的 JavaScript）缺少此功能。\n\n### 快速编译\n\nGo 编译器非常神奇，并且从一开始就被设计为快速的。\n\n### 静态链接\n\nGo 编译器支持静态链接。整个 Go 项目可以静态链接到一个大的二进制文件中，并且可以轻松部署在云服务器中，而不必担心依赖关系。\n\n### Go 工具\n\n工具在 Go 中值得特别提及。Go 附带了功能强大的工具，可帮助开发人员编写更好的代码。很少有常用的工具是\n\n- gofmt- gofmt 用于自动格式化 go 源代码。它使用制表符进行缩进，并使用空格进行对齐。\n- vet- vet 分析 go 源代码并报告可能的可疑代码。vet 报告的所有内容都不是真正的问题，但是具有捕获编译器未报告的错误的能力，例如使用 Printf 时格式不正确的说明符。\n- golint- golint 用于识别代码中的样式问题。\n\n### 垃圾收集\n\nGo 使用垃圾回收，因此内存管理几乎会自动执行，开发人员无需担心内存管理问题。这也有助于轻松地编写并发程序。\n\n### 简单语言规范\n\n语言规范非常简单。在整个规范在页面千篇一律，你甚至可以用它来写你自己的编译器:)\n\n### 开源的\n\n最后但并非最不重要的一点是，Go 是一个开源项目。您可以参与 Go 项目并为该项目做出贡献。\n\n## 使用 Go 构建的热门产品\n\n以下是一些使用 Go 构建的流行产品。\n\n- Google 使用 Go 开发了 Kubernetes。\n- Docker 是世界著名的容器化平台，是使用 Go 开发的。\n- Dropbox 已将其性能关键组件从 Python 迁移到 Go。\n- Infoblox 的下一代网络产品是使用 Go 开发的。\n\n## 安装\n\nGo 可以安装在 Mac，Windows 和 Linux 这三个平台上。您可以从https://golang.org/dl/下载对应平台的二进制文件\n\n### Mac\n\n从https://golang.org/dl/下载Mac OS 安装程序。双击开始安装。按照提示进行操作，这会将 Golang 安装在/usr/local/go 中，并且还将文件夹/usr/local/go/bin 添加到 PATH 环境变量中。\n\n```shell\n# if you don't have git install it like so:\nbrew install git\n\n# then install go\nbrew install go\n\n# add GOBIN path to your PATH in ~/.bash_profile\nexport PATH=${HOME}/go/bin:$PATH\n```\n\n### Windows\n\n从https://golang.org/dl/下载MSI安装程序。双击开始安装，然后按照提示进行操作。这会将Go安装在位置c:\\Go，还将目录c:\\Go\\ bin 添加到您的路径环境变量中。\n\n### Linux\n\n从https://golang.org/dl/下载tar文件并将其解压缩到/usr/local。\n\n将/usr/local/go/bin 添加到 PATH 环境变量中。\n\n## 验证安装\n\n要验证 Go 安装是否成功，请 go version 在终端中键入命令，它将输出已安装的 Go 版本。这是我终端的输出。\n\n```shell\n$ go version\ngo version go1.13.6 darwin/amd64\n```\n","slug":"go/简介和安装"},{"data":{"date":"April 3, 2021","title":"数组、字典、集合、枚举","tags":["swift"],"description":"取得成功的秘诀就是开始","fromNow":"8 months ago"},"content":"\nSwift 中复杂类型包括：\n\n- Array\n- Set\n- Tuple\n- Dictionary\n- Enums\n\n### Array\n\n> Swift 数组允许您存储相同类型的值，可以使用该值在数组中的位置来检索这些值。Swift 会强制检测元素类型，如果类型不同，会报错。\n\n```swift\n// 创建数组\nvar firstArray = [\"hello\",\"hello\",\"world\"]\nvar secondArray = [\"swift\",\"niubility\"]\n\n// 获取数组第一个元素\nprint(firstArray[0]) // hello\n\n//添加数组\nfirstArray.append(\"manon\")\nfirstArray+=[\"icu\"]\n\n// 循环数组\nfor item in firstArray{\n\tprint(item) //hell hello world manon icu\n}\n\n// 修改数组元素\nfirstArray[0] = \"swift\"\n\n// 合并数组\nfirstArray+secondArray\n\n// 计算数组元素的个数\nfirstArray.count\n\n// 判断数组是否为空\nfirstArray.isEmpty\n\n// 删除数组元素\nfirstArray.remove(at: 0)\n```\n\n### Set\n\n> 集合是用来存储类型相同且没有确定顺序的唯一的值，不允许插入已存在的值\n\n```swift\n// 创建集合\nlet firstSet = Set([\"hello\",\"world\",\"manon\",\"icu\",\"swift\"])\nlet secondSet = Set([\"just\",\"do\",\"it\"])\n\n// 访问集合\nfor item in firstSet{\n\tprint(item) //\"hello\",\"world\",\"manon\",\"icu\",\"swift\"\n}\n\n// 判断是否为空\nfirstSet.isEmpty // false\n\n// 计算集合的长度\nfirstSet.count //5\n\n// 判断是否包含某个元素\nfirstSet.contains(\"manon\") //true\n\n// 向集合添加元素\nfirstSet.insert(\"funny\")\n\n// 删除集合的元素\nfirstSet.remove(\"manon\")\n\n// 合并集合\nfirstSet.union(secondSet)\n```\n\n### Tuple\n\n> Swift 中的 tuple 允许存储不同类型的固定数量的值。创建元组后，不能从该元组中添加或删除值。\n\n```swift\n// 创建tuple\nlet firstTuple = (name: \"manon\", level: 9000, Nationality: \"china\")\n\n// 访问tuple\nfirstTuple.name // manon\n```\n\n### Dictionary\n\n> Swift 字典用来存储无序的相同类型数据的集合，Swift 字典会强制检测元素的类型，如果类型不同则会报错。 Swift 字典每个值（value）都关联唯一的键（key），键作为字典中的这个值数据的标识符。和数组中的数据项不同，字典中的数据项并没有具体顺序。我们在需要通过标识符（键）访问数据的时候使用字典，这种方法很大程度上和我们在现实世界中使用字典查字义的方法一样。 Swift 字典的 key 没有类型限制可以是整型或字符串，但必须是唯一的。\n\n```swift\n// 创建字典\nlet firstDictionary = [\"Gintama\" : \"Sakata Gintoki\", \"Haikyuu\" : \"Shoyo Hinata\"]\n\n// 访问字典\nfirstDictionary[\"Gintama\"] // Sakata Gintoki\n\n// 修改字典\nfirstDictionary.updateValue(\"manon\",forKey:Gintama)\n// 或\nfirstDictionary[\"Gintama\"] = \"manon\"\n\n// 删除字典元素\nfirstDictionary.removeValue(\"Gintama\")\n\n// 遍历字典\nfor (key,value) in firstDictionary{\n\tprint(\"字典 key \\(key) -  字典 value \\(value)\")\n}\n\n// 计算字典长度\nfirstDictionary.count\n\n// 判断字典是否为空\nfirstDictionary.isEmpty\n```\n\n### Enums\n\n> 根据 Swift 文档枚举的定义，它是“一组相关值的公共类型，使您能够在代码中以类型安全的方式处理这些值”。可以把它看作是一种特别用于 switch/conditions 的变量类型。\n\n```swift\n// 创建Enums\nenum enumname {\n   // 枚举定义放在这里\n}\n\n// 实例\n\nimport Cocoa\n\nenum DaysofaWeek {\n    case Sunday\n    case Monday\n    case TUESDAY\n    case WEDNESDAY\n    case THURSDAY\n    case FRIDAY\n    case Saturday\n}\n\nvar weekDay = DaysofaWeek.THURSDAY\nweekDay = .THURSDAY\nswitch weekDay{\n\tcase .Sunday:\n\t\tprint(\"星期天\")\n\tcase .Monday:\n\t\tprint(\"星期一\")\n\tcase .TUESDAY:\n\t\tprint(\"星期二\")\n\tcase .WEDNESDAY:\n\t\tprint(\"星期三\")\n\tcase .THURSDAY:\n\t\tprint(\"星期四\")\n\tcase .FRIDAY:\n\t\tprint(\"星期五\")\n\tcase .Saturday:\n\t\tprint(\"星期六\")\n}\n```\n","slug":"swift/100days/day02"},{"data":{"date":"May 13, 2018","title":"Number","tags":["javascript"],"fromNow":"4 years ago"},"content":"\n## Number\n\n```javascript\nconst age = 36;\ntypeof age; //number\n\nconst age = Number(36);\ntypeof age; //number\n\n//使用new声明的Number返回object类型，可使用valueOf获取原始值\nconst age = new Number(36);\ntypeof age; //object\n```\n\n### 属性\n\n1. EPSILON - 两个数字之间的最小间隔\n2. MAX_SAFE_INTEGER - 可表示的最大整数值\n3. MAX_VALUE - 可表示的最大正值\n4. MIN_SAFE_INTEGER - 可表示的最小整数值\n5. MIN_VALUE - 可表示的最小正值\n6. NAN - not a number\n7. NEGATIVE_INFINITY - 正向无穷大\n8. POSITIVE_INFINITY - 负向无穷大\n\n```javascript\nNumber.EPSILON; //2.220446049250313e-16\nNumber.MAX_SAFE_INTEGER; //9007199254740991\nNumber.MAX_VALUE; //1.7976931348623157e+308\nNumber.MIN_SAFE_INTEGER; //-9007199254740991\nNumber.MIN_VALUE; //5e-324\nNumber.NAN; //NaN\nNumber.NEGATIVE_INFINITY; //-Infinity\nNumber.POSITIVE_INFINITY; //Infinity\n```\n\n### 方法\n\n- Number.isNaN(value) //当 value 为非 number 时返回 true\n- Number.isFinite(value) //当 value 是有穷值返回 true\n- Number.isInteger(value) //当 value 是整型值返回 true\n- Number.isSafeInteger(value) //当 value 是安全整型值返回 true\n- Number.parseFloat(value) //将值转换成浮点类型并返回\n- Number.parseInt(value) //将值转换成整形并返回\n\n### 实例方法\n\n当使用 new 关键词声明一个数值，将会返回 object，并且提供如下方法。\n\n```javascript\nconst age = new Number(36);\ntypeof age; //object\n```\n\n- .toExponential() //将值转换成指数计数法\n- .toFixed() //返回小数点后 N 位\n- .toLocaleString() //将值转换成字符类型\n- .toPrecision() //返回指定的精度\n- .toString() //将值转换成字符类型\n- .valueOf() //返回原始值\n\n### 扩展学习\n","slug":"javascript/base/Number"},{"data":{"date":"July 30, 2017","title":"css的小技巧","tags":["css"],"fromNow":"4 years ago"},"content":"\n1. 使用 CSS 复位\n\n不同浏览器有不同的自带初始样式，通常可以使用 normalize.css、tinyreset.css 进行通配初始化。\n\n```css\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n```\n\n2. 继承 box-sizing\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n```\n\n3. 使用 unset 而不是重置所有属性\n4. 使用 :not() 选择器来决定表单是否显示边框\n5. 为 body 元素添加行高\n6. 為表單元素設置:focus\n7. 垂直居中任何元素\n8. 逗号分隔的列表\n9. 使用负的 nth-child 来选择元素\n10. 使用 SVG 图标\n11. 使用 “形似猫头鹰” 的选择器\n12. 使用 max-height 来建立纯 CSS 的滑块\n13. 创造格子等宽的表格\n14. 利用 Flexbox 去除多余的外边距\n15. 利用属性选择器来选择空链接\n16. 给 “默认” 链接定义样式\n17. 一致的垂直节奏\n18. 内在比例盒\n19. 为破碎图象定义样式\n20. 用 rem 来调整全局大小；用 em 来调整局部大小\n21. 隐藏没有静音、自动播放的影片\n22. 使用选择器 :root 来控制字体弹性\n23. 为更好的移动体验，为表单元素设置字体大小\n24. 使用指针事件來控制鼠标事件\n","slug":"css/小技巧-ChicksTricks"},{"data":{"date":"December 21, 2020","title":"Macos Docker安装","tags":["docker"],"fromNow":"a year ago"},"content":"\n## brew 安装 docker\n\n```shell\n#搜索\n==> Formulae\ndocker                          docker-credential-helper        docker-machine-completion       docker-machine-nfs              docker2aci\ndocker-clean                    docker-credential-helper-ecr    docker-machine-driver-hyperkit  docker-machine-parallels        dockerize\ndocker-completion               docker-gen                      docker-machine-driver-vmware    docker-slim                     lazydocker\ndocker-compose                  docker-ls                       docker-machine-driver-vultr     docker-squash\ndocker-compose-completion       docker-machine                  docker-machine-driver-xhyve     docker-swarm\n==> Casks\ndocker\n\n#安装\nbrew install docker\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/bottles/docker-19.03.14.big_sur.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring docker-19.03.14.big_sur.bottle.tar.gz\n==> Caveats\nzsh completions have been installed to:\n  /usr/local/share/zsh/site-functions\n==> Summary\n🍺  /usr/local/Cellar/docker/19.03.14: 14 files, 71.6MB\n```\n\n## 手动安装\n\n下载[Stable](https://download.docker.com/mac/stable/Docker.dmg)，双击安装\n\n![PVr5uh](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/PVr5uh.jpg)\n\n安装完成后，通过命令检查 Docker 版本\n\n```shell\ndocker --version\n\nDocker version 19.03.14, build 5eb3275\n```\n\n## 镜像加速\n\n![NAWFnd](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/NAWFnd.png)\n\n## 更多\n","slug":"docker/Macos安装Docker"},{"data":{"date":"May 9, 2018","title":"String","tags":["javascript"],"fromNow":"4 years ago"},"content":"\n## String\n\n### 方法\n\n- String.fromCharCode() //通过一串 Unicode 创建字符串。\n- String.fromCodePoint() //通过一串 码点 创建字符串。\n- String.raw() //通过模板字符串创建字符串。\n\n### 实例方法\n\n- charAt(i)\n- charCodeAt(i)\n- codePointAt(i)\n- concat(str)\n- endsWith(str)\n- includes(str)\n- indexOf(str)\n- lastIndexOf(str)\n- localeCompare()\n- match(regex)\n- normalize()\n- padEnd()\n- padStart()\n- repeat()\n- replace(str1, str2)\n- search(str)\n- slice(begin, end)\n- split(separator)\n- startsWith(str)\n- substring()\n- toLocaleLowerCase()\n- toLocaleUpperCase()\n- toLowerCase()\n- toString()\n- toUpperCase()\n- trim()\n- trimEnd()\n- trimStart()\n- valueOf()\n\n### charAt\n\n> 返回指定位置的字符,且返回的字符长度为 1，**_js 没有一种有别于字符串类型的字符数据类型_**\n\n```javascript\nstring.charAt(index);\n\n'porhub'.charAt(0); //'p'\n'porhub'.charAt(1); //'o'\n'porhub'.charAt(2); //'r'\n```\n\n### charCodeAt\n\n> 返回在指定的位置的字符的 Unicode 编码\n\n**字符串中第一个字符的下标是 0。如果 index 是负数，或大于等于字符串的长度，则 charCodeAt() 返回 NaN。**\n\n```javascript\nstring.charCodeAt(index);\n\n'porhub'.charCodeAt(0); //112\n'porhub'.charCodeAt(1); //111\n'porhub'.charCodeAt(2); //114\n```\n\n### codePointAt\n\n> ES2015 引入的，用于处理 2 UTF-16 字符的，比如中文，在 ES2015 之前 charCodeAt 只能处理单个字符，处理双字符必须一个个处理然后拼接。\n\n```javascript\nstring.codePointAt(index);\n\n//ES2015之前\n'𠮷'.charCodeAt(0).toString(16); //d842\n'𠮷'.charCodeAt(1).toString(16); //dfb7\n('\\ud842\\udfb7'); //𠮷\n\n//ES2015\n'𠮷'.codePointAt(0); //20bb7\n('\\u{20bb7}'); //𠮷\n```\n\n### concat\n\n> 类似 Array 的 concat\n\n```javascript\nstringObject.concat(stringX,stringX,...,stringX)\n\n\"browser\".concat(\"porhub\");\n```\n\n通常使用 + 拼接来得更方便，或者使用 ES2015 的``字符扩展。\n\n### endWith\n\n> 用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false。\n\n```javascript\nstr.endsWith(searchString, position);\n\n'JavaScript'.endsWith('Script'); //true\n'JavaScript'.endsWith('script'); //false\n'JavaScript'.endsWith('Script', 5); //false\n'JavaScript'.endsWith('as', 5); //true\n```\n\n### includes\n\n> 用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false\n\n```javascript\nstr.includes(searchString, position);\n\n'JavaScript'.includes('Script'); //true\n'JavaScript'.includes('script'); //false\n'JavaScript'.includes('nice'); //true\n'JavaScript'.includes('nice', 3); //false\n```\n\n### indexOf\n\n> 用于返回字符串中出现某个字符的初始位置，如果没有找到，返回-1.\n\n```javascript\nstr.indexOf(searchString, startPosition);\n\n'JavaScript'.indexOf('a'); //1\n'JavaScript'.indexOf('a', 2); //3\n```\n\n### lastIndexOf\n\n> 用于返回某个字符最后出现的位置，如果没有，返回-1\n\n```javascript\nstr.lastIndexOf(searchString, startPosition);\n\n'JavaScript'.lastIndexOf('a'); //3\n'JavaScript'.lastIndexOf('a', 1); //1\n```\n\n### padEnd\n\n> 用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。\n\n```javascript\nstr.padEnd(targetLength, string);\n\n'abc'.padEnd(10); // \"abc       \"\n'abc'.padEnd(10, 'foo'); // \"abcfoofoof\"\n'abc'.padEnd(6, '123456'); // \"abc123\"\n'abc'.padEnd(1); // \"abc\"\n```\n\n### padStart\n\n> 用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的\n\n```javascript\nstr.padStart(targetLength, string);\n\n'abc'.padStart(10); // \"       abc\"\n'abc'.padStart(10, 'foo'); // \"foofoofabc\"\n'abc'.padStart(6, '123465'); // \"123abc\"\n'abc'.padStart(8, '0'); // \"00000abc\"\n'abc'.padStart(1); // \"abc\"\n```\n\n### repeat\n\n> 构造并返回一个包含被连接在一起的指定数量的新字符串。\n\n```javascript\nstr.repeat(count);\n\n'abc'.repeat(-1); // RangeError: repeat count must be positive and less than inifinity\n'abc'.repeat(0); // \"\"\n'abc'.repeat(1); // \"abc\"\n'abc'.repeat(2); // \"abcabc\"\n'abc'.repeat(3.5); // \"abcabcabc\" 参数count将会被自动转换成整数.\n'abc'.repeat(1 / 0); // RangeError: repeat count must be positive and less than inifinity\n```\n\n### slice\n\n> 截取字符串的一部分，并返回一个新的字符串\n\n```javascript\nstr.slice(startPosition, endPosition);\n\n'abc'.slice(0, 1); //a\n'abc'.slice(0, -1); //ab\n```\n\n### split\n\n> 将字符串切割成数组\n\n```javascript\nstr.split(separator, limit);\n\n'abc'.split(); //\"[a,b,c]\";\n'a,b,c'.split(',', 1); //[a]\n```\n\n### startWith\n\n> 判断字符串是否以给定的字符串开始，返回 true/false\n\n```javascript\nstr.startsWith(searchString, poistion);\n\n'abc'.startsWith('a'); //true\n'abc'.startsWith('a', 1); //false\n```\n\n### substring\n\n> 根据开始索引到结束索引截取字符串\n\n```javascript\nstr.substring(startPosition, endPosition);\n\n'abc'.substring(0, 1); //a\n'abc'.substring(-1); //abc\n```\n\n1. 如果 startPosition 等于 indexEnd，substring 返回一个空字符串。\n2. 如果省略 indexEnd，substring 提取字符一直到字符串末尾。\n3. 如果任一参数小于 0 或为 NaN，则被当作 0。\n4. 如果任一参数大于 stringName.length，则被当作 stringName.length。\n5. 如果 startPosition 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。见下面的例子。\n\n### toLocaleLowerCase/toLocaleUpperCase/toUpperCase/toLowerCase\n\n> 将字符串转换成小写/大写\n\n```javascript\nstr.toLocaleLowerCase() /\n  str.toLocaleUpperCase() /\n  str.toUpperCase() /\n  str.toLowerCase();\n\n'ABC'.toLocaleLowerCase(); //abc\n'abc'.toLocaleUpperCase(); //ABC\n```\n\n### toString\n\n> 将\\*转换成字符串\n\n```javascript\nvar x = new String('Hello world');\n\nalert(x.toString()); // 输出 \"Hello world\"\n```\n\n### trim/trimStart/trimEnd\n\n> 移除空白字符/起始位置空白字符/结尾位置空白字符\n\n```javascript\nstr.trim() / str.trimStart() / str.trimEnd();\n\n'Testing'.trim(); //'Testing'\n' Testing'.trim(); //'Testing'\n' Testing '.trim(); //'Testing'\n'Testing '.trim(); //'Testing'\n```\n\n### valueOf\n\n> 返回 str 的原始值，等同于 String.prototype.toString\n\n```javascript\nstr.valueOf();\n\nx = new String('Hello world');\nalert(x.valueOf()); // Displays \"Hello world\"\n```\n\n### 扩展学习\n\n```javascript\n1 +\n  '5'[(1, 3, 5)] + //\"15\"\n  1; //\"1,3,51\"\n10 + true; // 11\n15 + {}; // \"15[object Object]\"\n8 + null; // 8\n'queen' + null; // \"queennull\"\n12 + undefined; // NaN\n```\n\n[See examples in jsbin](http://jsbin.com/fiwemir/2/edit?js,console)\n","slug":"javascript/base/String"}]},"__N_SSG":true}