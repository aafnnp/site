{"pageProps":{"data":{"date":"February 10, 2019","title":"online&offline","tags":["javascript"],"description":"当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发","fromNow":"3 years ago"},"content":{"compiledSource":"var c=Object.defineProperty,l=Object.defineProperties;var w=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var p=(e,n,t)=>n in e?c(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))i.call(n,t)&&p(e,t,n[t]);if(a)for(var t of a(n))u.call(n,t)&&p(e,t,n[t]);return e},r=(e,n)=>l(e,w(n));var s=(e,n)=>{var t={};for(var o in e)i.call(e,o)&&n.indexOf(o)<0&&(t[o]=e[o]);if(e!=null&&a)for(var o of a(e))n.indexOf(o)<0&&u.call(e,o)&&(t[o]=e[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:e}=o,n=s(o,[\"components\"]);return mdx(MDXLayout,r(d(d({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u5F53\\u6D4F\\u89C8\\u5668\\u4ECE\\u5728\\u7EBF\\u4E0E\\u79BB\\u7EBF\\u72B6\\u6001\\u4E2D\\u5207\\u6362\\u65F6\\uFF0C\\u8FD9\\u4E24\\u4E2A\\u4E8B\\u4EF6\\u4F1A\\u5728\\u9875\\u9762\\u7684 body \\u4E0A\\u89E6\\u53D1\\uFF0C\\u5E76\\u5192\\u6CE1\\u5230 document \\u548C window\\u3002\\u53EF\\u4F7F\\u7528 window\\u3001document\\u3001document.body\\u3001\\u6DFB\\u52A0\\u76D1\\u542C\\u4E8B\\u4EF6\",mdx(\"inlineCode\",{parentName:\"p\"},\"addEventListener\"),\"\\u3002\")),mdx(\"h2\",null,\"\\u4F7F\\u7528\\u65B9\\u6CD5\"),mdx(\"pre\",null,mdx(\"code\",d({parentName:\"pre\"},{className:\"language-javascript\"}),`//\\u7F51\\u7EDC\\u72B6\\u6001\nwindow.addEventListener('load', () => {\n  const updateOnlineStatus = () => {\n    this.online = navigator.onLine;\n  };\n\n  window.addEventListener('online', updateOnlineStatus);\n  window.addEventListener('offline', updateOnlineStatus);\n});\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"February 10, 2019","title":"online&offline","tags":["javascript"],"description":"当浏览器从在线与离线状态中切换时，这两个事件会在页面的 body 上触发","fromNow":"3 years ago"}},"randomPost":[{"data":{"date":"May 8, 2018","title":"Symbol","tags":["javascript"],"fromNow":"4 years ago"},"content":"","slug":"javascript/base/Symbol"},{"data":{"date":"April 5, 2021","title":"循环","tags":["swift"],"description":"取得成功的秘诀就是开始","fromNow":"8 months ago"},"content":"\nSwift 有三种循环：\n\n- for\n- while\n- repeat\n\n## for 循环\n\n> 用来重复执行一系列语句直到达成特定条件，如下图：\n\n![sgvlgu](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/sgvlgu.png)\n\n```swift\n// 语法\nfor init; condition; increment{\n   // do something\n}\n\n// example\nlet albums = [\"Red\", \"1989\", \"Reputation\"]\nfor album in albums {\n    print(\"\\(album) is on Apple Music\")\n}\n```\n\n## while 循环\n\n> while 循环从计算单一条件开始。如果条件为 true，会重复运行一系列语句，直到条件变为 false。\n\n![WOrVgL](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/WOrVgL.png)\n\n```swift\n// 语法\nwhile condition{\n   // do something\n}\n// example\nvar number = 1\n\nwhile number <= 20 {\n    print(number)\n    number += 1\n}\n\nprint(\"Ready or not, here I come!\")\n```\n\n## repeat 循环\n\n> repeat...while 循环不像 for 和 while 循环在循环体开始执行前先判断条件语句，而是在循环执行结束时判断条件是否符合。 `repeat...while无论条件是否符合，循环会执行至少一次`\n\n![bF7YMc](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/bF7YMc.png)\n\n```swift\n// 语法\nrepeat{\n   statement(s);\n}while( condition );\n\n// example\nvar number = 1\n\nrepeat {\n    print(number)\n    number += 1\n} while number <= 20\n\nprint(\"Ready or not, here I come!\")\n```\n\n## 退出循环\n\n使用`break`退出循环语句，比如在 while 循环中：\n\n```swift\nwhile countDown >= 0 {\n    print(countDown)\n\n    if countDown == 4 {\n        print(\"I'm bored. Let's go now!\")\n\t\t// 当countDown等于4的时候会退出循环\n        break\n    }\n\n    countDown -= 1\n}\n```\n\n## 退出多重循环\n\n在嵌套循环中，想要同时打破内循环和外循环是很常见的。举个例子，我们可以编写一些代码来计算从 1 到 10 的乘法表，如下所示:\n\n```swift\nfor i in 1...10 {\n    for j in 1...10 {\n        let product = i * j\n        print (\"\\(i) * \\(j) is \\(product)\")\n    }\n}\n```\n\n如果需要退出这个双重循环，需要做两步，首先，给外循环加上 label:`outerLoop`\n\n```swift\nouterLoop: for i in 1...10 {\n    for j in 1...10 {\n        let product = i * j\n        print (\"\\(i) * \\(j) is \\(product)\")\n    }\n}\n```\n\n第二步，在内循环执行`break outerLoop`\n\n```swift\nouterLoop: for i in 1...10 {\n    for j in 1...10 {\n        let product = i * j\n        print (\"\\(i) * \\(j) is \\(product)\")\n\n        if product == 50 {\n            print(\"It's a bullseye!\")\n            break outerLoop\n        }\n    }\n}\n```\n\n## 跳过条件 - continue\n\n> `break`退出循环。但是，如果只想跳过当前条件，继续下一个条件，应该使用`continue`。比如如下跳过奇数：\n\n```swift\nfor i in 1...10 {\n    if i % 2 == 1 {\n        continue\n    }\n\n    print(i)\n}\n```\n","slug":"swift/100days/day04"},{"data":{"date":"April 8, 2021","title":"函数、参数、错误","tags":["swift"],"description":"一般来说，一个函数是可以通过外部代码调用的一个“子程序”（或在递归的情况下由内部函数调用）。像程序本身一样，一个函数由称为函数体的一系列语句组成。值可以传递给一个函数，函数将返回一个值。","fromNow":"8 months ago"},"content":"\n## 创建函数\n\nSwift 函数从 func 关键字开始，然后是函数名，然后`{}`。函数的所有主体——都放在大括号内。\n\n```swift\n// 创建函数\nfunc printHelp() {\n    let message = \"\"\"\n\t\tWelcome to MyApp!\n\n\t\tRun this app inside a directory of images and\n\t\tMyApp will resize them all into thumbnails\n\t\t\"\"\"\n    print(message)\n}\n// 调用函数printHelp\nprintHelp()\n```\n\n## 接收参数\n\n函数接收参数，比如内置的`print`函数，参数定义数据类型表示接收的参数类型。\n\n```swift\nprint(\"hello world\") // hello world即为参数\n```\n\n创建函数打印平方值\n\n```swift\nfunc square(number: Int) {\n    print(number * number)\n}\n// Int 表示参数只接受Int类型\nsquare(number: 8) // 64\n```\n\n## 返回值\n\n除了接收数据，函数还可以返回数据。通过`-> <数据类型>`告诉 swift 将返回什么数据类型的值。\n\n```swift\nfunc square(number: Int) -> Int {\n    return number * number\n}\n// -> Int 表示将返回Int类型的值\nlet result = square(number: 8)\nprint(result) // 64\n```\n\n## 参数标签\n\n每一个函数的形式参数都包含形式参数标签和形式参数名两部分\n\n- 形式参数标签用在调用函数的时候\n- 形式参数名用在函数的实现当中\n- 在调用函数的时候，每一个形式参数前边都会有一个形式参数标签\n- 默认情况下，形式参数使用它们的形式参数名作为形式参数标签\n- 如果不想要形式参数标签，可以在形式参数名称前加上`_`\n\n```swift\n//这里的info1和info2就是形式参数标签\n//name和age是形式参数名称\nfunc personalInfo(info1 name : String, info2 age : Int) { //在函数的实现中使用形式参数名称 print(\"姓名：(name)，年龄：(age)\")\n}\n//在函数调用的时候使用形式参数标签\npersonalInfo(info1: \"norman\", info2: 23)\n\n//下面是默认写法\n//此时，name和age既是形式参数标签，也是形式参数名称\nfunc personalInfo(name : String, age : Int) { //在函数内部实现的时候，name和age是形式参数名称 print(\"姓名：(name)，年龄：(age)\")\n}\n//在函数调用的时候，name和age是形式参数标签\npersonalInfo(name: \"norman\", age: 24)\n\n//如果不想要形式参数标签，可以在形式参数名称前面加 _\nfunc personalInfo(_ name : String, _ age : Int) { print(\"姓名：(name)，年龄：(age)\")\n}\n//在函数调用的时候，没有形式参数标签\npersonalInfo(\"norman\", 24)\n```\n\n## 默认参数\n\nswift 允许设置参数默认值，如：\n\n```swift\nfunc greet(_ person: String, nicely: Bool = true) {\n    if nicely == true {\n        print(\"Hello, \\(person)!\")\n    } else {\n        print(\"Oh no, it's \\(person) again...\")\n    }\n}\n\n// 调用\ngreet(\"Taylor\")\ngreet(\"Taylor\", nicely: false)\n```\n\n## 变量参数\n\n当参数不确定，或者参数有多个，在类型后使用`...`，swift 会将传入的值转换为数组，因此可以在函数内部使用循环语句处理。如：\n\n```swift\nfunc square(numbers: Int...) {\n    for number in numbers {\n        print(\"\\(number) squared is \\(number * number)\")\n    }\n}\n\nsquare(numbers: 1, 2, 3, 4, 5)\n```\n\n## io 参数\n\n一般默认在函数中定义的参数都是常量参数，也就是这个参数你只可以查询使用，不能改变它的值。\n\n如果想要声明一个变量参数，可以在参数定义前加 inout 关键字，这样就可以改变这个参数的值了。\n\n比如，如果你想将一个数字翻倍——即直接更改值，而不是返回一个新的值——你可以写一个这样的函数：\n\n```swift\nfunc doubleInPlace(number: inout Int) {\n    number *= 2\n}\n\nvar myNum = 10\ndoubleInPlace(number: &myNum)\n```\n\n## 函数总结\n\n- 函数允许我们重复使用代码，而不需要重复声明。\n- 函数可以接受参数——只需告诉 Swift 每个参数的类型。\n- 函数可以返回值，同样，您只需指定要返回的类型。如果您想返回一些内容，可以使用元组。\n- 可以在内部和外部对参数使用不同的名称，也可以完全忽略外部名称。\n- 参数可以具有默认值，这有助于在通常使用特定值时编写更少的代码。\n- 可变参数函数接受零个或多个特定参数，Swift 将输入转换为数组。\n- 函数可以抛出错误，但必须使用 try 和 handle errors 来调用它们。\n- 可以使用 inout 来更改函数内部的变量，但通常最好是返回一个新值。\n","slug":"swift/100days/day05"},{"data":{"date":"November 20, 2021","title":"Numbers","tags":["python"],"description":"关于数学运算","fromNow":"25 days ago"},"content":"\n## Numbers 类型\n\n> python 有 4 种数字类型\n\n- Boolean\n- Integer\n- Float\n- Complex\n\n### Boolean\n\n布尔值，只有 True 和 False 两个值，可以用来表示真假。\n\n```python\na=True\nb=False\n```\n\n在数学运算种，布尔值的值只有 0 和 1，0 表示 False，1 表示 True。\n\n```python\nc=4+True #5\nd=False\nif d==0:\n    print('d is zero')\nelse:\n    print('d is not zero')\n```\n\n### Integer\n\n```python\na = 37\nb = -299392993727716627377128481812241231\nc = 0x7fa8      # Hexadecimal\nd = 0o253       # Octal\ne = 0b10001111  # Binary\n```\n\n### Float\n\n```python\n>>> a = 2.1 + 4.2\n>>> a == 6.3\nFalse\n>>> a\n6.300000000000001\n>>>\n```\n\n### 比较 Comparisons\n\npython 有如下比较运算符：\n\n```python\nx < y      Less than\nx <= y     Less than or equal\nx > y      Greater than\nx >= y     Greater than or equal\nx == y     Equal to\nx != y     Not equal to\n\n#布尔值操作\nif b >= a and b <= c:\n    print('b is between a and c')\n\nif not (b < a or b > c):\n    print('b is still between a and c')\n```\n\n### 数字转换\n\n使用类型名转换数字，如下：\n\n```python\na = int(3.14)\nb = float(3)\n```\n","slug":"python/1.2-numbers"},{"data":{"date":"October 13, 2020","title":"Linux命令mkdir","tags":["linux"],"description":"用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计","fromNow":"a year ago"},"content":"\n**mkdir**命令用于创建目录，如果在目录名的前面没有加任何路径名，则在当前目录下创建由 dirname 指定的目录；如果给出了一个已经存在的路径，将会在该目录下创建一个指定的目录。在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。\n\n## 使用方法\n\n```shell\n#创建单个文件\nmkdir folder\n\n#创建多个文件\nmkdir folder1 folder2\n\n#使用-p参数创建文件夹，如果不存在即创建，如果不加-p，而且folder不存在，将会报错\nmkdir -p folder/data\n```\n","slug":"linux/Linux命令-mkdir"},{"data":{"date":"May 21, 2020","title":"第1部分：介绍和安装","tags":["go"],"fromNow":"2 years ago"},"content":"\n## Go 介绍\n\nGo 也称为 Golang，是 Google 开发的一种开源，编译和静态类型的编程语言。Go 创作背后的关键人物是 Rob Pike， Ken Thompson 和 Robert Griesemer。Go 于 2009 年 11 月公开发布。\n\nGo 是一种通用的编程语言，具有简单的语法，并具有强大的标准库作为后盾。Go 大放异彩的关键领域之一是创建高可用性和可伸缩性的 Web 应用程序。Go 还可以用于创建命令行应用程序，桌面应用程序甚至移动应用程序。\n\n## Go 优点\n\n当大量其他语言（例如 python，ruby，nodejs ...）执行相同的工作时，为什么选择 Go 作为服务器端编程语言。\n\n这是我选择 Go 时发现的一些优点。\n\n### 简单语法\n\n语法简单明了，并且该语言不会因不必要的功能而肿。这使得编写可读性和可维护性的代码变得容易。\n\n### 易于编写并发程序\n\n并发是语言的固有部分。结果，编写多线程程序简直是小菜一碟。这是通过 Goroutines 和渠道实现的，我们将在接下来的教程中对其进行讨论。\n\n### 编译语言\n\nGo 是一种编译语言。源代码被编译为本地二进制文件。解释语言（例如，nodejs 中使用的 JavaScript）缺少此功能。\n\n### 快速编译\n\nGo 编译器非常神奇，并且从一开始就被设计为快速的。\n\n### 静态链接\n\nGo 编译器支持静态链接。整个 Go 项目可以静态链接到一个大的二进制文件中，并且可以轻松部署在云服务器中，而不必担心依赖关系。\n\n### Go 工具\n\n工具在 Go 中值得特别提及。Go 附带了功能强大的工具，可帮助开发人员编写更好的代码。很少有常用的工具是\n\n- gofmt- gofmt 用于自动格式化 go 源代码。它使用制表符进行缩进，并使用空格进行对齐。\n- vet- vet 分析 go 源代码并报告可能的可疑代码。vet 报告的所有内容都不是真正的问题，但是具有捕获编译器未报告的错误的能力，例如使用 Printf 时格式不正确的说明符。\n- golint- golint 用于识别代码中的样式问题。\n\n### 垃圾收集\n\nGo 使用垃圾回收，因此内存管理几乎会自动执行，开发人员无需担心内存管理问题。这也有助于轻松地编写并发程序。\n\n### 简单语言规范\n\n语言规范非常简单。在整个规范在页面千篇一律，你甚至可以用它来写你自己的编译器:)\n\n### 开源的\n\n最后但并非最不重要的一点是，Go 是一个开源项目。您可以参与 Go 项目并为该项目做出贡献。\n\n## 使用 Go 构建的热门产品\n\n以下是一些使用 Go 构建的流行产品。\n\n- Google 使用 Go 开发了 Kubernetes。\n- Docker 是世界著名的容器化平台，是使用 Go 开发的。\n- Dropbox 已将其性能关键组件从 Python 迁移到 Go。\n- Infoblox 的下一代网络产品是使用 Go 开发的。\n\n## 安装\n\nGo 可以安装在 Mac，Windows 和 Linux 这三个平台上。您可以从https://golang.org/dl/下载对应平台的二进制文件\n\n### Mac\n\n从https://golang.org/dl/下载Mac OS 安装程序。双击开始安装。按照提示进行操作，这会将 Golang 安装在/usr/local/go 中，并且还将文件夹/usr/local/go/bin 添加到 PATH 环境变量中。\n\n```shell\n# if you don't have git install it like so:\nbrew install git\n\n# then install go\nbrew install go\n\n# add GOBIN path to your PATH in ~/.bash_profile\nexport PATH=${HOME}/go/bin:$PATH\n```\n\n### Windows\n\n从https://golang.org/dl/下载MSI安装程序。双击开始安装，然后按照提示进行操作。这会将Go安装在位置c:\\Go，还将目录c:\\Go\\ bin 添加到您的路径环境变量中。\n\n### Linux\n\n从https://golang.org/dl/下载tar文件并将其解压缩到/usr/local。\n\n将/usr/local/go/bin 添加到 PATH 环境变量中。\n\n## 验证安装\n\n要验证 Go 安装是否成功，请 go version 在终端中键入命令，它将输出已安装的 Go 版本。这是我终端的输出。\n\n```shell\n$ go version\ngo version go1.13.6 darwin/amd64\n```\n","slug":"go/简介和安装"}]},"__N_SSG":true}