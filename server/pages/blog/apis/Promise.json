{"pageProps":{"data":{"date":"March 11, 2019","title":"Promise","tags":["javascript"],"fromNow":"3 years ago"},"content":{"compiledSource":"var c=Object.defineProperty,u=Object.defineProperties;var P=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable;var s=(e,o,r)=>o in e?c(e,o,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[o]=r,i=(e,o)=>{for(var r in o||(o={}))p.call(o,r)&&s(e,r,o[r]);if(t)for(var r of t(o))m.call(o,r)&&s(e,r,o[r]);return e},a=(e,o)=>u(e,P(o));var n=(e,o)=>{var r={};for(var l in e)p.call(e,l)&&o.indexOf(l)<0&&(r[l]=e[l]);if(e!=null&&t)for(var l of t(e))o.indexOf(l)<0&&m.call(e,l)&&(r[l]=e[l]);return r};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var l=r,{components:e}=l,o=n(l,[\"components\"]);return mdx(MDXLayout,a(i(i({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Promise\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u7528\\u4E8E\\u4E00\\u4E2A\\u5F02\\u6B65\\u64CD\\u4F5C\\u7684\\u6700\\u7EC8\\u5B8C\\u6210\\u6216\\u5931\\u8D25\\u53CA\\u5176\\u7ED3\\u679C\")),mdx(\"h2\",null,\"\\u72B6\\u6001\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"pending\\uFF0C\\u521D\\u8BC6\\u72B6\\u6001\"),mdx(\"li\",{parentName:\"ol\"},\"fulfilled\\uFF0C\\u64CD\\u4F5C\\u6210\\u529F\"),mdx(\"li\",{parentName:\"ol\"},\"rejected\\uFF0C\\u64CD\\u4F5C\\u5931\\u8D25\")),mdx(\"h2\",null,\"\\u6D41\\u7A0B\"),mdx(\"p\",null,mdx(\"img\",i({parentName:\"p\"},{src:\"https://cdn.jsdelivr.net/gh/funnypan/pics@master/img/20190830101852.png\",alt:null}))),mdx(\"h2\",null,\"\\u8BED\\u6CD5\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-javascript\"}),`new Promise((resolve, reject) => {\n  /*executor*/\n});\n`)),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Promise \\u6267\\u884C\\u65F6\\u7ACB\\u5373\\u8C03\\u7528 executor \\u51FD\\u6570\\uFF08\\u901A\\u5E38\\u662F\\u4E00\\u4E9B\\u5F02\\u6B65\\u64CD\\u4F5C\\uFF09\\uFF0Cresovle \\u5C06 Promise \\u7684\\u72B6\\u6001\\u6539\\u4E3A fulfilled\\uFF0Creject \\u5C06 Promise \\u7684\\u72B6\\u6001\\u6539\\u4E3A rejected\\uFF0C\\u5982\\u679C catch \\u5230\\u4E86\\u9519\\u8BEF\\uFF0C\\u5C06\\u5FFD\\u7565 executor \\u5185\\u7684\\u8FD4\\u56DE\\u503C\\uFF0CPromise \\u7684\\u72B6\\u6001\\u88AB\\u6539\\u6210 rejected\")),mdx(\"h2\",null,\"\\u5C5E\\u6027\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Promise.length //1\"),mdx(\"li\",{parentName:\"ol\"},\"Promise.prototype //Promise \\u7684\\u6784\\u9020\\u5668\\u7684\\u539F\\u578B\")),mdx(\"h2\",null,\"\\u65B9\\u6CD5\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Promise.all //Promise.all \\u65B9\\u6CD5\\u5E38\\u88AB\\u7528\\u4E8E\\u5904\\u7406\\u591A\\u4E2A promise \\u5BF9\\u8C61\\u7684\\u72B6\\u6001\\u96C6\\u5408\"),mdx(\"li\",{parentName:\"ol\"},\"Promise.race //\\u5F53 iterable \\u53C2\\u6570\\u91CC\\u7684\\u4EFB\\u610F\\u4E00\\u4E2A\\u5B50 promise \\u88AB\\u6210\\u529F\\u6216\\u5931\\u8D25\\u540E\\uFF0C\\u7236 promise \\u9A6C\\u4E0A\\u4E5F\\u4F1A\\u7528\\u5B50 promise \\u7684\\u6210\\u529F\\u8FD4\\u56DE\\u503C\\u6216\\u5931\\u8D25\\u8BE6\\u60C5\\u4F5C\\u4E3A\\u53C2\\u6570\\u8C03\\u7528\\u7236 promise \\u7ED1\\u5B9A\\u7684\\u76F8\\u5E94\\u53E5\\u67C4\\uFF0C\\u5E76\\u8FD4\\u56DE\\u8BE5 promise \\u5BF9\\u8C61\\u3002\"),mdx(\"li\",{parentName:\"ol\"},\"Promise.reject //\\u8FD4\\u56DE\\u4E00\\u4E2A\\u72B6\\u6001\\u4E3A\\u5931\\u8D25\\u7684 Promise \\u5BF9\\u8C61\\uFF0C\\u5E76\\u5C06\\u7ED9\\u5B9A\\u7684\\u5931\\u8D25\\u4FE1\\u606F\\u4F20\\u9012\\u7ED9\\u5BF9\\u5E94\\u7684\\u5904\\u7406\\u65B9\\u6CD5\"),mdx(\"li\",{parentName:\"ol\"},\"Promise.resolve //\\u8FD4\\u56DE\\u7684 Promise \\u5BF9\\u8C61\\u72B6\\u6001\\u4E3A fulfilled\")),mdx(\"h2\",null,\"\\u539F\\u578B\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Promise.prototype.constructor //\\u8FD4\\u56DE\\u88AB\\u521B\\u5EFA\\u7684\\u5B9E\\u4F8B\\u51FD\\u6570. \\u9ED8\\u8BA4\\u4E3A Promise \\u51FD\\u6570.\"),mdx(\"li\",{parentName:\"ol\"},\"Promise.prototype.catch //\\u6DFB\\u52A0\\u4E00\\u4E2A\\u62D2\\u7EDD(rejection) \\u56DE\\u8C03\\u5230\\u5F53\\u524D promise, \\u8FD4\\u56DE\\u4E00\\u4E2A\\u65B0\\u7684 promise\"),mdx(\"li\",{parentName:\"ol\"},\"Promise.prototype.then //\\u6DFB\\u52A0\\u89E3\\u51B3(fulfillment)\\u548C\\u62D2\\u7EDD(rejection)\\u56DE\\u8C03\\u5230\\u5F53\\u524D promise, \\u8FD4\\u56DE\\u4E00\\u4E2A\\u65B0\\u7684 promise, \\u5C06\\u4EE5\\u56DE\\u8C03\\u7684\\u8FD4\\u56DE\\u503C\\u6765 resolve.\"),mdx(\"li\",{parentName:\"ol\"},\"Promise.prototype.finally //\\u6DFB\\u52A0\\u4E00\\u4E2A\\u4E8B\\u4EF6\\u5904\\u7406\\u56DE\\u8C03\\u4E8E\\u5F53\\u524D promise \\u5BF9\\u8C61\\uFF0C\\u5E76\\u4E14\\u5728\\u539F promise \\u5BF9\\u8C61\\u89E3\\u6790\\u5B8C\\u6BD5\\u540E\\uFF0C\\u8FD4\\u56DE\\u4E00\\u4E2A\\u65B0\\u7684 promise \\u5BF9\\u8C61\\u3002\\u56DE\\u8C03\\u4F1A\\u5728\\u5F53\\u524D promise \\u8FD0\\u884C\\u5B8C\\u6BD5\\u540E\\u88AB\\u8C03\\u7528\\uFF0C\\u65E0\\u8BBA\\u5F53\\u524D promise \\u7684\\u72B6\\u6001\\u662F\\u5B8C\\u6210(fulfilled)\\u8FD8\\u662F\\u5931\\u8D25(rejected)\")),mdx(\"h2\",null,\"\\u4F7F\\u7528\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-javascript\"}),`const P=new Promise((resolve,reject)=>{\n    if(/*success*/){\n        resolve()\n    }else{\n        reject()\n    }\n})\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"March 11, 2019","title":"Promise","tags":["javascript"],"fromNow":"3 years ago"}},"randomPost":[{"data":{"date":"April 3, 2021","title":"数组、字典、集合、枚举","tags":["swift"],"description":"取得成功的秘诀就是开始","fromNow":"8 months ago"},"content":"\nSwift 中复杂类型包括：\n\n- Array\n- Set\n- Tuple\n- Dictionary\n- Enums\n\n### Array\n\n> Swift 数组允许您存储相同类型的值，可以使用该值在数组中的位置来检索这些值。Swift 会强制检测元素类型，如果类型不同，会报错。\n\n```swift\n// 创建数组\nvar firstArray = [\"hello\",\"hello\",\"world\"]\nvar secondArray = [\"swift\",\"niubility\"]\n\n// 获取数组第一个元素\nprint(firstArray[0]) // hello\n\n//添加数组\nfirstArray.append(\"manon\")\nfirstArray+=[\"icu\"]\n\n// 循环数组\nfor item in firstArray{\n\tprint(item) //hell hello world manon icu\n}\n\n// 修改数组元素\nfirstArray[0] = \"swift\"\n\n// 合并数组\nfirstArray+secondArray\n\n// 计算数组元素的个数\nfirstArray.count\n\n// 判断数组是否为空\nfirstArray.isEmpty\n\n// 删除数组元素\nfirstArray.remove(at: 0)\n```\n\n### Set\n\n> 集合是用来存储类型相同且没有确定顺序的唯一的值，不允许插入已存在的值\n\n```swift\n// 创建集合\nlet firstSet = Set([\"hello\",\"world\",\"manon\",\"icu\",\"swift\"])\nlet secondSet = Set([\"just\",\"do\",\"it\"])\n\n// 访问集合\nfor item in firstSet{\n\tprint(item) //\"hello\",\"world\",\"manon\",\"icu\",\"swift\"\n}\n\n// 判断是否为空\nfirstSet.isEmpty // false\n\n// 计算集合的长度\nfirstSet.count //5\n\n// 判断是否包含某个元素\nfirstSet.contains(\"manon\") //true\n\n// 向集合添加元素\nfirstSet.insert(\"funny\")\n\n// 删除集合的元素\nfirstSet.remove(\"manon\")\n\n// 合并集合\nfirstSet.union(secondSet)\n```\n\n### Tuple\n\n> Swift 中的 tuple 允许存储不同类型的固定数量的值。创建元组后，不能从该元组中添加或删除值。\n\n```swift\n// 创建tuple\nlet firstTuple = (name: \"manon\", level: 9000, Nationality: \"china\")\n\n// 访问tuple\nfirstTuple.name // manon\n```\n\n### Dictionary\n\n> Swift 字典用来存储无序的相同类型数据的集合，Swift 字典会强制检测元素的类型，如果类型不同则会报错。 Swift 字典每个值（value）都关联唯一的键（key），键作为字典中的这个值数据的标识符。和数组中的数据项不同，字典中的数据项并没有具体顺序。我们在需要通过标识符（键）访问数据的时候使用字典，这种方法很大程度上和我们在现实世界中使用字典查字义的方法一样。 Swift 字典的 key 没有类型限制可以是整型或字符串，但必须是唯一的。\n\n```swift\n// 创建字典\nlet firstDictionary = [\"Gintama\" : \"Sakata Gintoki\", \"Haikyuu\" : \"Shoyo Hinata\"]\n\n// 访问字典\nfirstDictionary[\"Gintama\"] // Sakata Gintoki\n\n// 修改字典\nfirstDictionary.updateValue(\"manon\",forKey:Gintama)\n// 或\nfirstDictionary[\"Gintama\"] = \"manon\"\n\n// 删除字典元素\nfirstDictionary.removeValue(\"Gintama\")\n\n// 遍历字典\nfor (key,value) in firstDictionary{\n\tprint(\"字典 key \\(key) -  字典 value \\(value)\")\n}\n\n// 计算字典长度\nfirstDictionary.count\n\n// 判断字典是否为空\nfirstDictionary.isEmpty\n```\n\n### Enums\n\n> 根据 Swift 文档枚举的定义，它是“一组相关值的公共类型，使您能够在代码中以类型安全的方式处理这些值”。可以把它看作是一种特别用于 switch/conditions 的变量类型。\n\n```swift\n// 创建Enums\nenum enumname {\n   // 枚举定义放在这里\n}\n\n// 实例\n\nimport Cocoa\n\nenum DaysofaWeek {\n    case Sunday\n    case Monday\n    case TUESDAY\n    case WEDNESDAY\n    case THURSDAY\n    case FRIDAY\n    case Saturday\n}\n\nvar weekDay = DaysofaWeek.THURSDAY\nweekDay = .THURSDAY\nswitch weekDay{\n\tcase .Sunday:\n\t\tprint(\"星期天\")\n\tcase .Monday:\n\t\tprint(\"星期一\")\n\tcase .TUESDAY:\n\t\tprint(\"星期二\")\n\tcase .WEDNESDAY:\n\t\tprint(\"星期三\")\n\tcase .THURSDAY:\n\t\tprint(\"星期四\")\n\tcase .FRIDAY:\n\t\tprint(\"星期五\")\n\tcase .Saturday:\n\t\tprint(\"星期六\")\n}\n```\n","slug":"swift/100days/day02"},{"data":{"date":"May 19, 2020","title":"理解函数的执行过程","tags":["javascript"],"fromNow":"2 years ago"},"content":"","slug":"javascript/advance/理解函数的执行过程"},{"data":{"date":"March 19, 2020","title":"移动端抽奖","tags":["i18n","javascript"],"fromNow":"2 years ago"},"content":"\n## 抽奖类型\n\n- 圆形抽奖\n- 方形抽奖\n- 老虎机\n- 刮刮卡\n\n### 圆形抽奖\n\n代码如下：\n\n```javascript\n// prefix补全\nvar CSSTransform = (function () {\n  var _elementStyle = document.createElement('div').style;\n  var _vendor = (function () {\n    var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],\n      transform,\n      i = 0,\n      l = vendors.length;\n    for (; i < l; i++) {\n      transform = vendors[i] + 'ransform';\n      if (transform in _elementStyle)\n        return vendors[i].substr(0, vendors[i].length - 1);\n    }\n    return false;\n  })();\n\n  function _prefixStyle(style) {\n    if (_vendor === false) return false;\n    if (_vendor === '') return style;\n    return _vendor + style.charAt(0).toUpperCase() + style.substr(1);\n  }\n  return _prefixStyle('transform');\n})();\n\n// 转盘旋转效果\nvar Lottery = function (el) {\n  this.running = false;\n  this.el = $(el)[0];\n  /*\n\t    旋转转盘至指定位置\n\t    参数：\n\t    giftIndex: 礼物的索引（从0开始到数组.length - 1）\n\t    endCallback：转盘旋转完成时的回调\n\t    */\n  this.rotateToGift = function (giftIndex, endCallback) {\n    if (typeof endCallback != 'function') return;\n    if (giftIndex < 0 || giftIndex > CNST_GIFTS.length - 1) return;\n    if (this.running) return;\n    this.running = true;\n    var degToRotate = (giftIndex + 1) * 45 + 360 * 3 - 22.5; //最少转3圈\n    var rotatedDeg = 0;\n    var speed = 20; //deg\n    var speedRatio = 1;\n    var _this = this;\n\n    function r() {\n      _this.el.style[CSSTransform] = 'rotate(' + -rotatedDeg + 'deg)';\n      rotatedDeg += speed * speedRatio;\n      if (rotatedDeg + 180 >= degToRotate)\n        //开始减速\n        speedRatio = (degToRotate - rotatedDeg) / 180;\n      if (rotatedDeg >= degToRotate - 0.5) {\n        rotatedDeg = degToRotate;\n        _this.el.style[CSSTransform] = 'rotate(' + -rotatedDeg + 'deg)';\n        _this.running = false;\n        endCallback();\n      } else setTimeout(r, 1000 / 24);\n    }\n    r();\n  };\n};\n```\n\n**使用方法：**\n\n```html\n<div class=\"lottery\">\n  <div class=\"lottery-bg\"></div>\n  <button id=\"btnStart\" class=\"button start\" onClick=\"startLottery()\"></button>\n</div>\n```\n\n调用方法：\n\n```javascript\n\nvar myLottery = new Lottery($(\".lottery .lottery-bg\"));//初始化转盘\nmyLottery.rotateToGift(giftIndex, function() {\n\t    //giftIndex为后端接口下发的奖品ID，function为回调函数\n}\n```\n\n待续\n","slug":"translate/移动端抽奖"},{"data":{"date":"December 6, 2021","title":"Collections of python","tags":["python"],"description":"集合包括列表、字典、集合。","fromNow":"9 days ago"},"content":"\n## 总览\n\n程序员经常会用到的集合，列表、字典、集合。比如：\n\n- 股票池\n- 股票价格\n\n有多种选择来处理这一系列数据：\n\n- 列表。表示一组有序的数据\n- 字典。表示一组键值对的数据\n- 集合。表示一组无序的数据\n\n## 列表\n\n当数据的顺序很重要时，使用列表。记住列表可以容纳任何类型的对象。例如，元组列表。\n\n```python\nportfolio = [\n    ('GOOG', 100, 490.1),\n    ('IBM', 50, 91.3),\n    ('CAT', 150, 83.44)\n]\n\nportfolio[0]            # ('GOOG', 100, 490.1)\nportfolio[2]            # ('CAT', 150, 83.44)\n\n# 列表构造\nrecords=[] #初始化一个空列表\n\nrecords.append(('foo', 1, 2)) #添加元素\nrecords.append(('bar', 'hello')) #添加元素\n\n#从文件读取数据并写入列表\nwith open('data.csv', 'w') as f:\n    next(f) #跳过第一行\n    for line in f:\n        row = line.strip().split(',')\n        records.append((row[0], row[1], row[2]))\n```\n\n## 字典\n\n如果你想要快速随机查找(按键名) ，字典是很有用的。例如，股票价格字典:\n\n```python\nprices = {\n   'GOOG': 513.25,\n   'CAT': 87.22,\n   'IBM': 93.37,\n   'MSFT': 44.12\n}\n\nprices['IBM']           # 93.37\nprices['MSFT']          # 44.12\n\n# 字典构造\nprices = {} #初始化一个空字典\n\nprices['GOOG'] = 513.25 #添加元素\nprices['CAT'] = 87.22 #添加元素\n\n#从文件读取数据并写入字典\nwith open('data.csv', 'w') as f:\n    next(f) #跳过第一行\n    for line in f:\n        row = line.strip().split(',')\n        prices[row[0]] = row[1]\n\n# 字典查找\nif 'GOOG' in prices:\n    print('GOOG is in prices')\n\nname = prices.get('GOOG', 'N/A') #N/A表示默认值\n\nprices.get('GOOG', 0) # 513.25\nprices.get('SCOX', 0) # 0\n\n# 复合键 - 任何类型的数据都可以作为字典的键。例如，元组:\n\nholidays = {\n    (1, 1): 'New Year\\'s Day',\n    (7, 4): 'Independence Day',\n    (12, 25): 'Christmas'\n}\nholidays[(1, 1)] # 'New Year\\'s Day'\n```\n\n## 集合\n\n集合是一种特殊的字典，表示一组无序的数据，数据不重复。\n\n```python\ntech_stocks = {'GOOG', 'IBM', 'CAT'}\ntech_stocks = set(['GOOG', 'IBM', 'CAT'])\n\nnames = ['IBM', 'AAPL', 'GOOG', 'IBM', 'GOOG', 'YHOO']\n\nunique = set(names)\n# unique = set(['IBM', 'AAPL','GOOG','YHOO'])\n\nunique.add('CAT')        # Add an item\nunique.remove('YHOO')    # Remove an item\n\ns1 = { 'a', 'b', 'c'}\ns2 = { 'c', 'd' }\ns1 | s2                 # Set union { 'a', 'b', 'c', 'd' }\ns1 & s2                 # Set intersection { 'c' }\ns1 - s2                 # Set difference { 'a', 'b' }\n\n```\n","slug":"python/2.2-containers"},{"data":{"date":"October 11, 2020","title":"Linux命令df","tags":["linux"],"description":"用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计","fromNow":"a year ago"},"content":"\n**df**命令用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计。\n\n## 使用方法\n\n![UBFMHD](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/UBFMHD.png)\n\n同样可以使用**df folder**显示文件夹的使用情况\n\n```shell\ndf folder\n```\n\n![3BJe5E](https://cdn.jsdelivr.net/gh/funnyPan/pics@master/uPic/3BJe5E.png)\n\n## 参数\n\n- -a, --all 包含所有的具有 0 Blocks 的文件系统\n- --block-size={SIZE} 使用 {SIZE} 大小的 Blocks\n- -h, --human-readable 使用人类可读的格式(预设值是不加这个选项的...)\n- -H, --si 很像 -h, 但是用 1000 为单位而不是用 1024\n- -i, --inodes 列出 inode 资讯，不列出已使用 block\n- -k, --kilobytes 就像是 --block-size=1024\n- -l, --local 限制列出的文件结构\n- -m, --megabytes 就像 --block-size=1048576\n- --no-sync 取得资讯前不 sync (预设值)\n- -P, --portability 使用 POSIX 输出格式\n- --sync 在取得资讯前 sync\n- -t, --type=TYPE 限制列出文件系统的 TYPE\n- -T, --print-type 显示文件系统的形式\n- -x, --exclude-type=TYPE 限制列出文件系统不要显示 TYPE\n- -v (忽略)\n- --help 显示这个帮手并且离开\n- --version 输出版本资讯并且离开\n","slug":"linux/Linux命令-df"},{"data":{"date":"May 7, 2018","title":"Undefined","tags":["javascript"],"fromNow":"4 years ago"},"content":"\nUndefined 类型只有一个值-undefined，即声明变量但未赋值，这个变量的值就是 undefined。\n\n```javascript\nvar a;\nconsole.log(a == undefined); //true\nconsole.log(typeof a); //\"undefined\"\n```\n\n> 对未初始化的变量和未声明的变量执行 typeof 都会返回 undefined\n","slug":"javascript/base/Undefined"}]},"__N_SSG":true}