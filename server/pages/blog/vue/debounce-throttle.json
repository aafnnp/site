{"pageProps":{"data":{"date":"November 20, 2021","title":"如何在 vue 中使用 Debounce、Throttle","tags":["vue","javascript"],"description":"如input、resize、scroll、intersection observer 等事件可能发生得非常频繁，例如每秒发生几次，因此调用一个动作，比如对每个事件发出读取请求，并不是一个明智的方法。","fromNow":"25 days ago"},"content":{"compiledSource":"var u=Object.defineProperty,m=Object.defineProperties;var s=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var p=(e,n,t)=>n in e?u(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,a=(e,n)=>{for(var t in n||(n={}))l.call(n,t)&&p(e,t,n[t]);if(i)for(var t of i(n))d.call(n,t)&&p(e,t,n[t]);return e},r=(e,n)=>m(e,s(n));var c=(e,n)=>{var t={};for(var o in e)l.call(e,o)&&n.indexOf(o)<0&&(t[o]=e[o]);if(e!=null&&i)for(var o of i(e))n.indexOf(o)<0&&d.call(e,o)&&(t[o]=e[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:e}=o,n=c(o,[\"components\"]);return mdx(MDXLayout,r(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"\\u4E3A\\u4EC0\\u4E48\\u8981\\u4F7F\\u7528 debounce \\u548C throttle\"),mdx(\"p\",null,\"\\u9632\\u6296\\u548C\\u8282\\u6D41\\u5C31\\u662F\\u9488\\u5BF9\\u54CD\\u5E94\\u8DDF\\u4E0D\\u4E0A\\u89E6\\u53D1\\u9891\\u7387\\u8FD9\\u7C7B\\u95EE\\u9898\\u7684\\u4E24\\u79CD\\u89E3\\u51B3\\u65B9\\u6848\\u3002\\u5728\\u7ED9 DOM \\u7ED1\\u5B9A\\u4E8B\\u4EF6\\u65F6\\uFF0C\\u6709\\u4E9B\\u4E8B\\u4EF6\\u6211\\u4EEC\\u662F\\u65E0\\u6CD5\\u63A7\\u5236\\u89E6\\u53D1\\u9891\\u7387\\u7684\\u3002 \\u5982\\u9F20\\u6807\\u79FB\\u52A8\\u4E8B\\u4EF6 onmousemove, \\u6EDA\\u52A8\\u6EDA\\u52A8\\u6761\\u4E8B\\u4EF6 onscroll\\uFF0C\\u7A97\\u53E3\\u5927\\u5C0F\\u6539\\u53D8\\u4E8B\\u4EF6 onresize\\uFF0C\\u77AC\\u95F4\\u7684\\u64CD\\u4F5C\\u90FD\\u4F1A\\u5BFC\\u81F4\\u8FD9\\u4E9B\\u4E8B\\u4EF6\\u4F1A\\u88AB\\u9AD8\\u9891\\u89E6\\u53D1\\u3002 \\u5982\\u679C\\u4E8B\\u4EF6\\u7684\\u56DE\\u8C03\\u51FD\\u6570\\u8F83\\u4E3A\\u590D\\u6742\\uFF0C\\u5C31\\u4F1A\\u5BFC\\u81F4\\u54CD\\u5E94\\u8DDF\\u4E0D\\u4E0A\\u89E6\\u53D1\\uFF0C\\u51FA\\u73B0\\u9875\\u9762\\u5361\\u987F\\uFF0C\\u5047\\u6B7B\\u73B0\\u8C61\\u3002 \\u5728\\u5B9E\\u65F6\\u68C0\\u67E5\\u8F93\\u5165\\u65F6\\uFF0C\\u5982\\u679C\\u6211\\u4EEC\\u7ED1\\u5B9A onkeyup \\u4E8B\\u4EF6\\u53D1\\u8BF7\\u6C42\\u53BB\\u670D\\u52A1\\u7AEF\\u68C0\\u67E5\\uFF0C\\u7528\\u6237\\u8F93\\u5165\\u8FC7\\u7A0B\\u4E2D\\uFF0C\\u4E8B\\u4EF6\\u7684\\u89E6\\u53D1\\u9891\\u7387\\u4E5F\\u4F1A\\u5F88\\u9AD8\\uFF0C\\u4F1A\\u5BFC\\u81F4\\u5927\\u91CF\\u7684\\u8BF7\\u6C42\\u53D1\\u51FA\\uFF0C\\u54CD\\u5E94\\u901F\\u5EA6\\u4F1A\\u5927\\u5927\\u8DDF\\u4E0D\\u4E0A\\u89E6\\u53D1\\u3002\"),mdx(\"h2\",null,\"\\u5728 watcher \\u4E2D\\u4F7F\\u7528 debounce\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"\\u5728\",mdx(\"inlineCode\",{parentName:\"li\"},\"created\"),\"\\u751F\\u547D\\u5468\\u671F\\u5C06\",mdx(\"inlineCode\",{parentName:\"li\"},\"this.debounce\"),\"\\u7ED1\\u5B9A\\u5230\",mdx(\"inlineCode\",{parentName:\"li\"},\"this\"),\"\\u4E0A\\uFF0C\\u8FD9\\u6837\",mdx(\"inlineCode\",{parentName:\"li\"},\"this.debounce\"),\"\\u5C31\\u53EF\\u4EE5\\u5728\",mdx(\"inlineCode\",{parentName:\"li\"},\"created\"),\"\\u751F\\u547D\\u5468\\u671F\\u4E2D\\u4F7F\\u7528\\u3002\"),mdx(\"li\",{parentName:\"ol\"},\"\\u5728\",mdx(\"inlineCode\",{parentName:\"li\"},\"watch\"),\"\\u51FD\\u6570\\u4E2D\\uFF0C\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"li\"},\"this.debounce\"),\"\\u8C03\\u7528\",mdx(\"inlineCode\",{parentName:\"li\"},\"debounce\"),\"\\u51FD\\u6570\\uFF0C\\u5E76\\u4F20\\u5165\",mdx(\"inlineCode\",{parentName:\"li\"},\"this.debounce\"),\"\\u7684\\u56DE\\u8C03\\u51FD\\u6570\\u3002\"),mdx(\"li\",{parentName:\"ol\"},\"\\u5728\\u4E8B\\u4EF6\\u9500\\u6BC1\\u524D\\uFF0C\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"li\"},\"this.debounce\"),\"\\u8C03\\u7528\",mdx(\"inlineCode\",{parentName:\"li\"},\"clear\"),\"\\u51FD\\u6570\\uFF0C\\u6E05\\u9664\\u5B9A\\u65F6\\u5668\\u3002\")),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-html\"}),`<template>\n  <input v-model=\"value\" type=\"text\" />\n  <p>{{ value }}</p>\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    data() {\n      return {\n        value: '',\n      };\n    },\n    watch: {\n      value(...args) {\n        this.debouncedWatch(...args);\n      },\n    },\n    created() {\n      this.debouncedWatch = debounce((newValue, oldValue) => {\n        console.log('New value:', newValue);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedWatch.cancel();\n    },\n  };\n<\\/script>\n`)),mdx(\"h2\",null,\"\\u4F7F\\u7528 debounce \\u5904\\u7406\\u4E8B\\u4EF6\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-html\"}),`<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    created() {\n      this.debouncedHandler = debounce((event) => {\n        console.log('New value:', event.target.value);\n      }, 500);\n    },\n    beforeUnmount() {\n      this.debouncedHandler.cancel();\n    },\n  };\n<\\/script>\n`)),mdx(\"p\",null,\"\\u4E3A\\u4EC0\\u4E48\\u4E0D\\u9002\\u7528\",mdx(\"inlineCode\",{parentName:\"p\"},\"debounce\"),\"\\u6216\",mdx(\"inlineCode\",{parentName:\"p\"},\"throttle\"),\"\\u76F4\\u63A5\\u7ED1\\u5B9A\\u51FD\\u6570\\u5462\\uFF1F\\u6BD4\\u5982\\uFF1A\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-html\"}),`<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  import debounce from 'lodash.debounce';\n  export default {\n    methods: {\n      // Don't do this!\n      debouncedHandler: debounce(function (event) {\n        console.log('New value:', event.target.value);\n      }, 500),\n    },\n  };\n<\\/script>\n`)),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"\\u4F7F\\u7528\",mdx(\"inlineCode\",{parentName:\"strong\"},\"export default { ... }\"),\"\\u4ECE\\u7EC4\\u4EF6\\u5BFC\\u51FA\\u7684 options \\u5BF9\\u8C61\\uFF0C\\u5305\\u62EC\\u65B9\\u6CD5\\uFF0C\\u5C06\\u88AB\\u7EC4\\u4EF6\\u7684\\u6240\\u6709\\u5B9E\\u4F8B\\u91CD\\u7528\\u3002\\u5982\\u679C\\u7F51\\u9875\\u4E2D\\u6709 2 \\u4E2A\\u6216\\u66F4\\u591A\\u7684\\u7EC4\\u4EF6\\u5B9E\\u4F8B\\uFF0C\\u90A3\\u4E48\\u6240\\u6709\\u7684\\u7EC4\\u4EF6\\u90FD\\u5C06\\u4F7F\\u7528\\u76F8\\u540C\\u7684\",mdx(\"inlineCode\",{parentName:\"strong\"},\"debounce\"),\"\\u6216\",mdx(\"inlineCode\",{parentName:\"strong\"},\"throttle\"),\"\\u7684\\u51FD\\u6570\\u65B9\\u6CD5\\u3002\")),mdx(\"h2\",null,\"\\u603B\\u7ED3\"),mdx(\"p\",null,\"\\u5728 \",mdx(\"inlineCode\",{parentName:\"p\"},\"vue\"),\" \\u4E2D\\u4F7F\\u7528 \",mdx(\"inlineCode\",{parentName:\"p\"},\"debounce\"),\" \\u548C \",mdx(\"inlineCode\",{parentName:\"p\"},\"throttle\"),\" \\u51FD\\u6570\\uFF0C\\u5E94\\u8BE5\\u5728 \",mdx(\"inlineCode\",{parentName:\"p\"},\"created\"),\" \\u548C \",mdx(\"inlineCode\",{parentName:\"p\"},\"beforeUnmount\"),\" \\u751F\\u547D\\u5468\\u671F\\u4E2D\\u4F7F\\u7528\\uFF0C\\u800C\\u4E0D\\u662F\\u5728 \",mdx(\"inlineCode\",{parentName:\"p\"},\"watch\"),\" \\u4E2D\\u4F7F\\u7528\\u3002\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-html\"}),`<template>\n  <input v-on:input=\"debouncedHandler\" type=\"text\" />\n</template>\n<script>\n  export default {\n    created() {\n      this.debouncedCallback = debounce((...args) => {\n        // The debounced\n        callback;\n      }, 500);\n    },\n    watch: {\n      value(...args) {\n        this.debouncedCallback(...args);\n      },\n    },\n  };\n<\\/script>\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"date":"November 20, 2021","title":"如何在 vue 中使用 Debounce、Throttle","tags":["vue","javascript"],"description":"如input、resize、scroll、intersection observer 等事件可能发生得非常频繁，例如每秒发生几次，因此调用一个动作，比如对每个事件发出读取请求，并不是一个明智的方法。","fromNow":"25 days ago"}},"randomPost":[{"data":{"date":"April 28, 2021","title":"React State","tags":["react","javascript"],"description":"如何在 React.js 中处理状态","fromNow":"8 months ago"},"content":"\n`state`是`React`组件中的内置对象\n\n在`state`对象中，我们存储属于组件的属性值。当状态对象更改时，组件重新渲染。使用`setState()`函数修改`state`对象。`state`和`props`类似，区别在于`props`被传递给组件，而`state`在组件中进行管理。开发人员应该始终尝试使状态最小化。此外，有状态组件的数量应该最小化。\n\n## 使用`create-react-app`创建应用\n\n```shell\nnpx create-react-app state-demo\ncd state-demo\n```\n\n```jsx\n//App.js\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      title: 'React state example',\n    };\n  }\n\n  tooggleTitle = () => {\n    if (this.state.title === '') {\n      this.setState({ title: 'React state example' });\n    } else {\n      this.setState({ title: '' });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <input\n            type=\"checkbox\"\n            id=\"showTitle\"\n            onClick={this.tooggleTitle}\n            defaultChecked\n          />\n          <label htmlFor=\"showTitle\">Show title</label>\n        </div>\n\n        <h2>{this.state.title}</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n在这里创建一个简单的`state`，用来存储`title`的属性\n\n`toggleTitle`函数切换`title`的值\n\n<CodeSandbox codeSandboxId=\"white-worker-4r3bv\" />\n\n[在线地址](https://csb-4r3bv.netlify.app/)\n","slug":"react/state"},{"data":{"date":"May 21, 2020","title":"Go-HelloWorld","tags":["go"],"fromNow":"2 years ago"},"content":"\n## 搭建开发环境\n\n让我们创建一个目录，在该目录中编写我们的 hello world 程序。打开终端并运行以下命令。\n\n```shell\nmkdir ~/Documents/learngo/\n```\n\n上面的命令将 learngo 在当前用户的 Documents 目录中创建一个名为目录。\n\n### 你好，世界\n\n使用您喜欢的文本编辑器 main.go 在 learngo 目录中创建一个名为以下内容的文件。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello World\")\n}\n```\n\n按照 Go 中的约定，将包含 main 函数的文件命名为 main.go。\n\n### 运行程序\n\n1. go install\n\n```shell\ncd ~/Documents/learngo/\ngo install\n#此命令将编译程序并将编译好的二进制文件复制到~/go/bin内\nls -al ~/go/bin/\n\n~/go/bin/learngo\n#输出hello world\n```\n\n2. go build\n\n```shell\ncd ~/Documents/learngo/\ngo build\n#上面的命令将learngo在当前目录中创建一个二进制文件。ls -al将显示learngo已创建一个名为的文件。\n./learngo\n#输出Hello World\n```\n\n3. go run\n\ncd ~/Documents/learngo/在终端中键入命令以将当前目录更改为 learngo。\n\n```shell\ngo run main.go\nHello World\n#go run和go build/go install命令之间的细微差别是，go run需要.go文件名作为参数。\n```\n\ngo run 工作原理非常相似 go build。无需将程序编译并安装到当前目录，而是将文件编译到一个临时位置并从该位置运行文件。如果您想知道 go run 将文件编译到的位置，请 go run 使用--work 参数运行。\n\n```shell\ngo run --work main.go\n```\n\n4. go playground\n\n<Gist gistLink=\"Manonicu/ef552d29300ffb0cd311d9cc8828bc6e\" />\n\n我们将简要讨论该程序的每一行的作用。\n\n- package main - 每个 go 文件必须以 package name 开始。\n- import \"fmt\" - import 语句用于导入其他软件\n\n  包\n\n- func main（）- func 关键字标记函数的开始。\n- fmt.Println（\"H​​ello World\"）\n","slug":"go/第一个Go程序"},{"data":{"date":"December 8, 2021","title":"如何判断是否是日期对象？","tags":["javascript"],"description":"一些常见的日期对象判断方法","fromNow":"6 days ago"},"content":"\n## typeof\n\n使用`typeof`可以判断一个变量的类型，返回值为`string`，可以使用`instanceof`来判断一个对象是否是某个类的实例。\n\n我们使用运算符 typeof 检查 getMonth 方法是否是一个函数，看看它是否返回`function`\n\n```javascript\nconst date = new Date(2021, 1, 1);\nconsole.log(typeof date.getMonth === 'function');\n```\n\n如果返回`true`，说明 getMonth 是一个函数，`date`可能是`Date`实例，如果返回`false`，说明 getMonth 是一个字符串。\n\n## instanceof\n\ninstanceof 可以用来判断一个对象是否是某个类的实例，返回值为`boolean`。\n\n```javascript\nconst date = new Date(2021, 1, 1);\nconsole.log(date instanceof Date);\n```\n\n如果返回`true`，说明 date 是一个`Date`实例，如果返回`false`，说明 date 不是一个`Date`实例。\n\n## Object.prototype.toString\n\nObject.prototype.toString 方法可以返回一个对象的字符串表示，返回值为`string`。\n\n```javascript\nconst date = new Date(2021, 1, 1);\nconsole.log(date instanceof Date);\n```\n\n## isValid Date\n\n判断一个对象是否是一个有效的日期对象，返回值为`boolean`。\n\n```javascript\nObject.prototype.toString;\n```\n","slug":"javascript/how-to-check-is-valid-date-object"},{"data":{"date":"April 4, 2021","title":"操作符、条件判断","tags":["swift"],"description":"取得成功的秘诀就是开始","fromNow":"8 months ago"},"content":"\nSwift 有三种条件判断：\n\n- if else\n- switch\n- ternary `三元运算`\n\n### if else\n\n> if 语句 后可以有可选的 else 语句, else 语句在布尔表达式为 false 时执行。\n\n![XxhyS1](https://cdn.jsdelivr.net/gh/manonicu/pics@master/uPic/XxhyS1.png)\n\n```swift\nlet level = 9001\nif level > 9000 {\n  print(\"It's over 9000! You can proceed with your quest.\")\n} else {\n  print(\"Bummer, you definitely need to go for a training arc\")\n}\n```\n\n### switch\n\n> switch 语句允许测试一个变量等于多个值时的情况。\n\n```swift\nlet level = 10000\n\nswitch level {\n   case 7000 :\n     print(\"Muda Muda Muda Muda Muda Muda\")\n   case 8000 :\n     print(\"You are not strong enough\")\n   case 9000 :\n     print(\"You are strong enough! You can proceed with your quest\")\n   case 10000:\n     print(\"It's over 9000! You can proceed with your quest.\")\n   default :\n     print(\"Please try again\")\n}\n```\n\n### ternary\n\n> switch 语句允许测试一个变量等于多个值时的情况。 Swift 语言中 \b 只要匹配到 case 语句，则整个 switch 语句执行完成。\n\n```swift\nlet level = 9000\nprint( level > 9000 ? \"It's over 9000! You can proceed with your quest.\" :  print(\"Bummer, you definitely need to go for a training arc\")\n```\n","slug":"swift/100days/day03"},{"data":{"date":"November 18, 2021","title":"第一个程序","tags":["python"],"description":"","fromNow":"a month ago"},"content":"\n## 运行 python\n\n> Python 程序总是在解释器中运行。解释器是一个“基于控制台的”应用程序，通常使用命令运行。\n\n```python\npython3\nPython 3.9.8 (main, Nov 10 2021, 03:55:42)\n[Clang 13.0.0 (clang-1300.0.29.3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\n## 交互模式\n\n当在终端运行`python3`后，就进入了交互模式，即 REPL。\n\n- `>>>`表示开始新的语句\n- `...`表示继续上一条语句\n- `_`表示最后的返回值\n\n```python\n>>> print('hello world')\nhello world\n>>> 37*42\n1554\n>>> for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n>>>\n```\n\n## 创建程序\n\n> python 程序以`.py`结尾，可以直接运行。\n\n```python\n# hello.py\nprint('hello world')\n```\n\n## 运行程序\n\n> python 程序运行的命令是`python hello.py`\n\n```python\n$ python hello.py\n$ python3 hello.py\n```\n\n## 样例程序\n\n> 问题：一天早上，你出去，在芝加哥西尔斯大厦旁的人行道上放了一张美元钞票。从那以后，你每天出去的账单都会翻倍。这堆钞票超过塔的高度需要多长时间？\n\n解决方法：\n\n```python\n# sears.py\nbill_thickness = 0.11 * 0.001 # Meters (0.11 mm)\nsears_height = 442 # Height (meters)\nnum_bills = 1\nday = 1\n\nwhile num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\nprint('Number of bills', num_bills)\nprint('Final height', num_bills * bill_thickness)\n```\n\n```shell\nbash % python3 sears.py\n1 1 0.00011\n2 2 0.00022\n3 4 0.00044\n4 8 0.00088\n5 16 0.00176\n6 32 0.00352\n...\n21 1048576 115.34336\n22 2097152 230.68672\nNumber of days 23\nNumber of bills 4194304\nFinal height 461.37344\n```\n\n### 语句\n\n> 每行语句以换行符结束，但是不能以分号结束。\n\n```python\na = 3 + 4\nb = a * 2\nprint(b)\n```\n\n### 注释 comment\n\n> 注释以#开始，不会被运行。\n\n```python\na = 3 + 4\n# This is a comment\nb = a * 2\nprint(b)\n```\n\n### 类型与变量 type&variable\n\n> python 属于动态类型语言，变量可以随时变化。python 变量名称可以包含字母、数字、下划线，但不能以数字或关键字开头。对大小写敏感。\n\n```python\nheight = 442           # An integer\nheight = 442.0         # Floating point\nheight = 'Really tall' # A string\n\n# 大小写敏感\nname = 'Jake'\nName = 'Elwood'\nNAME = 'Guido'\n\nwhile x < 0:   # OK\nWHILE x < 0:   # ERROR\n```\n\n### 循环 for/while\n\n```python\nwhile num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\n```\n\n### 缩进 indentation\n\n> 缩进是用来表示一组连在一起的语句:\n\n```python\nwhile num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\n```\n\n- 使用空格代替 tab 来缩进\n- 使用 4 个空格来缩进\n\n### 条件语句 if-else\n\n```python\nif a > b:\n    print('Computer says no')\nelif a == b:\n    print('Computer says yes')\nelse:\n    print('Computer says maybe')\n```\n\n### 输出语句 print\n\n```python\nprint('Hello world!') # Prints the text 'Hello world!'\n\n#用户输出\nname = input('Enter your name:')\nprint('Your name is', name)\n```\n","slug":"python/1.1-first-program"},{"data":{"date":"December 21, 2020","title":"Docker入门","tags":["docker"],"description":"Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。","fromNow":"a year ago"},"content":"\n## 简介\n\nDocker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。\n\nDocker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\n\n## 应用场景\n\n- Web 应用的自动化打包和发布。\n- 自动化测试和持续集成、发布。\n- 在服务型环境中部署和调整数据库或其他的后台应用。\n- 从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。\n\n## 优点\n\n- 快速，一致地交付您的应用程序\n- 响应式部署和扩展\n- 在同一硬件上运行更多工作负载\n\n## 目录\n\n- [x] [Docker 镜像](./Docker镜像)\n- [x] [Docker 容器](./Docker容器)\n- [x] [Dockerfiles](./Dockerfiles)\n- [x] [Docker 更新容器](./Docker更新容器)\n- [x] [Docker 更新镜像](./Docker更新镜像)\n- [ ] [How to access files outside a Docker image]()\n- [ ] [Sharing Docker Images on Docker Hub]()\n- [ ] [Working with Docker Images from the command line]()\n- [ ] [Working with Docker Containers from the command line]()\n- [ ] [What to do if a Docker container immediately exits]()\n- [ ] [Create a simple Node.js Hello World Docker Container from scratch]()\n- [ ] [Using Docker Desktop to manage a Container]()\n- [ ] [First steps with Docker after the installation]()\n- [x] [Macos 安装 Docker](./Macos安装Docker)\n","slug":"docker/index"}]},"__N_SSG":true}